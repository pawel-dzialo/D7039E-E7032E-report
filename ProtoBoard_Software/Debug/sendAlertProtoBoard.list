
sendAlertProtoBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008114  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  080082a4  080082a4  000182a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085a8  080085a8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080085a8  080085a8  000185a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085b0  080085b0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085b0  080085b0  000185b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085b4  080085b4  000185b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080085b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  20000090  08008648  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a0  08008648  000206a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000057  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029ec6  00000000  00000000  00020117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007896  00000000  00000000  00049fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001930  00000000  00000000  00051878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013f7  00000000  00000000  000531a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000268e9  00000000  00000000  0005459f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b0bf  00000000  00000000  0007ae88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d509b  00000000  00000000  00095f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000598c  00000000  00000000  0016afe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000e3  00000000  00000000  00170970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00002718  00000000  00000000  00170a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b80c 	b.w	8000260 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f007 feb8 	bl	8007fc4 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__aeabi_idiv0>:
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop

08000264 <deregister_tm_clones>:
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <deregister_tm_clones+0x10>)
 8000266:	4b04      	ldr	r3, [pc, #16]	; (8000278 <deregister_tm_clones+0x14>)
 8000268:	4283      	cmp	r3, r0
 800026a:	d002      	beq.n	8000272 <deregister_tm_clones+0xe>
 800026c:	4b03      	ldr	r3, [pc, #12]	; (800027c <deregister_tm_clones+0x18>)
 800026e:	b103      	cbz	r3, 8000272 <deregister_tm_clones+0xe>
 8000270:	4718      	bx	r3
 8000272:	4770      	bx	lr
 8000274:	20000090 	.word	0x20000090
 8000278:	20000090 	.word	0x20000090
 800027c:	00000000 	.word	0x00000000

08000280 <register_tm_clones>:
 8000280:	4805      	ldr	r0, [pc, #20]	; (8000298 <register_tm_clones+0x18>)
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <register_tm_clones+0x1c>)
 8000284:	1a1b      	subs	r3, r3, r0
 8000286:	0fd9      	lsrs	r1, r3, #31
 8000288:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 800028c:	1049      	asrs	r1, r1, #1
 800028e:	d002      	beq.n	8000296 <register_tm_clones+0x16>
 8000290:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <register_tm_clones+0x20>)
 8000292:	b103      	cbz	r3, 8000296 <register_tm_clones+0x16>
 8000294:	4718      	bx	r3
 8000296:	4770      	bx	lr
 8000298:	20000090 	.word	0x20000090
 800029c:	20000090 	.word	0x20000090
 80002a0:	00000000 	.word	0x00000000

080002a4 <__do_global_dtors_aux>:
 80002a4:	b510      	push	{r4, lr}
 80002a6:	4c06      	ldr	r4, [pc, #24]	; (80002c0 <__do_global_dtors_aux+0x1c>)
 80002a8:	7823      	ldrb	r3, [r4, #0]
 80002aa:	b943      	cbnz	r3, 80002be <__do_global_dtors_aux+0x1a>
 80002ac:	f7ff ffda 	bl	8000264 <deregister_tm_clones>
 80002b0:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <__do_global_dtors_aux+0x20>)
 80002b2:	b113      	cbz	r3, 80002ba <__do_global_dtors_aux+0x16>
 80002b4:	4804      	ldr	r0, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x24>)
 80002b6:	f3af 8000 	nop.w
 80002ba:	2301      	movs	r3, #1
 80002bc:	7023      	strb	r3, [r4, #0]
 80002be:	bd10      	pop	{r4, pc}
 80002c0:	20000090 	.word	0x20000090
 80002c4:	00000000 	.word	0x00000000
 80002c8:	0800828c 	.word	0x0800828c

080002cc <frame_dummy>:
 80002cc:	b508      	push	{r3, lr}
 80002ce:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <frame_dummy+0x18>)
 80002d0:	b11b      	cbz	r3, 80002da <frame_dummy+0xe>
 80002d2:	4905      	ldr	r1, [pc, #20]	; (80002e8 <frame_dummy+0x1c>)
 80002d4:	4805      	ldr	r0, [pc, #20]	; (80002ec <frame_dummy+0x20>)
 80002d6:	f3af 8000 	nop.w
 80002da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80002de:	f7ff bfcf 	b.w	8000280 <register_tm_clones>
 80002e2:	bf00      	nop
 80002e4:	00000000 	.word	0x00000000
 80002e8:	20000094 	.word	0x20000094
 80002ec:	0800828c 	.word	0x0800828c

080002f0 <trigger>:
static void User_Init(void);

/* USER CODE BEGIN PFP */
uint8_t triggered = 0;
uint16_t trigger_amount =0;
void trigger(){
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	trigger_amount +=1;
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <trigger+0x20>)
 80002f6:	881b      	ldrh	r3, [r3, #0]
 80002f8:	3301      	adds	r3, #1
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	4b04      	ldr	r3, [pc, #16]	; (8000310 <trigger+0x20>)
 80002fe:	801a      	strh	r2, [r3, #0]
	triggered = 1;
 8000300:	4b04      	ldr	r3, [pc, #16]	; (8000314 <trigger+0x24>)
 8000302:	2201      	movs	r2, #1
 8000304:	701a      	strb	r2, [r3, #0]

}
 8000306:	bf00      	nop
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	200000b0 	.word	0x200000b0
 8000314:	200000ae 	.word	0x200000ae

08000318 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b08e      	sub	sp, #56	; 0x38
 800031c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t CLIENT_BDADDR[] = {0xbb, 0x00, 0x00, 0xE1, 0x80, 0x02};
 800031e:	4a73      	ldr	r2, [pc, #460]	; (80004ec <MX_BlueNRG_MS_Init+0x1d4>)
 8000320:	f107 031c 	add.w	r3, r7, #28
 8000324:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000328:	6018      	str	r0, [r3, #0]
 800032a:	3304      	adds	r3, #4
 800032c:	8019      	strh	r1, [r3, #0]
  uint8_t SERVER_BDADDR[] = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 800032e:	4a70      	ldr	r2, [pc, #448]	; (80004f0 <MX_BlueNRG_MS_Init+0x1d8>)
 8000330:	f107 0314 	add.w	r3, r7, #20
 8000334:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000338:	6018      	str	r0, [r3, #0]
 800033a:	3304      	adds	r3, #4
 800033c:	8019      	strh	r1, [r3, #0]

  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 800033e:	f000 f8fd 	bl	800053c <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000342:	2000      	movs	r0, #0
 8000344:	f001 fbd8 	bl	8001af8 <BSP_PB_GetState>
 8000348:	4603      	mov	r3, r0
 800034a:	b2da      	uxtb	r2, r3
 800034c:	4b69      	ldr	r3, [pc, #420]	; (80004f4 <MX_BlueNRG_MS_Init+0x1dc>)
 800034e:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 8000350:	2100      	movs	r1, #0
 8000352:	4869      	ldr	r0, [pc, #420]	; (80004f8 <MX_BlueNRG_MS_Init+0x1e0>)
 8000354:	f006 fb04 	bl	8006960 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000358:	1cba      	adds	r2, r7, #2
 800035a:	1d7b      	adds	r3, r7, #5
 800035c:	4611      	mov	r1, r2
 800035e:	4618      	mov	r0, r3
 8000360:	f006 f973 	bl	800664a <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 8000364:	f006 f9b5 	bl	80066d2 <hci_reset>

  HAL_Delay(100);
 8000368:	2064      	movs	r0, #100	; 0x64
 800036a:	f001 fd8d 	bl	8001e88 <HAL_Delay>

  printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 800036e:	797b      	ldrb	r3, [r7, #5]
 8000370:	4619      	mov	r1, r3
 8000372:	887b      	ldrh	r3, [r7, #2]
 8000374:	461a      	mov	r2, r3
 8000376:	4861      	ldr	r0, [pc, #388]	; (80004fc <MX_BlueNRG_MS_Init+0x1e4>)
 8000378:	f007 f8aa 	bl	80074d0 <iprintf>

  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 800037c:	797b      	ldrb	r3, [r7, #5]
 800037e:	2b30      	cmp	r3, #48	; 0x30
 8000380:	d902      	bls.n	8000388 <MX_BlueNRG_MS_Init+0x70>
    bnrg_expansion_board = IDB05A1;
 8000382:	4b5f      	ldr	r3, [pc, #380]	; (8000500 <MX_BlueNRG_MS_Init+0x1e8>)
 8000384:	2201      	movs	r2, #1
 8000386:	701a      	strb	r2, [r3, #0]
  }

  if (BLE_Role == CLIENT) {
 8000388:	4b5e      	ldr	r3, [pc, #376]	; (8000504 <MX_BlueNRG_MS_Init+0x1ec>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d109      	bne.n	80003a4 <MX_BlueNRG_MS_Init+0x8c>
    BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 8000390:	f107 030c 	add.w	r3, r7, #12
 8000394:	f107 021c 	add.w	r2, r7, #28
 8000398:	e892 0003 	ldmia.w	r2, {r0, r1}
 800039c:	6018      	str	r0, [r3, #0]
 800039e:	3304      	adds	r3, #4
 80003a0:	8019      	strh	r1, [r3, #0]
 80003a2:	e008      	b.n	80003b6 <MX_BlueNRG_MS_Init+0x9e>
  } else {
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 80003a4:	f107 030c 	add.w	r3, r7, #12
 80003a8:	f107 0214 	add.w	r2, r7, #20
 80003ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003b0:	6018      	str	r0, [r3, #0]
 80003b2:	3304      	adds	r3, #4
 80003b4:	8019      	strh	r1, [r3, #0]
  }

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80003b6:	f107 030c 	add.w	r3, r7, #12
 80003ba:	461a      	mov	r2, r3
 80003bc:	2106      	movs	r1, #6
 80003be:	2000      	movs	r0, #0
 80003c0:	f006 f8ad 	bl	800651e <aci_hal_write_config_data>
 80003c4:	4603      	mov	r3, r0
 80003c6:	627b      	str	r3, [r7, #36]	; 0x24
                                  CONFIG_DATA_PUBADDR_LEN,
                                  bdaddr);
  if (ret) {
 80003c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d003      	beq.n	80003d6 <MX_BlueNRG_MS_Init+0xbe>
    printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 80003ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80003d0:	484d      	ldr	r0, [pc, #308]	; (8000508 <MX_BlueNRG_MS_Init+0x1f0>)
 80003d2:	f007 f87d 	bl	80074d0 <iprintf>
  }

  ret = aci_gatt_init();
 80003d6:	f005 fd4d 	bl	8005e74 <aci_gatt_init>
 80003da:	4603      	mov	r3, r0
 80003dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (ret) {
 80003de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d002      	beq.n	80003ea <MX_BlueNRG_MS_Init+0xd2>
    printf("GATT_Init failed.\n");
 80003e4:	4849      	ldr	r0, [pc, #292]	; (800050c <MX_BlueNRG_MS_Init+0x1f4>)
 80003e6:	f007 f933 	bl	8007650 <puts>
  }

  if (BLE_Role == SERVER) {
 80003ea:	4b46      	ldr	r3, [pc, #280]	; (8000504 <MX_BlueNRG_MS_Init+0x1ec>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d11e      	bne.n	8000430 <MX_BlueNRG_MS_Init+0x118>
    if (bnrg_expansion_board == IDB05A1) {
 80003f2:	4b43      	ldr	r3, [pc, #268]	; (8000500 <MX_BlueNRG_MS_Init+0x1e8>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d10f      	bne.n	800041a <MX_BlueNRG_MS_Init+0x102>
      ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80003fa:	f107 020a 	add.w	r2, r7, #10
 80003fe:	1dbb      	adds	r3, r7, #6
 8000400:	9301      	str	r3, [sp, #4]
 8000402:	f107 0308 	add.w	r3, r7, #8
 8000406:	9300      	str	r3, [sp, #0]
 8000408:	4613      	mov	r3, r2
 800040a:	2207      	movs	r2, #7
 800040c:	2100      	movs	r1, #0
 800040e:	2001      	movs	r0, #1
 8000410:	f005 fb01 	bl	8005a16 <aci_gap_init_IDB05A1>
 8000414:	4603      	mov	r3, r0
 8000416:	627b      	str	r3, [r7, #36]	; 0x24
 8000418:	e028      	b.n	800046c <MX_BlueNRG_MS_Init+0x154>
    }
    else {
      ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800041a:	1dbb      	adds	r3, r7, #6
 800041c:	f107 0208 	add.w	r2, r7, #8
 8000420:	f107 010a 	add.w	r1, r7, #10
 8000424:	2001      	movs	r0, #1
 8000426:	f005 fb46 	bl	8005ab6 <aci_gap_init_IDB04A1>
 800042a:	4603      	mov	r3, r0
 800042c:	627b      	str	r3, [r7, #36]	; 0x24
 800042e:	e01d      	b.n	800046c <MX_BlueNRG_MS_Init+0x154>
    }
  }
  else {
    if (bnrg_expansion_board == IDB05A1) {
 8000430:	4b33      	ldr	r3, [pc, #204]	; (8000500 <MX_BlueNRG_MS_Init+0x1e8>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b01      	cmp	r3, #1
 8000436:	d10f      	bne.n	8000458 <MX_BlueNRG_MS_Init+0x140>
      ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000438:	f107 020a 	add.w	r2, r7, #10
 800043c:	1dbb      	adds	r3, r7, #6
 800043e:	9301      	str	r3, [sp, #4]
 8000440:	f107 0308 	add.w	r3, r7, #8
 8000444:	9300      	str	r3, [sp, #0]
 8000446:	4613      	mov	r3, r2
 8000448:	2207      	movs	r2, #7
 800044a:	2100      	movs	r1, #0
 800044c:	2004      	movs	r0, #4
 800044e:	f005 fae2 	bl	8005a16 <aci_gap_init_IDB05A1>
 8000452:	4603      	mov	r3, r0
 8000454:	627b      	str	r3, [r7, #36]	; 0x24
 8000456:	e009      	b.n	800046c <MX_BlueNRG_MS_Init+0x154>
    }
    else {
      ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000458:	1dbb      	adds	r3, r7, #6
 800045a:	f107 0208 	add.w	r2, r7, #8
 800045e:	f107 010a 	add.w	r1, r7, #10
 8000462:	2003      	movs	r0, #3
 8000464:	f005 fb27 	bl	8005ab6 <aci_gap_init_IDB04A1>
 8000468:	4603      	mov	r3, r0
 800046a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  if (ret != BLE_STATUS_SUCCESS) {
 800046c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800046e:	2b00      	cmp	r3, #0
 8000470:	d002      	beq.n	8000478 <MX_BlueNRG_MS_Init+0x160>
    printf("GAP_Init failed.\n");
 8000472:	4827      	ldr	r0, [pc, #156]	; (8000510 <MX_BlueNRG_MS_Init+0x1f8>)
 8000474:	f007 f8ec 	bl	8007650 <puts>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8000478:	2301      	movs	r3, #1
 800047a:	9303      	str	r3, [sp, #12]
 800047c:	4b25      	ldr	r3, [pc, #148]	; (8000514 <MX_BlueNRG_MS_Init+0x1fc>)
 800047e:	9302      	str	r3, [sp, #8]
 8000480:	2300      	movs	r3, #0
 8000482:	9301      	str	r3, [sp, #4]
 8000484:	2310      	movs	r3, #16
 8000486:	9300      	str	r3, [sp, #0]
 8000488:	2307      	movs	r3, #7
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	2001      	movs	r0, #1
 8000490:	f005 fc45 	bl	8005d1e <aci_gap_set_auth_requirement>
 8000494:	4603      	mov	r3, r0
 8000496:	627b      	str	r3, [r7, #36]	; 0x24
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret == BLE_STATUS_SUCCESS) {
 8000498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800049a:	2b00      	cmp	r3, #0
 800049c:	d102      	bne.n	80004a4 <MX_BlueNRG_MS_Init+0x18c>
    printf("BLE Stack Initialized.\n");
 800049e:	481e      	ldr	r0, [pc, #120]	; (8000518 <MX_BlueNRG_MS_Init+0x200>)
 80004a0:	f007 f8d6 	bl	8007650 <puts>
  }

  if (BLE_Role == SERVER) {
 80004a4:	4b17      	ldr	r3, [pc, #92]	; (8000504 <MX_BlueNRG_MS_Init+0x1ec>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d111      	bne.n	80004d0 <MX_BlueNRG_MS_Init+0x1b8>
    printf("SERVER: BLE Stack Initialized\n");
 80004ac:	481b      	ldr	r0, [pc, #108]	; (800051c <MX_BlueNRG_MS_Init+0x204>)
 80004ae:	f007 f8cf 	bl	8007650 <puts>
    ret = Add_Sample_Service();
 80004b2:	f000 f8ef 	bl	8000694 <Add_Sample_Service>
 80004b6:	4603      	mov	r3, r0
 80004b8:	627b      	str	r3, [r7, #36]	; 0x24

    if (ret == BLE_STATUS_SUCCESS)
 80004ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d103      	bne.n	80004c8 <MX_BlueNRG_MS_Init+0x1b0>
      printf("Service added successfully.\n");
 80004c0:	4817      	ldr	r0, [pc, #92]	; (8000520 <MX_BlueNRG_MS_Init+0x208>)
 80004c2:	f007 f8c5 	bl	8007650 <puts>
 80004c6:	e006      	b.n	80004d6 <MX_BlueNRG_MS_Init+0x1be>
    else
      printf("Error while adding service.\n");
 80004c8:	4816      	ldr	r0, [pc, #88]	; (8000524 <MX_BlueNRG_MS_Init+0x20c>)
 80004ca:	f007 f8c1 	bl	8007650 <puts>
 80004ce:	e002      	b.n	80004d6 <MX_BlueNRG_MS_Init+0x1be>

  } else {
    printf("CLIENT: BLE Stack Initialized\n");
 80004d0:	4815      	ldr	r0, [pc, #84]	; (8000528 <MX_BlueNRG_MS_Init+0x210>)
 80004d2:	f007 f8bd 	bl	8007650 <puts>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 80004d6:	2104      	movs	r1, #4
 80004d8:	2001      	movs	r0, #1
 80004da:	f006 f885 	bl	80065e8 <aci_hal_set_tx_power_level>
 80004de:	4603      	mov	r3, r0
 80004e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 80004e2:	bf00      	nop
 80004e4:	3728      	adds	r7, #40	; 0x28
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	08008390 	.word	0x08008390
 80004f0:	08008398 	.word	0x08008398
 80004f4:	20000000 	.word	0x20000000
 80004f8:	08000b3d 	.word	0x08000b3d
 80004fc:	080082a4 	.word	0x080082a4
 8000500:	200000ac 	.word	0x200000ac
 8000504:	20000001 	.word	0x20000001
 8000508:	080082b8 	.word	0x080082b8
 800050c:	080082d8 	.word	0x080082d8
 8000510:	080082ec 	.word	0x080082ec
 8000514:	0001e240 	.word	0x0001e240
 8000518:	08008300 	.word	0x08008300
 800051c:	08008318 	.word	0x08008318
 8000520:	08008338 	.word	0x08008338
 8000524:	08008354 	.word	0x08008354
 8000528:	08008370 	.word	0x08008370

0800052c <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 8000530:	f000 f812 	bl	8000558 <User_Process>
  hci_user_evt_proc();
 8000534:	f006 fb8e 	bl	8006c54 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}

0800053c <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000540:	2101      	movs	r1, #1
 8000542:	2000      	movs	r0, #0
 8000544:	f001 fa84 	bl	8001a50 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8000548:	2000      	movs	r0, #0
 800054a:	f001 f9ed 	bl	8001928 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 800054e:	2000      	movs	r0, #0
 8000550:	f001 fb30 	bl	8001bb4 <BSP_COM_Init>
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}

08000558 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8000558:	b5b0      	push	{r4, r5, r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
  if (set_connectable)
 800055e:	4b3c      	ldr	r3, [pc, #240]	; (8000650 <User_Process+0xf8>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	b2db      	uxtb	r3, r3
 8000564:	2b00      	cmp	r3, #0
 8000566:	d00b      	beq.n	8000580 <User_Process+0x28>
  {
    /* Establish connection with remote device */
    Make_Connection();
 8000568:	f000 f906 	bl	8000778 <Make_Connection>
    set_connectable = FALSE;
 800056c:	4b38      	ldr	r3, [pc, #224]	; (8000650 <User_Process+0xf8>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
    user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000572:	2000      	movs	r0, #0
 8000574:	f001 fac0 	bl	8001af8 <BSP_PB_GetState>
 8000578:	4603      	mov	r3, r0
 800057a:	b2da      	uxtb	r2, r3
 800057c:	4b35      	ldr	r3, [pc, #212]	; (8000654 <User_Process+0xfc>)
 800057e:	701a      	strb	r2, [r3, #0]
  }

  if (BLE_Role == CLIENT)
 8000580:	4b35      	ldr	r3, [pc, #212]	; (8000658 <User_Process+0x100>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d12e      	bne.n	80005e6 <User_Process+0x8e>
  {
    /* Start TX handle Characteristic dynamic discovery if not yet done */
    if (connected && !end_read_tx_char_handle){
 8000588:	4b34      	ldr	r3, [pc, #208]	; (800065c <User_Process+0x104>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d007      	beq.n	80005a0 <User_Process+0x48>
 8000590:	4b33      	ldr	r3, [pc, #204]	; (8000660 <User_Process+0x108>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b2db      	uxtb	r3, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	d102      	bne.n	80005a0 <User_Process+0x48>
      startReadTXCharHandle();
 800059a:	f000 f957 	bl	800084c <startReadTXCharHandle>
 800059e:	e00a      	b.n	80005b6 <User_Process+0x5e>
    }
    /* Start RX handle Characteristic dynamic discovery if not yet done */
    else if (connected && !end_read_rx_char_handle){
 80005a0:	4b2e      	ldr	r3, [pc, #184]	; (800065c <User_Process+0x104>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d006      	beq.n	80005b6 <User_Process+0x5e>
 80005a8:	4b2e      	ldr	r3, [pc, #184]	; (8000664 <User_Process+0x10c>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d101      	bne.n	80005b6 <User_Process+0x5e>
      startReadRXCharHandle();
 80005b2:	f000 f971 	bl	8000898 <startReadRXCharHandle>
    }

    if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled)
 80005b6:	4b29      	ldr	r3, [pc, #164]	; (800065c <User_Process+0x104>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d013      	beq.n	80005e6 <User_Process+0x8e>
 80005be:	4b28      	ldr	r3, [pc, #160]	; (8000660 <User_Process+0x108>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d00e      	beq.n	80005e6 <User_Process+0x8e>
 80005c8:	4b26      	ldr	r3, [pc, #152]	; (8000664 <User_Process+0x10c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d009      	beq.n	80005e6 <User_Process+0x8e>
 80005d2:	4b25      	ldr	r3, [pc, #148]	; (8000668 <User_Process+0x110>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d104      	bne.n	80005e6 <User_Process+0x8e>
    {
      BSP_LED_Off(LED2); //end of the connection and chars discovery phase
 80005dc:	2000      	movs	r0, #0
 80005de:	f001 f9cb 	bl	8001978 <BSP_LED_Off>
      enableNotification();
 80005e2:	f000 f9d5 	bl	8000990 <enableNotification>
    }
  }

  /* Check if the User Button has been pushed */
  if (triggered)
 80005e6:	4b21      	ldr	r3, [pc, #132]	; (800066c <User_Process+0x114>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d02c      	beq.n	8000648 <User_Process+0xf0>
  {
    /* Debouncing */
    HAL_Delay(50);
 80005ee:	2032      	movs	r0, #50	; 0x32
 80005f0:	f001 fc4a 	bl	8001e88 <HAL_Delay>

    /* Wait until the User Button is released */
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
 80005f4:	bf00      	nop
 80005f6:	2000      	movs	r0, #0
 80005f8:	f001 fa7e 	bl	8001af8 <BSP_PB_GetState>
 80005fc:	4602      	mov	r2, r0
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <User_Process+0xfc>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b2db      	uxtb	r3, r3
 8000604:	2b00      	cmp	r3, #0
 8000606:	bf0c      	ite	eq
 8000608:	2301      	moveq	r3, #1
 800060a:	2300      	movne	r3, #0
 800060c:	b2db      	uxtb	r3, r3
 800060e:	429a      	cmp	r2, r3
 8000610:	d0f1      	beq.n	80005f6 <User_Process+0x9e>

    /* Debouncing */
    HAL_Delay(50);
 8000612:	2032      	movs	r0, #50	; 0x32
 8000614:	f001 fc38 	bl	8001e88 <HAL_Delay>

    if (connected && notification_enabled)
 8000618:	4b10      	ldr	r3, [pc, #64]	; (800065c <User_Process+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d010      	beq.n	8000642 <User_Process+0xea>
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <User_Process+0x110>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	d00b      	beq.n	8000642 <User_Process+0xea>
    {
      /* Send a toggle command to the remote device */
      uint8_t data[20] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J'};
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <User_Process+0x118>)
 800062c:	1d3c      	adds	r4, r7, #4
 800062e:	461d      	mov	r5, r3
 8000630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000634:	682b      	ldr	r3, [r5, #0]
 8000636:	6023      	str	r3, [r4, #0]
      sendData(data, sizeof(data));
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2114      	movs	r1, #20
 800063c:	4618      	mov	r0, r3
 800063e:	f000 f977 	bl	8000930 <sendData>
                                * is called in main().
                                * E.g. it can be enabled for debugging. */
    }

    /* Reset the User Button flag */
    triggered = 0;
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <User_Process+0x114>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
  }
}
 8000648:	bf00      	nop
 800064a:	3718      	adds	r7, #24
 800064c:	46bd      	mov	sp, r7
 800064e:	bdb0      	pop	{r4, r5, r7, pc}
 8000650:	20000002 	.word	0x20000002
 8000654:	20000000 	.word	0x20000000
 8000658:	20000001 	.word	0x20000001
 800065c:	200000b4 	.word	0x200000b4
 8000660:	200000bd 	.word	0x200000bd
 8000664:	200000be 	.word	0x200000be
 8000668:	200000ba 	.word	0x200000ba
 800066c:	200000ae 	.word	0x200000ae
 8000670:	080083a0 	.word	0x080083a0

08000674 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 800067e:	4b04      	ldr	r3, [pc, #16]	; (8000690 <BSP_PB_Callback+0x1c>)
 8000680:	2201      	movs	r2, #1
 8000682:	701a      	strb	r2, [r3, #0]
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	200000ad 	.word	0x200000ad

08000694 <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b095      	sub	sp, #84	; 0x54
 8000698:	af06      	add	r7, sp, #24
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 800069a:	4b31      	ldr	r3, [pc, #196]	; (8000760 <Add_Sample_Service+0xcc>)
 800069c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80006a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 80006a6:	4b2f      	ldr	r3, [pc, #188]	; (8000764 <Add_Sample_Service+0xd0>)
 80006a8:	f107 0414 	add.w	r4, r7, #20
 80006ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 80006b2:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <Add_Sample_Service+0xd4>)
 80006b4:	1d3c      	adds	r4, r7, #4
 80006b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 80006bc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80006c0:	4b2a      	ldr	r3, [pc, #168]	; (800076c <Add_Sample_Service+0xd8>)
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2307      	movs	r3, #7
 80006c6:	2201      	movs	r2, #1
 80006c8:	2002      	movs	r0, #2
 80006ca:	f005 fbf6 	bl	8005eba <aci_gatt_add_serv>
 80006ce:	4603      	mov	r3, r0
 80006d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80006d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d136      	bne.n	800074a <Add_Sample_Service+0xb6>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 80006dc:	4b23      	ldr	r3, [pc, #140]	; (800076c <Add_Sample_Service+0xd8>)
 80006de:	8818      	ldrh	r0, [r3, #0]
 80006e0:	f107 0214 	add.w	r2, r7, #20
 80006e4:	4b22      	ldr	r3, [pc, #136]	; (8000770 <Add_Sample_Service+0xdc>)
 80006e6:	9305      	str	r3, [sp, #20]
 80006e8:	2301      	movs	r3, #1
 80006ea:	9304      	str	r3, [sp, #16]
 80006ec:	2310      	movs	r3, #16
 80006ee:	9303      	str	r3, [sp, #12]
 80006f0:	2300      	movs	r3, #0
 80006f2:	9302      	str	r3, [sp, #8]
 80006f4:	2300      	movs	r3, #0
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	2310      	movs	r3, #16
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2314      	movs	r3, #20
 80006fe:	2102      	movs	r1, #2
 8000700:	f005 fc64 	bl	8005fcc <aci_gatt_add_char>
 8000704:	4603      	mov	r3, r0
 8000706:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800070a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800070e:	2b00      	cmp	r3, #0
 8000710:	d11d      	bne.n	800074e <Add_Sample_Service+0xba>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <Add_Sample_Service+0xd8>)
 8000714:	8818      	ldrh	r0, [r3, #0]
 8000716:	1d3a      	adds	r2, r7, #4
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <Add_Sample_Service+0xe0>)
 800071a:	9305      	str	r3, [sp, #20]
 800071c:	2301      	movs	r3, #1
 800071e:	9304      	str	r3, [sp, #16]
 8000720:	2310      	movs	r3, #16
 8000722:	9303      	str	r3, [sp, #12]
 8000724:	2301      	movs	r3, #1
 8000726:	9302      	str	r3, [sp, #8]
 8000728:	2300      	movs	r3, #0
 800072a:	9301      	str	r3, [sp, #4]
 800072c:	230c      	movs	r3, #12
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2314      	movs	r3, #20
 8000732:	2102      	movs	r1, #2
 8000734:	f005 fc4a 	bl	8005fcc <aci_gatt_add_char>
 8000738:	4603      	mov	r3, r0
 800073a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800073e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000742:	2b00      	cmp	r3, #0
 8000744:	d105      	bne.n	8000752 <Add_Sample_Service+0xbe>

  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS;
 8000746:	2300      	movs	r3, #0
 8000748:	e005      	b.n	8000756 <Add_Sample_Service+0xc2>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800074a:	bf00      	nop
 800074c:	e002      	b.n	8000754 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800074e:	bf00      	nop
 8000750:	e000      	b.n	8000754 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000752:	bf00      	nop

fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 8000754:	2347      	movs	r3, #71	; 0x47
}
 8000756:	4618      	mov	r0, r3
 8000758:	373c      	adds	r7, #60	; 0x3c
 800075a:	46bd      	mov	sp, r7
 800075c:	bd90      	pop	{r4, r7, pc}
 800075e:	bf00      	nop
 8000760:	080083b4 	.word	0x080083b4
 8000764:	080083c4 	.word	0x080083c4
 8000768:	080083d4 	.word	0x080083d4
 800076c:	200000c4 	.word	0x200000c4
 8000770:	200000c6 	.word	0x200000c6
 8000774:	200000c8 	.word	0x200000c8

08000778 <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None
 * @retval None
 */
void Make_Connection(void)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b08f      	sub	sp, #60	; 0x3c
 800077c:	af08      	add	r7, sp, #32
  tBleStatus ret;

  if(BLE_Role == CLIENT) {
 800077e:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <Make_Connection+0xc0>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d132      	bne.n	80007ec <Make_Connection+0x74>

    printf("Client Create Connection\n");
 8000786:	482d      	ldr	r0, [pc, #180]	; (800083c <Make_Connection+0xc4>)
 8000788:	f006 ff62 	bl	8007650 <puts>
    tBDAddr bdaddr = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 800078c:	4a2c      	ldr	r2, [pc, #176]	; (8000840 <Make_Connection+0xc8>)
 800078e:	f107 0310 	add.w	r3, r7, #16
 8000792:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000796:	6018      	str	r0, [r3, #0]
 8000798:	3304      	adds	r3, #4
 800079a:	8019      	strh	r1, [r3, #0]

    BSP_LED_On(LED2); //To indicate the start of the connection and discovery phase
 800079c:	2000      	movs	r0, #0
 800079e:	f001 f8d5 	bl	800194c <BSP_LED_On>

    /*
    Scan_Interval, Scan_Window, Peer_Address_Type, Peer_Address, Own_Address_Type, Conn_Interval_Min,
    Conn_Interval_Max, Conn_Latency, Supervision_Timeout, Conn_Len_Min, Conn_Len_Max
    */
    ret = aci_gap_create_connection(SCAN_P, SCAN_L, PUBLIC_ADDR, bdaddr, PUBLIC_ADDR, CONN_P1, CONN_P2, 0,
 80007a2:	f107 0310 	add.w	r3, r7, #16
 80007a6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80007aa:	9206      	str	r2, [sp, #24]
 80007ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80007b0:	9205      	str	r2, [sp, #20]
 80007b2:	223c      	movs	r2, #60	; 0x3c
 80007b4:	9204      	str	r2, [sp, #16]
 80007b6:	2200      	movs	r2, #0
 80007b8:	9203      	str	r2, [sp, #12]
 80007ba:	2228      	movs	r2, #40	; 0x28
 80007bc:	9202      	str	r2, [sp, #8]
 80007be:	2228      	movs	r2, #40	; 0x28
 80007c0:	9201      	str	r2, [sp, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	9200      	str	r2, [sp, #0]
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80007d0:	f005 fafc 	bl	8005dcc <aci_gap_create_connection>
 80007d4:	4603      	mov	r3, r0
 80007d6:	75fb      	strb	r3, [r7, #23]
                                    SUPERV_TIMEOUT, CONN_L1 , CONN_L2);

    if (ret != 0){
 80007d8:	7dfb      	ldrb	r3, [r7, #23]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d027      	beq.n	800082e <Make_Connection+0xb6>
      printf("Error while starting connection.\n");
 80007de:	4819      	ldr	r0, [pc, #100]	; (8000844 <Make_Connection+0xcc>)
 80007e0:	f006 ff36 	bl	8007650 <puts>
      HAL_Delay(100);
 80007e4:	2064      	movs	r0, #100	; 0x64
 80007e6:	f001 fb4f 	bl	8001e88 <HAL_Delay>
    */
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
                                   NO_WHITE_LIST_USE, 13, local_name, 0, NULL, 0, 0);
    PRINTF("%d\n",ret);
  }
}
 80007ea:	e020      	b.n	800082e <Make_Connection+0xb6>
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <Make_Connection+0xd0>)
 80007ee:	463c      	mov	r4, r7
 80007f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007f2:	c407      	stmia	r4!, {r0, r1, r2}
 80007f4:	7023      	strb	r3, [r4, #0]
    hci_le_set_scan_resp_data(0,NULL);
 80007f6:	2100      	movs	r1, #0
 80007f8:	2000      	movs	r0, #0
 80007fa:	f005 ffd6 	bl	80067aa <hci_le_set_scan_resp_data>
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 80007fe:	2300      	movs	r3, #0
 8000800:	9306      	str	r3, [sp, #24]
 8000802:	2300      	movs	r3, #0
 8000804:	9305      	str	r3, [sp, #20]
 8000806:	2300      	movs	r3, #0
 8000808:	9304      	str	r3, [sp, #16]
 800080a:	2300      	movs	r3, #0
 800080c:	9303      	str	r3, [sp, #12]
 800080e:	463b      	mov	r3, r7
 8000810:	9302      	str	r3, [sp, #8]
 8000812:	230d      	movs	r3, #13
 8000814:	9301      	str	r3, [sp, #4]
 8000816:	2300      	movs	r3, #0
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	2300      	movs	r3, #0
 800081c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000820:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000824:	2000      	movs	r0, #0
 8000826:	f005 f990 	bl	8005b4a <aci_gap_set_discoverable>
 800082a:	4603      	mov	r3, r0
 800082c:	75fb      	strb	r3, [r7, #23]
}
 800082e:	bf00      	nop
 8000830:	371c      	adds	r7, #28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd90      	pop	{r4, r7, pc}
 8000836:	bf00      	nop
 8000838:	20000001 	.word	0x20000001
 800083c:	080083e4 	.word	0x080083e4
 8000840:	08008424 	.word	0x08008424
 8000844:	08008400 	.word	0x08008400
 8000848:	0800842c 	.word	0x0800842c

0800084c <startReadTXCharHandle>:
 * @brief  Discovery TX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadTXCharHandle(void)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b087      	sub	sp, #28
 8000850:	af02      	add	r7, sp, #8
  if (!start_read_tx_char_handle)
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <startReadTXCharHandle+0x40>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	d112      	bne.n	8000882 <startReadTXCharHandle+0x36>
  {
    PRINTF("Start reading TX Char Handle\n");

    const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <startReadTXCharHandle+0x44>)
 800085e:	463c      	mov	r4, r7
 8000860:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000862:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <startReadTXCharHandle+0x48>)
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	b298      	uxth	r0, r3
 800086c:	463b      	mov	r3, r7
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	2302      	movs	r3, #2
 8000872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000876:	2101      	movs	r1, #1
 8000878:	f005 fd03 	bl	8006282 <aci_gatt_disc_charac_by_uuid>
    start_read_tx_char_handle = TRUE;
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <startReadTXCharHandle+0x40>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
  }
}
 8000882:	bf00      	nop
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	bd90      	pop	{r4, r7, pc}
 800088a:	bf00      	nop
 800088c:	200000bb 	.word	0x200000bb
 8000890:	080083c4 	.word	0x080083c4
 8000894:	200000b8 	.word	0x200000b8

08000898 <startReadRXCharHandle>:
 * @brief  Discovery RX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadRXCharHandle(void)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b087      	sub	sp, #28
 800089c:	af02      	add	r7, sp, #8
  if (!start_read_rx_char_handle)
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <startReadRXCharHandle+0x40>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d112      	bne.n	80008ce <startReadRXCharHandle+0x36>
  {
    PRINTF("Start reading RX Char Handle\n");

    const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <startReadRXCharHandle+0x44>)
 80008aa:	463c      	mov	r4, r7
 80008ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <startReadRXCharHandle+0x48>)
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	b298      	uxth	r0, r3
 80008b8:	463b      	mov	r3, r7
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2302      	movs	r3, #2
 80008be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008c2:	2101      	movs	r1, #1
 80008c4:	f005 fcdd 	bl	8006282 <aci_gatt_disc_charac_by_uuid>
    start_read_rx_char_handle = TRUE;
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <startReadRXCharHandle+0x40>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	701a      	strb	r2, [r3, #0]
  }
}
 80008ce:	bf00      	nop
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd90      	pop	{r4, r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000bc 	.word	0x200000bc
 80008dc:	080083d4 	.word	0x080083d4
 80008e0:	200000b8 	.word	0x200000b8

080008e4 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	70fb      	strb	r3, [r7, #3]
  BSP_LED_Toggle(LED2);
 80008f0:	2000      	movs	r0, #0
 80008f2:	f001 f857 	bl	80019a4 <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++) {
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	e009      	b.n	8000910 <receiveData+0x2c>
    printf("%c", data_buffer[i]);
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f006 fdfb 	bl	8007500 <putchar>
  for(int i = 0; i < Nb_bytes; i++) {
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	3301      	adds	r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	429a      	cmp	r2, r3
 8000916:	dbf1      	blt.n	80008fc <receiveData+0x18>
  }
  fflush(stdout);
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <receiveData+0x48>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	4618      	mov	r0, r3
 8000920:	f006 fbde 	bl	80070e0 <fflush>
}
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	2000002c 	.word	0x2000002c

08000930 <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af02      	add	r7, sp, #8
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	70fb      	strb	r3, [r7, #3]
  if(BLE_Role == SERVER) {
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <sendData+0x4c>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d10b      	bne.n	800095c <sendData+0x2c>
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <sendData+0x50>)
 8000946:	8818      	ldrh	r0, [r3, #0]
 8000948:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <sendData+0x54>)
 800094a:	8819      	ldrh	r1, [r3, #0]
 800094c:	78fa      	ldrb	r2, [r7, #3]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	4613      	mov	r3, r2
 8000954:	2200      	movs	r2, #0
 8000956:	f005 fc04 	bl	8006162 <aci_gatt_update_char_value>
  }
  else {
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
  }
}
 800095a:	e00a      	b.n	8000972 <sendData+0x42>
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <sendData+0x58>)
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	b298      	uxth	r0, r3
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <sendData+0x5c>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	3301      	adds	r3, #1
 8000968:	b299      	uxth	r1, r3
 800096a:	78fa      	ldrb	r2, [r7, #3]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f005 fd91 	bl	8006494 <aci_gatt_write_without_response>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000001 	.word	0x20000001
 8000980:	200000c4 	.word	0x200000c4
 8000984:	200000c6 	.word	0x200000c6
 8000988:	200000b8 	.word	0x200000b8
 800098c:	200000c2 	.word	0x200000c2

08000990 <enableNotification>:
 * @brief  Enable notification
 * @param  None
 * @retval None
 */
void enableNotification(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
  uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 8000996:	2301      	movs	r3, #1
 8000998:	803b      	strh	r3, [r7, #0]

  uint32_t tickstart = HAL_GetTick();
 800099a:	f001 fa69 	bl	8001e70 <HAL_GetTick>
 800099e:	6078      	str	r0, [r7, #4]

  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 80009a0:	e008      	b.n	80009b4 <enableNotification+0x24>
    /* Radio is busy */
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 80009a2:	f001 fa65 	bl	8001e70 <HAL_GetTick>
 80009a6:	4602      	mov	r2, r0
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d80e      	bhi.n	80009d2 <enableNotification+0x42>
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 80009b4:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <enableNotification+0x54>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	b298      	uxth	r0, r3
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <enableNotification+0x58>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	3302      	adds	r3, #2
 80009c0:	b299      	uxth	r1, r3
 80009c2:	463b      	mov	r3, r7
 80009c4:	2202      	movs	r2, #2
 80009c6:	f005 fcea 	bl	800639e <aci_gatt_write_charac_descriptor>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b46      	cmp	r3, #70	; 0x46
 80009ce:	d0e8      	beq.n	80009a2 <enableNotification+0x12>
 80009d0:	e000      	b.n	80009d4 <enableNotification+0x44>
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 80009d2:	bf00      	nop
  }
  notification_enabled = TRUE;
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <enableNotification+0x5c>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	701a      	strb	r2, [r3, #0]
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000b8 	.word	0x200000b8
 80009e8:	200000c0 	.word	0x200000c0
 80009ec:	200000ba 	.word	0x200000ba

080009f0 <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	603a      	str	r2, [r7, #0]
 80009fa:	80fb      	strh	r3, [r7, #6]
 80009fc:	460b      	mov	r3, r1
 80009fe:	717b      	strb	r3, [r7, #5]
  if(handle == RXCharHandle + 1){
 8000a00:	88fa      	ldrh	r2, [r7, #6]
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <Attribute_Modified_CB+0x4c>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	3301      	adds	r3, #1
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d105      	bne.n	8000a18 <Attribute_Modified_CB+0x28>
    receiveData(att_data, data_length);
 8000a0c:	797b      	ldrb	r3, [r7, #5]
 8000a0e:	4619      	mov	r1, r3
 8000a10:	6838      	ldr	r0, [r7, #0]
 8000a12:	f7ff ff67 	bl	80008e4 <receiveData>
  } else if (handle == TXCharHandle + 2) {
    if(att_data[0] == 0x01)
      notification_enabled = TRUE;
  }
}
 8000a16:	e00c      	b.n	8000a32 <Attribute_Modified_CB+0x42>
  } else if (handle == TXCharHandle + 2) {
 8000a18:	88fa      	ldrh	r2, [r7, #6]
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <Attribute_Modified_CB+0x50>)
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	3302      	adds	r3, #2
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d106      	bne.n	8000a32 <Attribute_Modified_CB+0x42>
    if(att_data[0] == 0x01)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d102      	bne.n	8000a32 <Attribute_Modified_CB+0x42>
      notification_enabled = TRUE;
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <Attribute_Modified_CB+0x54>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200000c8 	.word	0x200000c8
 8000a40:	200000c6 	.word	0x200000c6
 8000a44:	200000ba 	.word	0x200000ba

08000a48 <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	460b      	mov	r3, r1
 8000a52:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <GAP_ConnectionComplete_CB+0x54>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8000a5a:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <GAP_ConnectionComplete_CB+0x58>)
 8000a5c:	887b      	ldrh	r3, [r7, #2]
 8000a5e:	8013      	strh	r3, [r2, #0]

  printf("Connected to device:");
 8000a60:	4810      	ldr	r0, [pc, #64]	; (8000aa4 <GAP_ConnectionComplete_CB+0x5c>)
 8000a62:	f006 fd35 	bl	80074d0 <iprintf>
  for(int i = 5; i > 0; i--){
 8000a66:	2305      	movs	r3, #5
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	e00a      	b.n	8000a82 <GAP_ConnectionComplete_CB+0x3a>
    printf("%02X-", addr[i]);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <GAP_ConnectionComplete_CB+0x60>)
 8000a78:	f006 fd2a 	bl	80074d0 <iprintf>
  for(int i = 5; i > 0; i--){
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	dcf1      	bgt.n	8000a6c <GAP_ConnectionComplete_CB+0x24>
  }
  printf("%02X\n", addr[0]);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4807      	ldr	r0, [pc, #28]	; (8000aac <GAP_ConnectionComplete_CB+0x64>)
 8000a90:	f006 fd1e 	bl	80074d0 <iprintf>
}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200000b4 	.word	0x200000b4
 8000aa0:	200000b8 	.word	0x200000b8
 8000aa4:	0800843c 	.word	0x0800843c
 8000aa8:	08008454 	.word	0x08008454
 8000aac:	0800845c 	.word	0x0800845c

08000ab0 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  connected = FALSE;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <GAP_DisconnectionComplete_CB+0x38>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]

  printf("Disconnected\n");
 8000aba:	480c      	ldr	r0, [pc, #48]	; (8000aec <GAP_DisconnectionComplete_CB+0x3c>)
 8000abc:	f006 fdc8 	bl	8007650 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <GAP_DisconnectionComplete_CB+0x40>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <GAP_DisconnectionComplete_CB+0x44>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
  start_read_tx_char_handle = FALSE;
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <GAP_DisconnectionComplete_CB+0x48>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
  start_read_rx_char_handle = FALSE;
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <GAP_DisconnectionComplete_CB+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
  end_read_tx_char_handle = FALSE;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <GAP_DisconnectionComplete_CB+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
  end_read_rx_char_handle = FALSE;
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <GAP_DisconnectionComplete_CB+0x54>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200000b4 	.word	0x200000b4
 8000aec:	08008464 	.word	0x08008464
 8000af0:	20000002 	.word	0x20000002
 8000af4:	200000ba 	.word	0x200000ba
 8000af8:	200000bb 	.word	0x200000bb
 8000afc:	200000bc 	.word	0x200000bc
 8000b00:	200000bd 	.word	0x200000bd
 8000b04:	200000be 	.word	0x200000be

08000b08 <GATT_Notification_CB>:
 * @param  attr_len    Length of attribute value in the notification
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	603a      	str	r2, [r7, #0]
 8000b12:	80fb      	strh	r3, [r7, #6]
 8000b14:	460b      	mov	r3, r1
 8000b16:	717b      	strb	r3, [r7, #5]
  if (attr_handle == tx_handle+1) {
 8000b18:	88fa      	ldrh	r2, [r7, #6]
 8000b1a:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <GATT_Notification_CB+0x30>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d104      	bne.n	8000b2e <GATT_Notification_CB+0x26>
    receiveData(attr_value, attr_len);
 8000b24:	797b      	ldrb	r3, [r7, #5]
 8000b26:	4619      	mov	r1, r3
 8000b28:	6838      	ldr	r0, [r7, #0]
 8000b2a:	f7ff fedb 	bl	80008e4 <receiveData>
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000c0 	.word	0x200000c0

08000b3c <user_notify>:
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08c      	sub	sp, #48	; 0x30
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8000b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(hci_pckt->type != HCI_EVENT_PKT)
 8000b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	f040 80e2 	bne.w	8000d1c <user_notify+0x1e0>
    return;

  switch(event_pckt->evt){
 8000b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2bff      	cmp	r3, #255	; 0xff
 8000b5e:	d021      	beq.n	8000ba4 <user_notify+0x68>
 8000b60:	2bff      	cmp	r3, #255	; 0xff
 8000b62:	f300 80e0 	bgt.w	8000d26 <user_notify+0x1ea>
 8000b66:	2b05      	cmp	r3, #5
 8000b68:	d002      	beq.n	8000b70 <user_notify+0x34>
 8000b6a:	2b3e      	cmp	r3, #62	; 0x3e
 8000b6c:	d003      	beq.n	8000b76 <user_notify+0x3a>
 8000b6e:	e0da      	b.n	8000d26 <user_notify+0x1ea>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8000b70:	f7ff ff9e 	bl	8000ab0 <GAP_DisconnectionComplete_CB>
    }
    break;
 8000b74:	e0d7      	b.n	8000d26 <user_notify+0x1ea>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8000b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b78:	3302      	adds	r3, #2
 8000b7a:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	f040 80cd 	bne.w	8000d20 <user_notify+0x1e4>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	1d5a      	adds	r2, r3, #5
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	f7ff ff54 	bl	8000a48 <GAP_ConnectionComplete_CB>
        }
        break;
 8000ba0:	bf00      	nop
      }
    }
    break;
 8000ba2:	e0bd      	b.n	8000d20 <user_notify+0x1e4>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8000ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blue_evt->ecode){
 8000baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 8000bb4:	2b11      	cmp	r3, #17
 8000bb6:	f200 80b5 	bhi.w	8000d24 <user_notify+0x1e8>
 8000bba:	a201      	add	r2, pc, #4	; (adr r2, 8000bc0 <user_notify+0x84>)
 8000bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc0:	08000c09 	.word	0x08000c09
 8000bc4:	08000d25 	.word	0x08000d25
 8000bc8:	08000d25 	.word	0x08000d25
 8000bcc:	08000d25 	.word	0x08000d25
 8000bd0:	08000d25 	.word	0x08000d25
 8000bd4:	08000d25 	.word	0x08000d25
 8000bd8:	08000d25 	.word	0x08000d25
 8000bdc:	08000d25 	.word	0x08000d25
 8000be0:	08000d25 	.word	0x08000d25
 8000be4:	08000d25 	.word	0x08000d25
 8000be8:	08000d25 	.word	0x08000d25
 8000bec:	08000d25 	.word	0x08000d25
 8000bf0:	08000d25 	.word	0x08000d25
 8000bf4:	08000d25 	.word	0x08000d25
 8000bf8:	08000c49 	.word	0x08000c49
 8000bfc:	08000cd5 	.word	0x08000cd5
 8000c00:	08000d25 	.word	0x08000d25
 8000c04:	08000c6b 	.word	0x08000c6b

      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 8000c08:	4b48      	ldr	r3, [pc, #288]	; (8000d2c <user_notify+0x1f0>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d10d      	bne.n	8000c2c <user_notify+0xf0>
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 8000c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c12:	3302      	adds	r3, #2
 8000c14:	617b      	str	r3, [r7, #20]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	885b      	ldrh	r3, [r3, #2]
 8000c1a:	b298      	uxth	r0, r3
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	7919      	ldrb	r1, [r3, #4]
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	3307      	adds	r3, #7
 8000c24:	461a      	mov	r2, r3
 8000c26:	f7ff fee3 	bl	80009f0 <Attribute_Modified_CB>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }

        }
        break;
 8000c2a:	e076      	b.n	8000d1a <user_notify+0x1de>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2e:	3302      	adds	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	885b      	ldrh	r3, [r3, #2]
 8000c36:	b298      	uxth	r0, r3
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	7919      	ldrb	r1, [r3, #4]
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	3305      	adds	r3, #5
 8000c40:	461a      	mov	r2, r3
 8000c42:	f7ff fed5 	bl	80009f0 <Attribute_Modified_CB>
        break;
 8000c46:	e068      	b.n	8000d1a <user_notify+0x1de>
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
 8000c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4a:	3302      	adds	r3, #2
 8000c4c:	61fb      	str	r3, [r7, #28]
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000c54:	b298      	uxth	r0, r3
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	789b      	ldrb	r3, [r3, #2]
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	b2d9      	uxtb	r1, r3
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3305      	adds	r3, #5
 8000c62:	461a      	mov	r2, r3
 8000c64:	f7ff ff50 	bl	8000b08 <GATT_Notification_CB>
        }
        break;
 8000c68:	e057      	b.n	8000d1a <user_notify+0x1de>
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 8000c6a:	4b31      	ldr	r3, [pc, #196]	; (8000d30 <user_notify+0x1f4>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d150      	bne.n	8000d14 <user_notify+0x1d8>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");

          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
 8000c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c74:	3302      	adds	r3, #2
 8000c76:	623b      	str	r3, [r7, #32]

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8000c78:	4b2e      	ldr	r3, [pc, #184]	; (8000d34 <user_notify+0x1f8>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d011      	beq.n	8000ca6 <user_notify+0x16a>
 8000c82:	4b2d      	ldr	r3, [pc, #180]	; (8000d38 <user_notify+0x1fc>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d10c      	bne.n	8000ca6 <user_notify+0x16a>
          {
            tx_handle = resp->attr_handle;
 8000c8c:	6a3b      	ldr	r3, [r7, #32]
 8000c8e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	4b29      	ldr	r3, [pc, #164]	; (8000d3c <user_notify+0x200>)
 8000c96:	801a      	strh	r2, [r3, #0]
            printf("TX Char Handle %04X\n", tx_handle);
 8000c98:	4b28      	ldr	r3, [pc, #160]	; (8000d3c <user_notify+0x200>)
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4828      	ldr	r0, [pc, #160]	; (8000d40 <user_notify+0x204>)
 8000ca0:	f006 fc16 	bl	80074d0 <iprintf>
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
          }
        }
        break;
 8000ca4:	e036      	b.n	8000d14 <user_notify+0x1d8>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8000ca6:	4b27      	ldr	r3, [pc, #156]	; (8000d44 <user_notify+0x208>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d031      	beq.n	8000d14 <user_notify+0x1d8>
 8000cb0:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <user_notify+0x20c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d12c      	bne.n	8000d14 <user_notify+0x1d8>
            rx_handle = resp->attr_handle;
 8000cba:	6a3b      	ldr	r3, [r7, #32]
 8000cbc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <user_notify+0x210>)
 8000cc4:	801a      	strh	r2, [r3, #0]
            printf("RX Char Handle %04X\n", rx_handle);
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <user_notify+0x210>)
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4820      	ldr	r0, [pc, #128]	; (8000d50 <user_notify+0x214>)
 8000cce:	f006 fbff 	bl	80074d0 <iprintf>
        break;
 8000cd2:	e01f      	b.n	8000d14 <user_notify+0x1d8>

      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <user_notify+0x1f4>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d11d      	bne.n	8000d18 <user_notify+0x1dc>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <user_notify+0x1f8>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d008      	beq.n	8000cf8 <user_notify+0x1bc>
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <user_notify+0x1fc>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d103      	bne.n	8000cf8 <user_notify+0x1bc>
          {
            end_read_tx_char_handle = TRUE;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <user_notify+0x1fc>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
          }
        }
        break;
 8000cf6:	e00f      	b.n	8000d18 <user_notify+0x1dc>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <user_notify+0x208>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d00a      	beq.n	8000d18 <user_notify+0x1dc>
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <user_notify+0x20c>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d105      	bne.n	8000d18 <user_notify+0x1dc>
            end_read_rx_char_handle = TRUE;
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <user_notify+0x20c>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
        break;
 8000d12:	e001      	b.n	8000d18 <user_notify+0x1dc>
        break;
 8000d14:	bf00      	nop
 8000d16:	e005      	b.n	8000d24 <user_notify+0x1e8>
        break;
 8000d18:	bf00      	nop
      }
    }
    break;
 8000d1a:	e003      	b.n	8000d24 <user_notify+0x1e8>
    return;
 8000d1c:	bf00      	nop
 8000d1e:	e002      	b.n	8000d26 <user_notify+0x1ea>
    break;
 8000d20:	bf00      	nop
 8000d22:	e000      	b.n	8000d26 <user_notify+0x1ea>
    break;
 8000d24:	bf00      	nop
  }
}
 8000d26:	3730      	adds	r7, #48	; 0x30
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	200000ac 	.word	0x200000ac
 8000d30:	20000001 	.word	0x20000001
 8000d34:	200000bb 	.word	0x200000bb
 8000d38:	200000bd 	.word	0x200000bd
 8000d3c:	200000c0 	.word	0x200000c0
 8000d40:	08008474 	.word	0x08008474
 8000d44:	200000bc 	.word	0x200000bc
 8000d48:	200000be 	.word	0x200000be
 8000d4c:	200000c2 	.word	0x200000c2
 8000d50:	0800848c 	.word	0x0800848c

08000d54 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <HCI_TL_SPI_Init+0x84>)
 8000d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d60:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <HCI_TL_SPI_Init+0x84>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d68:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <HCI_TL_SPI_Init+0x84>)
 8000d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000d74:	2310      	movs	r3, #16
 8000d76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d78:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	4619      	mov	r1, r3
 8000d88:	4814      	ldr	r0, [pc, #80]	; (8000ddc <HCI_TL_SPI_Init+0x88>)
 8000d8a:	f001 fa8f 	bl	80022ac <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000d8e:	2304      	movs	r3, #4
 8000d90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	4619      	mov	r1, r3
 8000da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da8:	f001 fa80 	bl	80022ac <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8000dac:	2310      	movs	r3, #16
 8000dae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc6:	f001 fa71 	bl	80022ac <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 8000dca:	f000 f947 	bl	800105c <BSP_SPI1_Init>
 8000dce:	4603      	mov	r3, r0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3720      	adds	r7, #32
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	48000800 	.word	0x48000800

08000de0 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000de4:	2110      	movs	r1, #16
 8000de6:	4808      	ldr	r0, [pc, #32]	; (8000e08 <HCI_TL_SPI_DeInit+0x28>)
 8000de8:	f001 fbda 	bl	80025a0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000dec:	2110      	movs	r1, #16
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f001 fbd5 	bl	80025a0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8000df6:	2104      	movs	r1, #4
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfc:	f001 fbd0 	bl	80025a0 <HAL_GPIO_DeInit>
  return 0;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	48000800 	.word	0x48000800

08000e0c <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	2110      	movs	r1, #16
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e18:	f001 fcb4 	bl	8002784 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2104      	movs	r1, #4
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e24:	f001 fcae 	bl	8002784 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000e28:	2005      	movs	r0, #5
 8000e2a:	f001 f82d 	bl	8001e88 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2104      	movs	r1, #4
 8000e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e36:	f001 fca5 	bl	8002784 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000e3a:	2005      	movs	r0, #5
 8000e3c:	f001 f824 	bl	8001e88 <HAL_Delay>
  return 0;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8000e58:	23ff      	movs	r3, #255	; 0xff
 8000e5a:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8000e5c:	4a26      	ldr	r2, [pc, #152]	; (8000ef8 <HCI_TL_SPI_Receive+0xb0>)
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e66:	6018      	str	r0, [r3, #0]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2110      	movs	r1, #16
 8000e70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e74:	f001 fc86 	bl	8002784 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000e78:	f107 010c 	add.w	r1, r7, #12
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	2205      	movs	r2, #5
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f91a 	bl	80010bc <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 8000e88:	7b3b      	ldrb	r3, [r7, #12]
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d129      	bne.n	8000ee2 <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8000e8e:	7c3b      	ldrb	r3, [r7, #16]
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	b21a      	sxth	r2, r3
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8000e9e:	8bfb      	ldrh	r3, [r7, #30]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d01e      	beq.n	8000ee2 <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8000ea4:	8bfa      	ldrh	r2, [r7, #30]
 8000ea6:	887b      	ldrh	r3, [r7, #2]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d901      	bls.n	8000eb0 <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 8000eac:	887b      	ldrh	r3, [r7, #2]
 8000eae:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	777b      	strb	r3, [r7, #29]
 8000eb4:	e010      	b.n	8000ed8 <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8000eb6:	f107 011b 	add.w	r1, r7, #27
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 f8fb 	bl	80010bc <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8000ec6:	7f7b      	ldrb	r3, [r7, #29]
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	4413      	add	r3, r2
 8000ecc:	7efa      	ldrb	r2, [r7, #27]
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8000ed2:	7f7b      	ldrb	r3, [r7, #29]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	777b      	strb	r3, [r7, #29]
 8000ed8:	7f7b      	ldrb	r3, [r7, #29]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	8bfa      	ldrh	r2, [r7, #30]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d8e9      	bhi.n	8000eb6 <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2110      	movs	r1, #16
 8000ee6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eea:	f001 fc4b 	bl	8002784 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8000eee:	7f7b      	ldrb	r3, [r7, #29]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3720      	adds	r7, #32
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	080084a4 	.word	0x080084a4

08000efc <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000f08:	4a24      	ldr	r2, [pc, #144]	; (8000f9c <HCI_TL_SPI_Send+0xa0>)
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f12:	6018      	str	r0, [r3, #0]
 8000f14:	3304      	adds	r3, #4
 8000f16:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f000 ffaa 	bl	8001e70 <HAL_GetTick>
 8000f1c:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2110      	movs	r1, #16
 8000f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2a:	f001 fc2b 	bl	8002784 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000f2e:	f107 0108 	add.w	r1, r7, #8
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	2205      	movs	r2, #5
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 f8bf 	bl	80010bc <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 8000f3e:	7a3b      	ldrb	r3, [r7, #8]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d10f      	bne.n	8000f64 <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8000f44:	7a7b      	ldrb	r3, [r7, #9]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	887a      	ldrh	r2, [r7, #2]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d806      	bhi.n	8000f5c <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8000f4e:	887b      	ldrh	r3, [r7, #2]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4913      	ldr	r1, [pc, #76]	; (8000fa0 <HCI_TL_SPI_Send+0xa4>)
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 f8b1 	bl	80010bc <BSP_SPI1_SendRecv>
 8000f5a:	e006      	b.n	8000f6a <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8000f5c:	f06f 0301 	mvn.w	r3, #1
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	e002      	b.n	8000f6a <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f68:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f72:	f001 fc07 	bl	8002784 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8000f76:	f000 ff7b 	bl	8001e70 <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	d903      	bls.n	8000f8c <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8000f84:	f06f 0302 	mvn.w	r3, #2
 8000f88:	61fb      	str	r3, [r7, #28]
      break;
 8000f8a:	e002      	b.n	8000f92 <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	dbc5      	blt.n	8000f1e <HCI_TL_SPI_Send+0x22>

  return result;
 8000f92:	69fb      	ldr	r3, [r7, #28]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3720      	adds	r7, #32
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	080084ac 	.word	0x080084ac
 8000fa0:	200000d4 	.word	0x200000d4

08000fa4 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000fa8:	2110      	movs	r1, #16
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <IsDataAvailable+0x1c>)
 8000fac:	f001 fbd2 	bl	8002754 <HAL_GPIO_ReadPin>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	bf0c      	ite	eq
 8000fb6:	2301      	moveq	r3, #1
 8000fb8:	2300      	movne	r3, #0
 8000fba:	b2db      	uxtb	r3, r3
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	48000800 	.word	0x48000800

08000fc4 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8000fca:	4b12      	ldr	r3, [pc, #72]	; (8001014 <hci_tl_lowlevel_init+0x50>)
 8000fcc:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <hci_tl_lowlevel_init+0x54>)
 8000fd0:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <hci_tl_lowlevel_init+0x58>)
 8000fd4:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <hci_tl_lowlevel_init+0x5c>)
 8000fd8:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <hci_tl_lowlevel_init+0x60>)
 8000fdc:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <hci_tl_lowlevel_init+0x64>)
 8000fe0:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f005 fcfd 	bl	80069e4 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti4, EXTI_LINE_4);
 8000fea:	4910      	ldr	r1, [pc, #64]	; (800102c <hci_tl_lowlevel_init+0x68>)
 8000fec:	4810      	ldr	r0, [pc, #64]	; (8001030 <hci_tl_lowlevel_init+0x6c>)
 8000fee:	f001 f919 	bl	8002224 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti4, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000ff2:	4a10      	ldr	r2, [pc, #64]	; (8001034 <hci_tl_lowlevel_init+0x70>)
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	480e      	ldr	r0, [pc, #56]	; (8001030 <hci_tl_lowlevel_init+0x6c>)
 8000ff8:	f001 f8fa 	bl	80021f0 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2100      	movs	r1, #0
 8001000:	200a      	movs	r0, #10
 8001002:	f001 f840 	bl	8002086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001006:	200a      	movs	r0, #10
 8001008:	f001 f859 	bl	80020be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 800100c:	bf00      	nop
 800100e:	3720      	adds	r7, #32
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	08000d55 	.word	0x08000d55
 8001018:	08000de1 	.word	0x08000de1
 800101c:	08000efd 	.word	0x08000efd
 8001020:	08000e49 	.word	0x08000e49
 8001024:	08000e0d 	.word	0x08000e0d
 8001028:	080010fd 	.word	0x080010fd
 800102c:	16000004 	.word	0x16000004
 8001030:	200000cc 	.word	0x200000cc
 8001034:	08001039 	.word	0x08001039

08001038 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 800103c:	e005      	b.n	800104a <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 800103e:	2000      	movs	r0, #0
 8001040:	f005 fe34 	bl	8006cac <hci_notify_asynch_evt>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d105      	bne.n	8001056 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 800104a:	f7ff ffab 	bl	8000fa4 <IsDataAvailable>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1f4      	bne.n	800103e <hci_tl_lowlevel_isr+0x6>
 8001054:	e000      	b.n	8001058 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8001056:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8001066:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <BSP_SPI1_Init+0x54>)
 8001068:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <BSP_SPI1_Init+0x58>)
 800106a:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <BSP_SPI1_Init+0x5c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	1c5a      	adds	r2, r3, #1
 8001072:	4911      	ldr	r1, [pc, #68]	; (80010b8 <BSP_SPI1_Init+0x5c>)
 8001074:	600a      	str	r2, [r1, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d114      	bne.n	80010a4 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 800107a:	480d      	ldr	r0, [pc, #52]	; (80010b0 <BSP_SPI1_Init+0x54>)
 800107c:	f003 f83e 	bl	80040fc <HAL_SPI_GetState>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10e      	bne.n	80010a4 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8001086:	480a      	ldr	r0, [pc, #40]	; (80010b0 <BSP_SPI1_Init+0x54>)
 8001088:	f000 f882 	bl	8001190 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d108      	bne.n	80010a4 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8001092:	4807      	ldr	r0, [pc, #28]	; (80010b0 <BSP_SPI1_Init+0x54>)
 8001094:	f000 f83a 	bl	800110c <MX_SPI1_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 800109e:	f06f 0307 	mvn.w	r3, #7
 80010a2:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 80010a4:	687b      	ldr	r3, [r7, #4]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200001d4 	.word	0x200001d4
 80010b4:	40013000 	.word	0x40013000
 80010b8:	20000238 	.word	0x20000238

080010bc <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af02      	add	r7, sp, #8
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	4613      	mov	r3, r2
 80010c8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010d4:	9200      	str	r2, [sp, #0]
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	68f9      	ldr	r1, [r7, #12]
 80010da:	4807      	ldr	r0, [pc, #28]	; (80010f8 <BSP_SPI1_SendRecv+0x3c>)
 80010dc:	f002 fdfb 	bl	8003cd6 <HAL_SPI_TransmitReceive>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80010e6:	f06f 0305 	mvn.w	r3, #5
 80010ea:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80010ec:	697b      	ldr	r3, [r7, #20]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200001d4 	.word	0x200001d4

080010fc <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001100:	f000 feb6 	bl	8001e70 <HAL_GetTick>
 8001104:	4603      	mov	r3, r0
}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001114:	2300      	movs	r3, #0
 8001116:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a1c      	ldr	r2, [pc, #112]	; (800118c <MX_SPI1_Init+0x80>)
 800111c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001124:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001132:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001146:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2210      	movs	r2, #16
 800114c:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2207      	movs	r2, #7
 8001164:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2208      	movs	r2, #8
 8001170:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f002 fd02 	bl	8003b7c <HAL_SPI_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001182:	7bfb      	ldrb	r3, [r7, #15]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40013000 	.word	0x40013000

08001190 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001198:	4b27      	ldr	r3, [pc, #156]	; (8001238 <SPI1_MspInit+0xa8>)
 800119a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119c:	4a26      	ldr	r2, [pc, #152]	; (8001238 <SPI1_MspInit+0xa8>)
 800119e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011a2:	6613      	str	r3, [r2, #96]	; 0x60
 80011a4:	4b24      	ldr	r3, [pc, #144]	; (8001238 <SPI1_MspInit+0xa8>)
 80011a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	4b21      	ldr	r3, [pc, #132]	; (8001238 <SPI1_MspInit+0xa8>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	4a20      	ldr	r2, [pc, #128]	; (8001238 <SPI1_MspInit+0xa8>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011bc:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <SPI1_MspInit+0xa8>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80011c8:	2320      	movs	r3, #32
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80011d8:	2305      	movs	r3, #5
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e6:	f001 f861 	bl	80022ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80011ea:	2340      	movs	r3, #64	; 0x40
 80011ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 80011fa:	2305      	movs	r3, #5
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001208:	f001 f850 	bl	80022ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 800121c:	2305      	movs	r3, #5
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122a:	f001 f83f 	bl	80022ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	; 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000

0800123c <spiDataReadyCallback>:
uint32_t triggers[8] = {0};
uint32_t spikes[8] = {0};

//int flag = 0;
int callbacks = 0;
void spiDataReadyCallback(){
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	//trigger();
	callbacks += 1;
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <spiDataReadyCallback+0x1c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	4a04      	ldr	r2, [pc, #16]	; (8001258 <spiDataReadyCallback+0x1c>)
 8001248:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(&huart1, data, 16);
 800124a:	2210      	movs	r2, #16
 800124c:	4903      	ldr	r1, [pc, #12]	; (800125c <spiDataReadyCallback+0x20>)
 800124e:	4804      	ldr	r0, [pc, #16]	; (8001260 <spiDataReadyCallback+0x24>)
 8001250:	f003 f9a8 	bl	80045a4 <HAL_UART_Receive_IT>
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000314 	.word	0x20000314
 800125c:	200002c4 	.word	0x200002c4
 8001260:	2000023c 	.word	0x2000023c

08001264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001268:	f000 fd9a 	bl	8001da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800126c:	f000 f809 	bl	8001282 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001270:	f000 f87e 	bl	8001370 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001274:	f000 f84c 	bl	8001310 <MX_USART1_UART_Init>
  MX_BlueNRG_MS_Init();
 8001278:	f7ff f84e 	bl	8000318 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 800127c:	f7ff f956 	bl	800052c <MX_BlueNRG_MS_Process>
 8001280:	e7fc      	b.n	800127c <main+0x18>

08001282 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b096      	sub	sp, #88	; 0x58
 8001286:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2244      	movs	r2, #68	; 0x44
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f006 f835 	bl	8007300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001296:	463b      	mov	r3, r7
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012a8:	f001 fad0 	bl	800284c <HAL_PWREx_ControlVoltageScaling>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012b2:	f000 f97d 	bl	80015b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80012b6:	2310      	movs	r3, #16
 80012b8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012ba:	2301      	movs	r3, #1
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80012c2:	23a0      	movs	r3, #160	; 0xa0
 80012c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4618      	mov	r0, r3
 80012d0:	f001 fb12 	bl	80028f8 <HAL_RCC_OscConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80012da:	f000 f969 	bl	80015b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012de:	230f      	movs	r3, #15
 80012e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012f2:	463b      	mov	r3, r7
 80012f4:	2101      	movs	r1, #1
 80012f6:	4618      	mov	r0, r3
 80012f8:	f001 ff12 	bl	8003120 <HAL_RCC_ClockConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001302:	f000 f955 	bl	80015b0 <Error_Handler>
  }
}
 8001306:	bf00      	nop
 8001308:	3758      	adds	r7, #88	; 0x58
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <MX_USART1_UART_Init+0x58>)
 8001316:	4a15      	ldr	r2, [pc, #84]	; (800136c <MX_USART1_UART_Init+0x5c>)
 8001318:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <MX_USART1_UART_Init+0x58>)
 800131c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001320:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_USART1_UART_Init+0x58>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_USART1_UART_Init+0x58>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_USART1_UART_Init+0x58>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <MX_USART1_UART_Init+0x58>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <MX_USART1_UART_Init+0x58>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <MX_USART1_UART_Init+0x58>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <MX_USART1_UART_Init+0x58>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MX_USART1_UART_Init+0x58>)
 800134e:	2200      	movs	r2, #0
 8001350:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_USART1_UART_Init+0x58>)
 8001354:	f003 f844 	bl	80043e0 <HAL_UART_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800135e:	f000 f927 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	2000023c 	.word	0x2000023c
 800136c:	40013800 	.word	0x40013800

08001370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001376:	f107 030c 	add.w	r3, r7, #12
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b38      	ldr	r3, [pc, #224]	; (8001468 <MX_GPIO_Init+0xf8>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4a37      	ldr	r2, [pc, #220]	; (8001468 <MX_GPIO_Init+0xf8>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4b35      	ldr	r3, [pc, #212]	; (8001468 <MX_GPIO_Init+0xf8>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	4b32      	ldr	r3, [pc, #200]	; (8001468 <MX_GPIO_Init+0xf8>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4a31      	ldr	r2, [pc, #196]	; (8001468 <MX_GPIO_Init+0xf8>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <MX_GPIO_Init+0xf8>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	4b2c      	ldr	r3, [pc, #176]	; (8001468 <MX_GPIO_Init+0xf8>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	4a2b      	ldr	r2, [pc, #172]	; (8001468 <MX_GPIO_Init+0xf8>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c2:	4b29      	ldr	r3, [pc, #164]	; (8001468 <MX_GPIO_Init+0xf8>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2114      	movs	r1, #20
 80013d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d6:	f001 f9d5 	bl	8002784 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80013da:	2314      	movs	r3, #20
 80013dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 030c 	add.w	r3, r7, #12
 80013ee:	4619      	mov	r1, r3
 80013f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f4:	f000 ff5a 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013f8:	2310      	movs	r3, #16
 80013fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	4619      	mov	r1, r3
 800140c:	4817      	ldr	r0, [pc, #92]	; (800146c <MX_GPIO_Init+0xfc>)
 800140e:	f000 ff4d 	bl	80022ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001412:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001416:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001418:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800141c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	4619      	mov	r1, r3
 8001428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142c:	f000 ff3e 	bl	80022ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	200a      	movs	r0, #10
 8001436:	f000 fe26 	bl	8002086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800143a:	200a      	movs	r0, #10
 800143c:	f000 fe3f 	bl	80020be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2100      	movs	r1, #0
 8001444:	2017      	movs	r0, #23
 8001446:	f000 fe1e 	bl	8002086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800144a:	2017      	movs	r0, #23
 800144c:	f000 fe37 	bl	80020be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	2100      	movs	r1, #0
 8001454:	2028      	movs	r0, #40	; 0x28
 8001456:	f000 fe16 	bl	8002086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800145a:	2028      	movs	r0, #40	; 0x28
 800145c:	f000 fe2f 	bl	80020be <HAL_NVIC_EnableIRQ>

}
 8001460:	bf00      	nop
 8001462:	3720      	adds	r7, #32
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40021000 	.word	0x40021000
 800146c:	48000800 	.word	0x48000800

08001470 <classify>:

/* USER CODE BEGIN 4 */
void classify(){
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	71fb      	strb	r3, [r7, #7]
	while(i<8){
 800147a:	e010      	b.n	800149e <classify+0x2e>
		if(spikes[i]>max_spike_amount){
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	4a0c      	ldr	r2, [pc, #48]	; (80014b0 <classify+0x40>)
 8001480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001484:	2201      	movs	r2, #1
 8001486:	4293      	cmp	r3, r2
 8001488:	d901      	bls.n	800148e <classify+0x1e>
			trigger();
 800148a:	f7fe ff31 	bl	80002f0 <trigger>
		}
		spikes[i]=0;
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <classify+0x40>)
 8001492:	2100      	movs	r1, #0
 8001494:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		i+=1;
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	3301      	adds	r3, #1
 800149c:	71fb      	strb	r3, [r7, #7]
	while(i<8){
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b07      	cmp	r3, #7
 80014a2:	d9eb      	bls.n	800147c <classify+0xc>
	}


}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200002f4 	.word	0x200002f4

080014b4 <dataHandler>:
void dataHandler(){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	71fb      	strb	r3, [r7, #7]
	uint8_t j = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	71bb      	strb	r3, [r7, #6]
	int16_t sample = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	80bb      	strh	r3, [r7, #4]
	while(i<8){
 80014c6:	e03f      	b.n	8001548 <dataHandler+0x94>
		sample = data[i][0]<<8 | data[i][1]; //merge 2 bytes into 16 bit sample
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	4a2c      	ldr	r2, [pc, #176]	; (800157c <dataHandler+0xc8>)
 80014cc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80014d0:	021b      	lsls	r3, r3, #8
 80014d2:	b21a      	sxth	r2, r3
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	4929      	ldr	r1, [pc, #164]	; (800157c <dataHandler+0xc8>)
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	440b      	add	r3, r1
 80014dc:	785b      	ldrb	r3, [r3, #1]
 80014de:	b21b      	sxth	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	80bb      	strh	r3, [r7, #4]
		if(sample>spike_threshold_adc_val){
 80014e4:	4b26      	ldr	r3, [pc, #152]	; (8001580 <dataHandler+0xcc>)
 80014e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	dd09      	ble.n	8001506 <dataHandler+0x52>
			triggers[i] += 1;
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	4a23      	ldr	r2, [pc, #140]	; (8001584 <dataHandler+0xd0>)
 80014f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	3201      	adds	r2, #1
 80014fe:	4921      	ldr	r1, [pc, #132]	; (8001584 <dataHandler+0xd0>)
 8001500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001504:	e01d      	b.n	8001542 <dataHandler+0x8e>
		}
		else{
			if(triggers[i]<upper_bound_samples && triggers[i]>lower_bound_samples){
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	4a1e      	ldr	r2, [pc, #120]	; (8001584 <dataHandler+0xd0>)
 800150a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150e:	4a1e      	ldr	r2, [pc, #120]	; (8001588 <dataHandler+0xd4>)
 8001510:	8812      	ldrh	r2, [r2, #0]
 8001512:	4293      	cmp	r3, r2
 8001514:	d210      	bcs.n	8001538 <dataHandler+0x84>
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	4a1a      	ldr	r2, [pc, #104]	; (8001584 <dataHandler+0xd0>)
 800151a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151e:	4a1b      	ldr	r2, [pc, #108]	; (800158c <dataHandler+0xd8>)
 8001520:	8812      	ldrh	r2, [r2, #0]
 8001522:	4293      	cmp	r3, r2
 8001524:	d908      	bls.n	8001538 <dataHandler+0x84>
				spikes[i] += 1;
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	4a19      	ldr	r2, [pc, #100]	; (8001590 <dataHandler+0xdc>)
 800152a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	3201      	adds	r2, #1
 8001532:	4917      	ldr	r1, [pc, #92]	; (8001590 <dataHandler+0xdc>)
 8001534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}
			triggers[i] = 0;
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	4a12      	ldr	r2, [pc, #72]	; (8001584 <dataHandler+0xd0>)
 800153c:	2100      	movs	r1, #0
 800153e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		i+=1;
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	3301      	adds	r3, #1
 8001546:	71fb      	strb	r3, [r7, #7]
	while(i<8){
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	2b07      	cmp	r3, #7
 800154c:	d9bc      	bls.n	80014c8 <dataHandler+0x14>
	}
	if(current_window_sample_amount<window_length_samples){
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <dataHandler+0xe0>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	4b10      	ldr	r3, [pc, #64]	; (8001598 <dataHandler+0xe4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d905      	bls.n	8001568 <dataHandler+0xb4>
		current_window_sample_amount += 1;
 800155c:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <dataHandler+0xe4>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <dataHandler+0xe4>)
 8001564:	6013      	str	r3, [r2, #0]
	}
	else{
		classify();
		current_window_sample_amount = 0;
	}
}
 8001566:	e004      	b.n	8001572 <dataHandler+0xbe>
		classify();
 8001568:	f7ff ff82 	bl	8001470 <classify>
		current_window_sample_amount = 0;
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <dataHandler+0xe4>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200002c4 	.word	0x200002c4
 8001580:	20000008 	.word	0x20000008
 8001584:	200002d4 	.word	0x200002d4
 8001588:	20000006 	.word	0x20000006
 800158c:	20000004 	.word	0x20000004
 8001590:	200002f4 	.word	0x200002f4
 8001594:	2000000a 	.word	0x2000000a
 8001598:	200002c0 	.word	0x200002c0

0800159c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file
   */
  //flag+=1;
  dataHandler();
 80015a4:	f7ff ff86 	bl	80014b4 <dataHandler>
    //HAL_UART_Transmit(&huart1, (uint8_t *)aRxBuffer, 10,0xFFFF);
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b4:	b672      	cpsid	i
}
 80015b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <Error_Handler+0x8>
	...

080015bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <HAL_MspInit+0x44>)
 80015c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c6:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <HAL_MspInit+0x44>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6613      	str	r3, [r2, #96]	; 0x60
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_MspInit+0x44>)
 80015d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_MspInit+0x44>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	4a08      	ldr	r2, [pc, #32]	; (8001600 <HAL_MspInit+0x44>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e4:	6593      	str	r3, [r2, #88]	; 0x58
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_MspInit+0x44>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000

08001604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b0a0      	sub	sp, #128	; 0x80
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800161c:	f107 0310 	add.w	r3, r7, #16
 8001620:	225c      	movs	r2, #92	; 0x5c
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f005 fe6b 	bl	8007300 <memset>
  if(huart->Instance==USART1)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a23      	ldr	r2, [pc, #140]	; (80016bc <HAL_UART_MspInit+0xb8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d13f      	bne.n	80016b4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001634:	2301      	movs	r3, #1
 8001636:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001638:	2300      	movs	r3, #0
 800163a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	4618      	mov	r0, r3
 8001642:	f001 ff91 	bl	8003568 <HAL_RCCEx_PeriphCLKConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800164c:	f7ff ffb0 	bl	80015b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <HAL_UART_MspInit+0xbc>)
 8001652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001654:	4a1a      	ldr	r2, [pc, #104]	; (80016c0 <HAL_UART_MspInit+0xbc>)
 8001656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165a:	6613      	str	r3, [r2, #96]	; 0x60
 800165c:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <HAL_UART_MspInit+0xbc>)
 800165e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_UART_MspInit+0xbc>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166c:	4a14      	ldr	r2, [pc, #80]	; (80016c0 <HAL_UART_MspInit+0xbc>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_UART_MspInit+0xbc>)
 8001676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001680:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001684:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001692:	2307      	movs	r3, #7
 8001694:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001696:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800169a:	4619      	mov	r1, r3
 800169c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a0:	f000 fe04 	bl	80022ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	2025      	movs	r0, #37	; 0x25
 80016aa:	f000 fcec 	bl	8002086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016ae:	2025      	movs	r0, #37	; 0x25
 80016b0:	f000 fd05 	bl	80020be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016b4:	bf00      	nop
 80016b6:	3780      	adds	r7, #128	; 0x80
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40013800 	.word	0x40013800
 80016c0:	40021000 	.word	0x40021000

080016c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <NMI_Handler+0x4>

080016ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ce:	e7fe      	b.n	80016ce <HardFault_Handler+0x4>

080016d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <MemManage_Handler+0x4>

080016d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <BusFault_Handler+0x4>

080016dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <UsageFault_Handler+0x4>

080016e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001710:	f000 fb9a 	bl	8001e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}

08001718 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <EXTI4_IRQHandler+0x10>)
 800171e:	f000 fd95 	bl	800224c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200000cc 	.word	0x200000cc

0800172c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_9);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <EXTI9_5_IRQHandler+0x10>)
 8001732:	f000 fd8b 	bl	800224c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000018 	.word	0x20000018

08001740 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <USART1_IRQHandler+0x10>)
 8001746:	f002 ff83 	bl	8004650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000023c 	.word	0x2000023c

08001754 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  spiDataReadyCallback();
 8001758:	f7ff fd70 	bl	800123c <spiDataReadyCallback>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800175c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001760:	f001 f842 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	e00a      	b.n	8001790 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800177a:	f3af 8000 	nop.w
 800177e:	4601      	mov	r1, r0
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	60ba      	str	r2, [r7, #8]
 8001786:	b2ca      	uxtb	r2, r1
 8001788:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3301      	adds	r3, #1
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	429a      	cmp	r2, r3
 8001796:	dbf0      	blt.n	800177a <_read+0x12>
	}

return len;
 8001798:	687b      	ldr	r3, [r7, #4]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b086      	sub	sp, #24
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	e009      	b.n	80017c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	60ba      	str	r2, [r7, #8]
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 fa6b 	bl	8001c98 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3301      	adds	r3, #1
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	dbf1      	blt.n	80017b4 <_write+0x12>
	}
	return len;
 80017d0:	687b      	ldr	r3, [r7, #4]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <_close>:

int _close(int file)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
	return -1;
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001802:	605a      	str	r2, [r3, #4]
	return 0;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <_isatty>:

int _isatty(int file)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
	return 1;
 800181a:	2301      	movs	r3, #1
}
 800181c:	4618      	mov	r0, r3
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
	return 0;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800184c:	4a14      	ldr	r2, [pc, #80]	; (80018a0 <_sbrk+0x5c>)
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <_sbrk+0x60>)
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <_sbrk+0x64>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <_sbrk+0x64>)
 8001862:	4a12      	ldr	r2, [pc, #72]	; (80018ac <_sbrk+0x68>)
 8001864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	429a      	cmp	r2, r3
 8001872:	d207      	bcs.n	8001884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001874:	f005 fb7e 	bl	8006f74 <__errno>
 8001878:	4603      	mov	r3, r0
 800187a:	220c      	movs	r2, #12
 800187c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001882:	e009      	b.n	8001898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <_sbrk+0x64>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <_sbrk+0x64>)
 8001894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20010000 	.word	0x20010000
 80018a4:	00000400 	.word	0x00000400
 80018a8:	20000318 	.word	0x20000318
 80018ac:	200006a0 	.word	0x200006a0

080018b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <SystemInit+0x20>)
 80018b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <SystemInit+0x20>)
 80018bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800190c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018d8:	f7ff ffea 	bl	80018b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018dc:	480c      	ldr	r0, [pc, #48]	; (8001910 <LoopForever+0x6>)
  ldr r1, =_edata
 80018de:	490d      	ldr	r1, [pc, #52]	; (8001914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018e0:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <LoopForever+0xe>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e4:	e002      	b.n	80018ec <LoopCopyDataInit>

080018e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ea:	3304      	adds	r3, #4

080018ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f0:	d3f9      	bcc.n	80018e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <LoopForever+0x12>)
  ldr r4, =_ebss
 80018f4:	4c0a      	ldr	r4, [pc, #40]	; (8001920 <LoopForever+0x16>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f8:	e001      	b.n	80018fe <LoopFillZerobss>

080018fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018fc:	3204      	adds	r2, #4

080018fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001900:	d3fb      	bcc.n	80018fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001902:	f005 fccb 	bl	800729c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001906:	f7ff fcad 	bl	8001264 <main>

0800190a <LoopForever>:

LoopForever:
    b LoopForever
 800190a:	e7fe      	b.n	800190a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800190c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001914:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001918:	080085b8 	.word	0x080085b8
  ldr r2, =_sbss
 800191c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001920:	200006a0 	.word	0x200006a0

08001924 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001924:	e7fe      	b.n	8001924 <ADC1_IRQHandler>
	...

08001928 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <BSP_LED_Init+0x20>)
 8001936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193a:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	080084fc 	.word	0x080084fc

0800194c <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	4a06      	ldr	r2, [pc, #24]	; (8001974 <BSP_LED_On+0x28>)
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001962:	2201      	movs	r2, #1
 8001964:	4618      	mov	r0, r3
 8001966:	f000 ff0d 	bl	8002784 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000010 	.word	0x20000010

08001978 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <BSP_LED_Off+0x28>)
 8001986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800198e:	2200      	movs	r2, #0
 8001990:	4618      	mov	r0, r3
 8001992:	f000 fef7 	bl	8002784 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000010 	.word	0x20000010

080019a4 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	4a06      	ldr	r2, [pc, #24]	; (80019cc <BSP_LED_Toggle+0x28>)
 80019b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 fef9 	bl	80027b4 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000010 	.word	0x20000010

080019d0 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <LED_USER_GPIO_Init+0x78>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <LED_USER_GPIO_Init+0x78>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <LED_USER_GPIO_Init+0x78>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
 80019fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <LED_USER_GPIO_Init+0x78>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a02:	4a11      	ldr	r2, [pc, #68]	; (8001a48 <LED_USER_GPIO_Init+0x78>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <LED_USER_GPIO_Init+0x78>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a1c:	480b      	ldr	r0, [pc, #44]	; (8001a4c <LED_USER_GPIO_Init+0x7c>)
 8001a1e:	f000 feb1 	bl	8002784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8001a22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4804      	ldr	r0, [pc, #16]	; (8001a4c <LED_USER_GPIO_Init+0x7c>)
 8001a3c:	f000 fc36 	bl	80022ac <HAL_GPIO_Init>

}
 8001a40:	bf00      	nop
 8001a42:	3720      	adds	r7, #32
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	48000800 	.word	0x48000800

08001a50 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	460a      	mov	r2, r1
 8001a5a:	71fb      	strb	r3, [r7, #7]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	4a1f      	ldr	r2, [pc, #124]	; (8001ae4 <BSP_PB_Init+0x94>)
 8001a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6c:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8001a6e:	79bb      	ldrb	r3, [r7, #6]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d132      	bne.n	8001ada <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	4a1b      	ldr	r2, [pc, #108]	; (8001ae8 <BSP_PB_Init+0x98>)
 8001a7a:	441a      	add	r2, r3
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	491b      	ldr	r1, [pc, #108]	; (8001aec <BSP_PB_Init+0x9c>)
 8001a80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a84:	4619      	mov	r1, r3
 8001a86:	4610      	mov	r0, r2
 8001a88:	f000 fbcc 	bl	8002224 <HAL_EXTI_GetHandle>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001a92:	f06f 0303 	mvn.w	r3, #3
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	e01f      	b.n	8001ada <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <BSP_PB_Init+0x98>)
 8001aa0:	1898      	adds	r0, r3, r2
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <BSP_PB_Init+0xa0>)
 8001aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	2100      	movs	r1, #0
 8001aae:	f000 fb9f 	bl	80021f0 <HAL_EXTI_RegisterCallback>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001ab8:	f06f 0303 	mvn.w	r3, #3
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	e00c      	b.n	8001ada <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001ac0:	2017      	movs	r0, #23
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <BSP_PB_Init+0xa4>)
 8001ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aca:	2200      	movs	r2, #0
 8001acc:	4619      	mov	r1, r3
 8001ace:	f000 fada 	bl	8002086 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001ad2:	2317      	movs	r3, #23
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 faf2 	bl	80020be <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8001ada:	68fb      	ldr	r3, [r7, #12]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	08008500 	.word	0x08008500
 8001ae8:	20000018 	.word	0x20000018
 8001aec:	08008504 	.word	0x08008504
 8001af0:	08008508 	.word	0x08008508
 8001af4:	0800850c 	.word	0x0800850c

08001af8 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	4a09      	ldr	r2, [pc, #36]	; (8001b2c <BSP_PB_GetState+0x34>)
 8001b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 fe1f 	bl	8002754 <HAL_GPIO_ReadPin>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf0c      	ite	eq
 8001b1c:	2301      	moveq	r3, #1
 8001b1e:	2300      	movne	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000014 	.word	0x20000014

08001b30 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001b34:	2000      	movs	r0, #0
 8001b36:	f7fe fd9d 	bl	8000674 <BSP_PB_Callback>
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b46:	4b19      	ldr	r3, [pc, #100]	; (8001bac <BUTTON_USER_GPIO_Init+0x6c>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	4a18      	ldr	r2, [pc, #96]	; (8001bac <BUTTON_USER_GPIO_Init+0x6c>)
 8001b4c:	f043 0304 	orr.w	r3, r3, #4
 8001b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b52:	4b16      	ldr	r3, [pc, #88]	; (8001bac <BUTTON_USER_GPIO_Init+0x6c>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
 8001b6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6e:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <BUTTON_USER_GPIO_Init+0x6c>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b72:	4a0e      	ldr	r2, [pc, #56]	; (8001bac <BUTTON_USER_GPIO_Init+0x6c>)
 8001b74:	f043 0304 	orr.w	r3, r3, #4
 8001b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <BUTTON_USER_GPIO_Init+0x6c>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8001b86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b8c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b92:	2301      	movs	r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4804      	ldr	r0, [pc, #16]	; (8001bb0 <BUTTON_USER_GPIO_Init+0x70>)
 8001b9e:	f000 fb85 	bl	80022ac <HAL_GPIO_Init>

}
 8001ba2:	bf00      	nop
 8001ba4:	3720      	adds	r7, #32
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	48000800 	.word	0x48000800

08001bb4 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d903      	bls.n	8001bd0 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001bc8:	f06f 0301 	mvn.w	r3, #1
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	e025      	b.n	8001c1c <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	79fa      	ldrb	r2, [r7, #7]
 8001bd4:	4914      	ldr	r1, [pc, #80]	; (8001c28 <BSP_COM_Init+0x74>)
 8001bd6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001bda:	4814      	ldr	r0, [pc, #80]	; (8001c2c <BSP_COM_Init+0x78>)
 8001bdc:	4613      	mov	r3, r2
 8001bde:	015b      	lsls	r3, r3, #5
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4403      	add	r3, r0
 8001be6:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART3_MspInit(&hcom_uart[COM]);
 8001be8:	79fa      	ldrb	r2, [r7, #7]
 8001bea:	4613      	mov	r3, r2
 8001bec:	015b      	lsls	r3, r3, #5
 8001bee:	4413      	add	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4a0e      	ldr	r2, [pc, #56]	; (8001c2c <BSP_COM_Init+0x78>)
 8001bf4:	4413      	add	r3, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f86a 	bl	8001cd0 <USART3_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART3_UART_Init(&hcom_uart[COM]))
 8001bfc:	79fa      	ldrb	r2, [r7, #7]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	015b      	lsls	r3, r3, #5
 8001c02:	4413      	add	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4a09      	ldr	r2, [pc, #36]	; (8001c2c <BSP_COM_Init+0x78>)
 8001c08:	4413      	add	r3, r2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f810 	bl	8001c30 <MX_USART3_UART_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001c16:	f06f 0303 	mvn.w	r3, #3
 8001c1a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000020 	.word	0x20000020
 8001c2c:	2000031c 	.word	0x2000031c

08001c30 <MX_USART3_UART_Init>:
 */

/* USART3 init function */

__weak HAL_StatusTypeDef MX_USART3_UART_Init(UART_HandleTypeDef* huart)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART3;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a15      	ldr	r2, [pc, #84]	; (8001c94 <MX_USART3_UART_Init+0x64>)
 8001c40:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c48:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	220c      	movs	r2, #12
 8001c60:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f002 fbb0 	bl	80043e0 <HAL_UART_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_USART3_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40004800 	.word	0x40004800

08001c98 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <__io_putchar+0x30>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	015b      	lsls	r3, r3, #5
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4a07      	ldr	r2, [pc, #28]	; (8001ccc <__io_putchar+0x34>)
 8001cb0:	1898      	adds	r0, r3, r2
 8001cb2:	1d39      	adds	r1, r7, #4
 8001cb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f002 fbdf 	bl	800447c <HAL_UART_Transmit>
  return ch;
 8001cbe:	687b      	ldr	r3, [r7, #4]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	200003a0 	.word	0x200003a0
 8001ccc:	2000031c 	.word	0x2000031c

08001cd0 <USART3_MspInit>:
 * @param  huart USART3 handle
 * @retval None
 */

static void USART3_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b0a2      	sub	sp, #136	; 0x88
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cd8:	f107 0318 	add.w	r3, r7, #24
 8001cdc:	225c      	movs	r2, #92	; 0x5c
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f005 fb0d 	bl	8007300 <memset>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001cea:	2300      	movs	r3, #0
 8001cec:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001cee:	f107 0318 	add.w	r3, r7, #24
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f001 fc38 	bl	8003568 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cf8:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <USART3_MspInit+0xc4>)
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfc:	4a25      	ldr	r2, [pc, #148]	; (8001d94 <USART3_MspInit+0xc4>)
 8001cfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d02:	6593      	str	r3, [r2, #88]	; 0x58
 8001d04:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <USART3_MspInit+0xc4>)
 8001d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d10:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <USART3_MspInit+0xc4>)
 8001d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d14:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <USART3_MspInit+0xc4>)
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <USART3_MspInit+0xc4>)
 8001d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d28:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <USART3_MspInit+0xc4>)
 8001d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2c:	4a19      	ldr	r2, [pc, #100]	; (8001d94 <USART3_MspInit+0xc4>)
 8001d2e:	f043 0302 	orr.w	r3, r3, #2
 8001d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d34:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <USART3_MspInit+0xc4>)
 8001d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = BUS_USART3_RX_GPIO_PIN;
 8001d40:	2320      	movs	r3, #32
 8001d42:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = BUS_USART3_RX_GPIO_AF;
 8001d52:	2307      	movs	r3, #7
 8001d54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(BUS_USART3_RX_GPIO_PORT, &GPIO_InitStruct);
 8001d58:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	480e      	ldr	r0, [pc, #56]	; (8001d98 <USART3_MspInit+0xc8>)
 8001d60:	f000 faa4 	bl	80022ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART3_TX_GPIO_PIN;
 8001d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d68:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d72:	2303      	movs	r3, #3
 8001d74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = BUS_USART3_TX_GPIO_AF;
 8001d78:	2307      	movs	r3, #7
 8001d7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(BUS_USART3_TX_GPIO_PORT, &GPIO_InitStruct);
 8001d7e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d82:	4619      	mov	r1, r3
 8001d84:	4805      	ldr	r0, [pc, #20]	; (8001d9c <USART3_MspInit+0xcc>)
 8001d86:	f000 fa91 	bl	80022ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	3788      	adds	r7, #136	; 0x88
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
 8001d98:	48000800 	.word	0x48000800
 8001d9c:	48000400 	.word	0x48000400

08001da0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001daa:	2003      	movs	r0, #3
 8001dac:	f000 f960 	bl	8002070 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001db0:	200f      	movs	r0, #15
 8001db2:	f000 f80d 	bl	8001dd0 <HAL_InitTick>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d002      	beq.n	8001dc2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	71fb      	strb	r3, [r7, #7]
 8001dc0:	e001      	b.n	8001dc6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dc2:	f7ff fbfb 	bl	80015bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ddc:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <HAL_InitTick+0x6c>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d023      	beq.n	8001e2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001de4:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <HAL_InitTick+0x70>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <HAL_InitTick+0x6c>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4619      	mov	r1, r3
 8001dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f96d 	bl	80020da <HAL_SYSTICK_Config>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10f      	bne.n	8001e26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b0f      	cmp	r3, #15
 8001e0a:	d809      	bhi.n	8001e20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e14:	f000 f937 	bl	8002086 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e18:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <HAL_InitTick+0x74>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	e007      	b.n	8001e30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
 8001e24:	e004      	b.n	8001e30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	73fb      	strb	r3, [r7, #15]
 8001e2a:	e001      	b.n	8001e30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000028 	.word	0x20000028
 8001e40:	2000000c 	.word	0x2000000c
 8001e44:	20000024 	.word	0x20000024

08001e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_IncTick+0x20>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_IncTick+0x24>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <HAL_IncTick+0x24>)
 8001e5a:	6013      	str	r3, [r2, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000028 	.word	0x20000028
 8001e6c:	200003a4 	.word	0x200003a4

08001e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return uwTick;
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <HAL_GetTick+0x14>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	200003a4 	.word	0x200003a4

08001e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e90:	f7ff ffee 	bl	8001e70 <HAL_GetTick>
 8001e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ea0:	d005      	beq.n	8001eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_Delay+0x44>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4413      	add	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eae:	bf00      	nop
 8001eb0:	f7ff ffde 	bl	8001e70 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d8f7      	bhi.n	8001eb0 <HAL_Delay+0x28>
  {
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000028 	.word	0x20000028

08001ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <__NVIC_GetPriorityGrouping+0x18>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0307 	and.w	r3, r3, #7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	db0b      	blt.n	8001f5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f003 021f 	and.w	r2, r3, #31
 8001f4c:	4907      	ldr	r1, [pc, #28]	; (8001f6c <__NVIC_EnableIRQ+0x38>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	2001      	movs	r0, #1
 8001f56:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000e100 	.word	0xe000e100

08001f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	db0a      	blt.n	8001f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	490c      	ldr	r1, [pc, #48]	; (8001fbc <__NVIC_SetPriority+0x4c>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	0112      	lsls	r2, r2, #4
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	440b      	add	r3, r1
 8001f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f98:	e00a      	b.n	8001fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4908      	ldr	r1, [pc, #32]	; (8001fc0 <__NVIC_SetPriority+0x50>)
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	3b04      	subs	r3, #4
 8001fa8:	0112      	lsls	r2, r2, #4
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	440b      	add	r3, r1
 8001fae:	761a      	strb	r2, [r3, #24]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000e100 	.word	0xe000e100
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	; 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f1c3 0307 	rsb	r3, r3, #7
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	bf28      	it	cs
 8001fe2:	2304      	movcs	r3, #4
 8001fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	2b06      	cmp	r3, #6
 8001fec:	d902      	bls.n	8001ff4 <NVIC_EncodePriority+0x30>
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3b03      	subs	r3, #3
 8001ff2:	e000      	b.n	8001ff6 <NVIC_EncodePriority+0x32>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43da      	mvns	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	401a      	ands	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800200c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	43d9      	mvns	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	4313      	orrs	r3, r2
         );
}
 800201e:	4618      	mov	r0, r3
 8002020:	3724      	adds	r7, #36	; 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3b01      	subs	r3, #1
 8002038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800203c:	d301      	bcc.n	8002042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800203e:	2301      	movs	r3, #1
 8002040:	e00f      	b.n	8002062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002042:	4a0a      	ldr	r2, [pc, #40]	; (800206c <SysTick_Config+0x40>)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3b01      	subs	r3, #1
 8002048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800204a:	210f      	movs	r1, #15
 800204c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002050:	f7ff ff8e 	bl	8001f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <SysTick_Config+0x40>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800205a:	4b04      	ldr	r3, [pc, #16]	; (800206c <SysTick_Config+0x40>)
 800205c:	2207      	movs	r2, #7
 800205e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	e000e010 	.word	0xe000e010

08002070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff ff29 	bl	8001ed0 <__NVIC_SetPriorityGrouping>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b086      	sub	sp, #24
 800208a:	af00      	add	r7, sp, #0
 800208c:	4603      	mov	r3, r0
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002098:	f7ff ff3e 	bl	8001f18 <__NVIC_GetPriorityGrouping>
 800209c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	6978      	ldr	r0, [r7, #20]
 80020a4:	f7ff ff8e 	bl	8001fc4 <NVIC_EncodePriority>
 80020a8:	4602      	mov	r2, r0
 80020aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff5d 	bl	8001f70 <__NVIC_SetPriority>
}
 80020b6:	bf00      	nop
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff31 	bl	8001f34 <__NVIC_EnableIRQ>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff ffa2 	bl	800202c <SysTick_Config>
 80020e8:	4603      	mov	r3, r0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b085      	sub	sp, #20
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d008      	beq.n	800211c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2204      	movs	r2, #4
 800210e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e022      	b.n	8002162 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 020e 	bic.w	r2, r2, #14
 800212a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0201 	bic.w	r2, r2, #1
 800213a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002140:	f003 021c 	and.w	r2, r3, #28
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	2101      	movs	r1, #1
 800214a:	fa01 f202 	lsl.w	r2, r1, r2
 800214e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002160:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b084      	sub	sp, #16
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d005      	beq.n	8002192 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2204      	movs	r2, #4
 800218a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
 8002190:	e029      	b.n	80021e6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 020e 	bic.w	r2, r2, #14
 80021a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0201 	bic.w	r2, r2, #1
 80021b0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	f003 021c 	and.w	r2, r3, #28
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	2101      	movs	r1, #1
 80021c0:	fa01 f202 	lsl.w	r2, r1, r2
 80021c4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	4798      	blx	r3
    }
  }
  return status;
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	460b      	mov	r3, r1
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002202:	7afb      	ldrb	r3, [r7, #11]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d103      	bne.n	8002210 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	605a      	str	r2, [r3, #4]
      break;
 800220e:	e002      	b.n	8002216 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	75fb      	strb	r3, [r7, #23]
      break;
 8002214:	bf00      	nop
  }

  return status;
 8002216:	7dfb      	ldrb	r3, [r7, #23]
}
 8002218:	4618      	mov	r0, r3
 800221a:	371c      	adds	r7, #28
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e003      	b.n	8002240 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800223e:	2300      	movs	r3, #0
  }
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	0c1b      	lsrs	r3, r3, #16
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 031f 	and.w	r3, r3, #31
 8002268:	2201      	movs	r2, #1
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <HAL_EXTI_IRQHandler+0x5c>)
 8002276:	4413      	add	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4013      	ands	r3, r2
 8002282:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4798      	blx	r3
    }
  }
}
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40010414 	.word	0x40010414

080022ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ba:	e154      	b.n	8002566 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	2101      	movs	r1, #1
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	fa01 f303 	lsl.w	r3, r1, r3
 80022c8:	4013      	ands	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 8146 	beq.w	8002560 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d005      	beq.n	80022ec <HAL_GPIO_Init+0x40>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d130      	bne.n	800234e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	2203      	movs	r2, #3
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4013      	ands	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002322:	2201      	movs	r2, #1
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	f003 0201 	and.w	r2, r3, #1
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b03      	cmp	r3, #3
 8002358:	d017      	beq.n	800238a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	2203      	movs	r2, #3
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d123      	bne.n	80023de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	08da      	lsrs	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3208      	adds	r2, #8
 800239e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	220f      	movs	r2, #15
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4013      	ands	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	08da      	lsrs	r2, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3208      	adds	r2, #8
 80023d8:	6939      	ldr	r1, [r7, #16]
 80023da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	2203      	movs	r2, #3
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0203 	and.w	r2, r3, #3
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 80a0 	beq.w	8002560 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002420:	4b58      	ldr	r3, [pc, #352]	; (8002584 <HAL_GPIO_Init+0x2d8>)
 8002422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002424:	4a57      	ldr	r2, [pc, #348]	; (8002584 <HAL_GPIO_Init+0x2d8>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6613      	str	r3, [r2, #96]	; 0x60
 800242c:	4b55      	ldr	r3, [pc, #340]	; (8002584 <HAL_GPIO_Init+0x2d8>)
 800242e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002438:	4a53      	ldr	r2, [pc, #332]	; (8002588 <HAL_GPIO_Init+0x2dc>)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	089b      	lsrs	r3, r3, #2
 800243e:	3302      	adds	r3, #2
 8002440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002444:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	220f      	movs	r2, #15
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002462:	d019      	beq.n	8002498 <HAL_GPIO_Init+0x1ec>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a49      	ldr	r2, [pc, #292]	; (800258c <HAL_GPIO_Init+0x2e0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d013      	beq.n	8002494 <HAL_GPIO_Init+0x1e8>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a48      	ldr	r2, [pc, #288]	; (8002590 <HAL_GPIO_Init+0x2e4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d00d      	beq.n	8002490 <HAL_GPIO_Init+0x1e4>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a47      	ldr	r2, [pc, #284]	; (8002594 <HAL_GPIO_Init+0x2e8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d007      	beq.n	800248c <HAL_GPIO_Init+0x1e0>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a46      	ldr	r2, [pc, #280]	; (8002598 <HAL_GPIO_Init+0x2ec>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d101      	bne.n	8002488 <HAL_GPIO_Init+0x1dc>
 8002484:	2304      	movs	r3, #4
 8002486:	e008      	b.n	800249a <HAL_GPIO_Init+0x1ee>
 8002488:	2307      	movs	r3, #7
 800248a:	e006      	b.n	800249a <HAL_GPIO_Init+0x1ee>
 800248c:	2303      	movs	r3, #3
 800248e:	e004      	b.n	800249a <HAL_GPIO_Init+0x1ee>
 8002490:	2302      	movs	r3, #2
 8002492:	e002      	b.n	800249a <HAL_GPIO_Init+0x1ee>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <HAL_GPIO_Init+0x1ee>
 8002498:	2300      	movs	r3, #0
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	f002 0203 	and.w	r2, r2, #3
 80024a0:	0092      	lsls	r2, r2, #2
 80024a2:	4093      	lsls	r3, r2
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024aa:	4937      	ldr	r1, [pc, #220]	; (8002588 <HAL_GPIO_Init+0x2dc>)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	3302      	adds	r3, #2
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024b8:	4b38      	ldr	r3, [pc, #224]	; (800259c <HAL_GPIO_Init+0x2f0>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024dc:	4a2f      	ldr	r2, [pc, #188]	; (800259c <HAL_GPIO_Init+0x2f0>)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024e2:	4b2e      	ldr	r3, [pc, #184]	; (800259c <HAL_GPIO_Init+0x2f0>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002506:	4a25      	ldr	r2, [pc, #148]	; (800259c <HAL_GPIO_Init+0x2f0>)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800250c:	4b23      	ldr	r3, [pc, #140]	; (800259c <HAL_GPIO_Init+0x2f0>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	43db      	mvns	r3, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002530:	4a1a      	ldr	r2, [pc, #104]	; (800259c <HAL_GPIO_Init+0x2f0>)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002536:	4b19      	ldr	r3, [pc, #100]	; (800259c <HAL_GPIO_Init+0x2f0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	43db      	mvns	r3, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4013      	ands	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800255a:	4a10      	ldr	r2, [pc, #64]	; (800259c <HAL_GPIO_Init+0x2f0>)
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	3301      	adds	r3, #1
 8002564:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	fa22 f303 	lsr.w	r3, r2, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	f47f aea3 	bne.w	80022bc <HAL_GPIO_Init+0x10>
  }
}
 8002576:	bf00      	nop
 8002578:	bf00      	nop
 800257a:	371c      	adds	r7, #28
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	40021000 	.word	0x40021000
 8002588:	40010000 	.word	0x40010000
 800258c:	48000400 	.word	0x48000400
 8002590:	48000800 	.word	0x48000800
 8002594:	48000c00 	.word	0x48000c00
 8002598:	48001000 	.word	0x48001000
 800259c:	40010400 	.word	0x40010400

080025a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80025ae:	e0b7      	b.n	8002720 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80025b0:	2201      	movs	r2, #1
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	4013      	ands	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 80aa 	beq.w	800271a <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80025c6:	4a5d      	ldr	r2, [pc, #372]	; (800273c <HAL_GPIO_DeInit+0x19c>)
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	089b      	lsrs	r3, r3, #2
 80025cc:	3302      	adds	r3, #2
 80025ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	220f      	movs	r2, #15
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4013      	ands	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025ee:	d019      	beq.n	8002624 <HAL_GPIO_DeInit+0x84>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a53      	ldr	r2, [pc, #332]	; (8002740 <HAL_GPIO_DeInit+0x1a0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d013      	beq.n	8002620 <HAL_GPIO_DeInit+0x80>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a52      	ldr	r2, [pc, #328]	; (8002744 <HAL_GPIO_DeInit+0x1a4>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d00d      	beq.n	800261c <HAL_GPIO_DeInit+0x7c>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a51      	ldr	r2, [pc, #324]	; (8002748 <HAL_GPIO_DeInit+0x1a8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d007      	beq.n	8002618 <HAL_GPIO_DeInit+0x78>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a50      	ldr	r2, [pc, #320]	; (800274c <HAL_GPIO_DeInit+0x1ac>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d101      	bne.n	8002614 <HAL_GPIO_DeInit+0x74>
 8002610:	2304      	movs	r3, #4
 8002612:	e008      	b.n	8002626 <HAL_GPIO_DeInit+0x86>
 8002614:	2307      	movs	r3, #7
 8002616:	e006      	b.n	8002626 <HAL_GPIO_DeInit+0x86>
 8002618:	2303      	movs	r3, #3
 800261a:	e004      	b.n	8002626 <HAL_GPIO_DeInit+0x86>
 800261c:	2302      	movs	r3, #2
 800261e:	e002      	b.n	8002626 <HAL_GPIO_DeInit+0x86>
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <HAL_GPIO_DeInit+0x86>
 8002624:	2300      	movs	r3, #0
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	f002 0203 	and.w	r2, r2, #3
 800262c:	0092      	lsls	r2, r2, #2
 800262e:	4093      	lsls	r3, r2
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	429a      	cmp	r2, r3
 8002634:	d132      	bne.n	800269c <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002636:	4b46      	ldr	r3, [pc, #280]	; (8002750 <HAL_GPIO_DeInit+0x1b0>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	43db      	mvns	r3, r3
 800263e:	4944      	ldr	r1, [pc, #272]	; (8002750 <HAL_GPIO_DeInit+0x1b0>)
 8002640:	4013      	ands	r3, r2
 8002642:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002644:	4b42      	ldr	r3, [pc, #264]	; (8002750 <HAL_GPIO_DeInit+0x1b0>)
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	43db      	mvns	r3, r3
 800264c:	4940      	ldr	r1, [pc, #256]	; (8002750 <HAL_GPIO_DeInit+0x1b0>)
 800264e:	4013      	ands	r3, r2
 8002650:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002652:	4b3f      	ldr	r3, [pc, #252]	; (8002750 <HAL_GPIO_DeInit+0x1b0>)
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	43db      	mvns	r3, r3
 800265a:	493d      	ldr	r1, [pc, #244]	; (8002750 <HAL_GPIO_DeInit+0x1b0>)
 800265c:	4013      	ands	r3, r2
 800265e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002660:	4b3b      	ldr	r3, [pc, #236]	; (8002750 <HAL_GPIO_DeInit+0x1b0>)
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	43db      	mvns	r3, r3
 8002668:	4939      	ldr	r1, [pc, #228]	; (8002750 <HAL_GPIO_DeInit+0x1b0>)
 800266a:	4013      	ands	r3, r2
 800266c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	220f      	movs	r2, #15
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800267e:	4a2f      	ldr	r2, [pc, #188]	; (800273c <HAL_GPIO_DeInit+0x19c>)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3302      	adds	r3, #2
 8002686:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	43da      	mvns	r2, r3
 800268e:	482b      	ldr	r0, [pc, #172]	; (800273c <HAL_GPIO_DeInit+0x19c>)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	089b      	lsrs	r3, r3, #2
 8002694:	400a      	ands	r2, r1
 8002696:	3302      	adds	r3, #2
 8002698:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	2103      	movs	r1, #3
 80026a6:	fa01 f303 	lsl.w	r3, r1, r3
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	08da      	lsrs	r2, r3, #3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3208      	adds	r2, #8
 80026b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	220f      	movs	r2, #15
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	08d2      	lsrs	r2, r2, #3
 80026d0:	4019      	ands	r1, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3208      	adds	r2, #8
 80026d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	2103      	movs	r1, #3
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	401a      	ands	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	2101      	movs	r1, #1
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	fa01 f303 	lsl.w	r3, r1, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	401a      	ands	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	2103      	movs	r1, #3
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	401a      	ands	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	3301      	adds	r3, #1
 800271e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	f47f af41 	bne.w	80025b0 <HAL_GPIO_DeInit+0x10>
  }
}
 800272e:	bf00      	nop
 8002730:	bf00      	nop
 8002732:	371c      	adds	r7, #28
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	40010000 	.word	0x40010000
 8002740:	48000400 	.word	0x48000400
 8002744:	48000800 	.word	0x48000800
 8002748:	48000c00 	.word	0x48000c00
 800274c:	48001000 	.word	0x48001000
 8002750:	40010400 	.word	0x40010400

08002754 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	887b      	ldrh	r3, [r7, #2]
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
 8002770:	e001      	b.n	8002776 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002776:	7bfb      	ldrb	r3, [r7, #15]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]
 8002790:	4613      	mov	r3, r2
 8002792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002794:	787b      	ldrb	r3, [r7, #1]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800279a:	887a      	ldrh	r2, [r7, #2]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027a0:	e002      	b.n	80027a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027a2:	887a      	ldrh	r2, [r7, #2]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027c6:	887a      	ldrh	r2, [r7, #2]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4013      	ands	r3, r2
 80027cc:	041a      	lsls	r2, r3, #16
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	43d9      	mvns	r1, r3
 80027d2:	887b      	ldrh	r3, [r7, #2]
 80027d4:	400b      	ands	r3, r1
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	619a      	str	r2, [r3, #24]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027f2:	4b08      	ldr	r3, [pc, #32]	; (8002814 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027f4:	695a      	ldr	r2, [r3, #20]
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d006      	beq.n	800280c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027fe:	4a05      	ldr	r2, [pc, #20]	; (8002814 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f806 	bl	8002818 <HAL_GPIO_EXTI_Callback>
  }
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40010400 	.word	0x40010400

08002818 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
	...

08002830 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002834:	4b04      	ldr	r3, [pc, #16]	; (8002848 <HAL_PWREx_GetVoltageRange+0x18>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40007000 	.word	0x40007000

0800284c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800285a:	d130      	bne.n	80028be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800285c:	4b23      	ldr	r3, [pc, #140]	; (80028ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002868:	d038      	beq.n	80028dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002872:	4a1e      	ldr	r2, [pc, #120]	; (80028ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002874:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002878:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800287a:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2232      	movs	r2, #50	; 0x32
 8002880:	fb02 f303 	mul.w	r3, r2, r3
 8002884:	4a1b      	ldr	r2, [pc, #108]	; (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002886:	fba2 2303 	umull	r2, r3, r2, r3
 800288a:	0c9b      	lsrs	r3, r3, #18
 800288c:	3301      	adds	r3, #1
 800288e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002890:	e002      	b.n	8002898 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	3b01      	subs	r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002898:	4b14      	ldr	r3, [pc, #80]	; (80028ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a4:	d102      	bne.n	80028ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f2      	bne.n	8002892 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028ac:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b8:	d110      	bne.n	80028dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e00f      	b.n	80028de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80028be:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ca:	d007      	beq.n	80028dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028cc:	4b07      	ldr	r3, [pc, #28]	; (80028ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028d4:	4a05      	ldr	r2, [pc, #20]	; (80028ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40007000 	.word	0x40007000
 80028f0:	2000000c 	.word	0x2000000c
 80028f4:	431bde83 	.word	0x431bde83

080028f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d102      	bne.n	800290c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	f000 bc02 	b.w	8003110 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800290c:	4b96      	ldr	r3, [pc, #600]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 030c 	and.w	r3, r3, #12
 8002914:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002916:	4b94      	ldr	r3, [pc, #592]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80e4 	beq.w	8002af6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d007      	beq.n	8002944 <HAL_RCC_OscConfig+0x4c>
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2b0c      	cmp	r3, #12
 8002938:	f040 808b 	bne.w	8002a52 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b01      	cmp	r3, #1
 8002940:	f040 8087 	bne.w	8002a52 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002944:	4b88      	ldr	r3, [pc, #544]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_OscConfig+0x64>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e3d9      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1a      	ldr	r2, [r3, #32]
 8002960:	4b81      	ldr	r3, [pc, #516]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b00      	cmp	r3, #0
 800296a:	d004      	beq.n	8002976 <HAL_RCC_OscConfig+0x7e>
 800296c:	4b7e      	ldr	r3, [pc, #504]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002974:	e005      	b.n	8002982 <HAL_RCC_OscConfig+0x8a>
 8002976:	4b7c      	ldr	r3, [pc, #496]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002982:	4293      	cmp	r3, r2
 8002984:	d223      	bcs.n	80029ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fd8c 	bl	80034a8 <RCC_SetFlashLatencyFromMSIRange>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e3ba      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800299a:	4b73      	ldr	r3, [pc, #460]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a72      	ldr	r2, [pc, #456]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 80029a0:	f043 0308 	orr.w	r3, r3, #8
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4b70      	ldr	r3, [pc, #448]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	496d      	ldr	r1, [pc, #436]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029b8:	4b6b      	ldr	r3, [pc, #428]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	4968      	ldr	r1, [pc, #416]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	604b      	str	r3, [r1, #4]
 80029cc:	e025      	b.n	8002a1a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029ce:	4b66      	ldr	r3, [pc, #408]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a65      	ldr	r2, [pc, #404]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 80029d4:	f043 0308 	orr.w	r3, r3, #8
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4b63      	ldr	r3, [pc, #396]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	4960      	ldr	r1, [pc, #384]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029ec:	4b5e      	ldr	r3, [pc, #376]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	495b      	ldr	r1, [pc, #364]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 fd4c 	bl	80034a8 <RCC_SetFlashLatencyFromMSIRange>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e37a      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a1a:	f000 fc81 	bl	8003320 <HAL_RCC_GetSysClockFreq>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	4b51      	ldr	r3, [pc, #324]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	4950      	ldr	r1, [pc, #320]	; (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002a2c:	5ccb      	ldrb	r3, [r1, r3]
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	fa22 f303 	lsr.w	r3, r2, r3
 8002a36:	4a4e      	ldr	r2, [pc, #312]	; (8002b70 <HAL_RCC_OscConfig+0x278>)
 8002a38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a3a:	4b4e      	ldr	r3, [pc, #312]	; (8002b74 <HAL_RCC_OscConfig+0x27c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff f9c6 	bl	8001dd0 <HAL_InitTick>
 8002a44:	4603      	mov	r3, r0
 8002a46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d052      	beq.n	8002af4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	e35e      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d032      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a5a:	4b43      	ldr	r3, [pc, #268]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a42      	ldr	r2, [pc, #264]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a66:	f7ff fa03 	bl	8001e70 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a6e:	f7ff f9ff 	bl	8001e70 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e347      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a80:	4b39      	ldr	r3, [pc, #228]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a8c:	4b36      	ldr	r3, [pc, #216]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a35      	ldr	r2, [pc, #212]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002a92:	f043 0308 	orr.w	r3, r3, #8
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	4b33      	ldr	r3, [pc, #204]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	4930      	ldr	r1, [pc, #192]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aaa:	4b2f      	ldr	r3, [pc, #188]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	021b      	lsls	r3, r3, #8
 8002ab8:	492b      	ldr	r1, [pc, #172]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	604b      	str	r3, [r1, #4]
 8002abe:	e01a      	b.n	8002af6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ac0:	4b29      	ldr	r3, [pc, #164]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a28      	ldr	r2, [pc, #160]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002ac6:	f023 0301 	bic.w	r3, r3, #1
 8002aca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002acc:	f7ff f9d0 	bl	8001e70 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ad4:	f7ff f9cc 	bl	8001e70 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e314      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ae6:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x1dc>
 8002af2:	e000      	b.n	8002af6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002af4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d073      	beq.n	8002bea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_OscConfig+0x21c>
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	2b0c      	cmp	r3, #12
 8002b0c:	d10e      	bne.n	8002b2c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d10b      	bne.n	8002b2c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b14:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d063      	beq.n	8002be8 <HAL_RCC_OscConfig+0x2f0>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d15f      	bne.n	8002be8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e2f1      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b34:	d106      	bne.n	8002b44 <HAL_RCC_OscConfig+0x24c>
 8002b36:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a0b      	ldr	r2, [pc, #44]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	e025      	b.n	8002b90 <HAL_RCC_OscConfig+0x298>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b4c:	d114      	bne.n	8002b78 <HAL_RCC_OscConfig+0x280>
 8002b4e:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a05      	ldr	r2, [pc, #20]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	4b03      	ldr	r3, [pc, #12]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a02      	ldr	r2, [pc, #8]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	e013      	b.n	8002b90 <HAL_RCC_OscConfig+0x298>
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	080084b4 	.word	0x080084b4
 8002b70:	2000000c 	.word	0x2000000c
 8002b74:	20000024 	.word	0x20000024
 8002b78:	4ba0      	ldr	r3, [pc, #640]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a9f      	ldr	r2, [pc, #636]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b82:	6013      	str	r3, [r2, #0]
 8002b84:	4b9d      	ldr	r3, [pc, #628]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a9c      	ldr	r2, [pc, #624]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d013      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7ff f96a 	bl	8001e70 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba0:	f7ff f966 	bl	8001e70 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	; 0x64
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e2ae      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bb2:	4b92      	ldr	r3, [pc, #584]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x2a8>
 8002bbe:	e014      	b.n	8002bea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7ff f956 	bl	8001e70 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc8:	f7ff f952 	bl	8001e70 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b64      	cmp	r3, #100	; 0x64
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e29a      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bda:	4b88      	ldr	r3, [pc, #544]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x2d0>
 8002be6:	e000      	b.n	8002bea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d060      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_OscConfig+0x310>
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	2b0c      	cmp	r3, #12
 8002c00:	d119      	bne.n	8002c36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d116      	bne.n	8002c36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c08:	4b7c      	ldr	r3, [pc, #496]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_RCC_OscConfig+0x328>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e277      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c20:	4b76      	ldr	r3, [pc, #472]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	061b      	lsls	r3, r3, #24
 8002c2e:	4973      	ldr	r1, [pc, #460]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c34:	e040      	b.n	8002cb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d023      	beq.n	8002c86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c3e:	4b6f      	ldr	r3, [pc, #444]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a6e      	ldr	r2, [pc, #440]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4a:	f7ff f911 	bl	8001e70 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c52:	f7ff f90d 	bl	8001e70 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e255      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c64:	4b65      	ldr	r3, [pc, #404]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c70:	4b62      	ldr	r3, [pc, #392]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	061b      	lsls	r3, r3, #24
 8002c7e:	495f      	ldr	r1, [pc, #380]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]
 8002c84:	e018      	b.n	8002cb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c86:	4b5d      	ldr	r3, [pc, #372]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a5c      	ldr	r2, [pc, #368]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c92:	f7ff f8ed 	bl	8001e70 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c9a:	f7ff f8e9 	bl	8001e70 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e231      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cac:	4b53      	ldr	r3, [pc, #332]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1f0      	bne.n	8002c9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d03c      	beq.n	8002d3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d01c      	beq.n	8002d06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ccc:	4b4b      	ldr	r3, [pc, #300]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd2:	4a4a      	ldr	r2, [pc, #296]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cdc:	f7ff f8c8 	bl	8001e70 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce4:	f7ff f8c4 	bl	8001e70 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e20c      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cf6:	4b41      	ldr	r3, [pc, #260]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0ef      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x3ec>
 8002d04:	e01b      	b.n	8002d3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d06:	4b3d      	ldr	r3, [pc, #244]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0c:	4a3b      	ldr	r2, [pc, #236]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d16:	f7ff f8ab 	bl	8001e70 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d1e:	f7ff f8a7 	bl	8001e70 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e1ef      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d30:	4b32      	ldr	r3, [pc, #200]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1ef      	bne.n	8002d1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 80a6 	beq.w	8002e98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d50:	4b2a      	ldr	r3, [pc, #168]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10d      	bne.n	8002d78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d5c:	4b27      	ldr	r3, [pc, #156]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d60:	4a26      	ldr	r2, [pc, #152]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d66:	6593      	str	r3, [r2, #88]	; 0x58
 8002d68:	4b24      	ldr	r3, [pc, #144]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d74:	2301      	movs	r3, #1
 8002d76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d78:	4b21      	ldr	r3, [pc, #132]	; (8002e00 <HAL_RCC_OscConfig+0x508>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d118      	bne.n	8002db6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d84:	4b1e      	ldr	r3, [pc, #120]	; (8002e00 <HAL_RCC_OscConfig+0x508>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a1d      	ldr	r2, [pc, #116]	; (8002e00 <HAL_RCC_OscConfig+0x508>)
 8002d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d90:	f7ff f86e 	bl	8001e70 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d98:	f7ff f86a 	bl	8001e70 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e1b2      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002daa:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <HAL_RCC_OscConfig+0x508>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d108      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x4d8>
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc4:	4a0d      	ldr	r2, [pc, #52]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dce:	e029      	b.n	8002e24 <HAL_RCC_OscConfig+0x52c>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2b05      	cmp	r3, #5
 8002dd6:	d115      	bne.n	8002e04 <HAL_RCC_OscConfig+0x50c>
 8002dd8:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dde:	4a07      	ldr	r2, [pc, #28]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002de0:	f043 0304 	orr.w	r3, r3, #4
 8002de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002de8:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dee:	4a03      	ldr	r2, [pc, #12]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002df8:	e014      	b.n	8002e24 <HAL_RCC_OscConfig+0x52c>
 8002dfa:	bf00      	nop
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40007000 	.word	0x40007000
 8002e04:	4b9a      	ldr	r3, [pc, #616]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0a:	4a99      	ldr	r2, [pc, #612]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 8002e0c:	f023 0301 	bic.w	r3, r3, #1
 8002e10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e14:	4b96      	ldr	r3, [pc, #600]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1a:	4a95      	ldr	r2, [pc, #596]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 8002e1c:	f023 0304 	bic.w	r3, r3, #4
 8002e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d016      	beq.n	8002e5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2c:	f7ff f820 	bl	8001e70 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e32:	e00a      	b.n	8002e4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e34:	f7ff f81c 	bl	8001e70 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e162      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e4a:	4b89      	ldr	r3, [pc, #548]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 8002e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ed      	beq.n	8002e34 <HAL_RCC_OscConfig+0x53c>
 8002e58:	e015      	b.n	8002e86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5a:	f7ff f809 	bl	8001e70 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e60:	e00a      	b.n	8002e78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e62:	f7ff f805 	bl	8001e70 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e14b      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e78:	4b7d      	ldr	r3, [pc, #500]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 8002e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1ed      	bne.n	8002e62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e86:	7ffb      	ldrb	r3, [r7, #31]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d105      	bne.n	8002e98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e8c:	4b78      	ldr	r3, [pc, #480]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e90:	4a77      	ldr	r2, [pc, #476]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 8002e92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0320 	and.w	r3, r3, #32
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d03c      	beq.n	8002f1e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d01c      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002eac:	4b70      	ldr	r3, [pc, #448]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 8002eae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eb2:	4a6f      	ldr	r2, [pc, #444]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebc:	f7fe ffd8 	bl	8001e70 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ec4:	f7fe ffd4 	bl	8001e70 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e11c      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ed6:	4b66      	ldr	r3, [pc, #408]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 8002ed8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0ef      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x5cc>
 8002ee4:	e01b      	b.n	8002f1e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ee6:	4b62      	ldr	r3, [pc, #392]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 8002ee8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eec:	4a60      	ldr	r2, [pc, #384]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 8002eee:	f023 0301 	bic.w	r3, r3, #1
 8002ef2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef6:	f7fe ffbb 	bl	8001e70 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002efe:	f7fe ffb7 	bl	8001e70 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e0ff      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f10:	4b57      	ldr	r3, [pc, #348]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 8002f12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1ef      	bne.n	8002efe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 80f3 	beq.w	800310e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	f040 80c9 	bne.w	80030c4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f32:	4b4f      	ldr	r3, [pc, #316]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f003 0203 	and.w	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d12c      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	3b01      	subs	r3, #1
 8002f52:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d123      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f62:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d11b      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f72:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d113      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f82:	085b      	lsrs	r3, r3, #1
 8002f84:	3b01      	subs	r3, #1
 8002f86:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d109      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	085b      	lsrs	r3, r3, #1
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d06b      	beq.n	8003078 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2b0c      	cmp	r3, #12
 8002fa4:	d062      	beq.n	800306c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fa6:	4b32      	ldr	r3, [pc, #200]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e0ac      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fb6:	4b2e      	ldr	r3, [pc, #184]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a2d      	ldr	r2, [pc, #180]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 8002fbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fc0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fc2:	f7fe ff55 	bl	8001e70 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fca:	f7fe ff51 	bl	8001e70 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e099      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fdc:	4b24      	ldr	r3, [pc, #144]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1f0      	bne.n	8002fca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fe8:	4b21      	ldr	r3, [pc, #132]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	4b21      	ldr	r3, [pc, #132]	; (8003074 <HAL_RCC_OscConfig+0x77c>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ff8:	3a01      	subs	r2, #1
 8002ffa:	0112      	lsls	r2, r2, #4
 8002ffc:	4311      	orrs	r1, r2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003002:	0212      	lsls	r2, r2, #8
 8003004:	4311      	orrs	r1, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800300a:	0852      	lsrs	r2, r2, #1
 800300c:	3a01      	subs	r2, #1
 800300e:	0552      	lsls	r2, r2, #21
 8003010:	4311      	orrs	r1, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003016:	0852      	lsrs	r2, r2, #1
 8003018:	3a01      	subs	r2, #1
 800301a:	0652      	lsls	r2, r2, #25
 800301c:	4311      	orrs	r1, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003022:	06d2      	lsls	r2, r2, #27
 8003024:	430a      	orrs	r2, r1
 8003026:	4912      	ldr	r1, [pc, #72]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 8003028:	4313      	orrs	r3, r2
 800302a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800302c:	4b10      	ldr	r3, [pc, #64]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a0f      	ldr	r2, [pc, #60]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 8003032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003036:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003038:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4a0c      	ldr	r2, [pc, #48]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 800303e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003042:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003044:	f7fe ff14 	bl	8001e70 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304c:	f7fe ff10 	bl	8001e70 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e058      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800305e:	4b04      	ldr	r3, [pc, #16]	; (8003070 <HAL_RCC_OscConfig+0x778>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800306a:	e050      	b.n	800310e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e04f      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
 8003070:	40021000 	.word	0x40021000
 8003074:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003078:	4b27      	ldr	r3, [pc, #156]	; (8003118 <HAL_RCC_OscConfig+0x820>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d144      	bne.n	800310e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003084:	4b24      	ldr	r3, [pc, #144]	; (8003118 <HAL_RCC_OscConfig+0x820>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a23      	ldr	r2, [pc, #140]	; (8003118 <HAL_RCC_OscConfig+0x820>)
 800308a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800308e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003090:	4b21      	ldr	r3, [pc, #132]	; (8003118 <HAL_RCC_OscConfig+0x820>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4a20      	ldr	r2, [pc, #128]	; (8003118 <HAL_RCC_OscConfig+0x820>)
 8003096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800309c:	f7fe fee8 	bl	8001e70 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fe fee4 	bl	8001e70 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e02c      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b6:	4b18      	ldr	r3, [pc, #96]	; (8003118 <HAL_RCC_OscConfig+0x820>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x7ac>
 80030c2:	e024      	b.n	800310e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2b0c      	cmp	r3, #12
 80030c8:	d01f      	beq.n	800310a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ca:	4b13      	ldr	r3, [pc, #76]	; (8003118 <HAL_RCC_OscConfig+0x820>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a12      	ldr	r2, [pc, #72]	; (8003118 <HAL_RCC_OscConfig+0x820>)
 80030d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d6:	f7fe fecb 	bl	8001e70 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030de:	f7fe fec7 	bl	8001e70 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e00f      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f0:	4b09      	ldr	r3, [pc, #36]	; (8003118 <HAL_RCC_OscConfig+0x820>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f0      	bne.n	80030de <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_RCC_OscConfig+0x820>)
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	4905      	ldr	r1, [pc, #20]	; (8003118 <HAL_RCC_OscConfig+0x820>)
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_RCC_OscConfig+0x824>)
 8003104:	4013      	ands	r3, r2
 8003106:	60cb      	str	r3, [r1, #12]
 8003108:	e001      	b.n	800310e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3720      	adds	r7, #32
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000
 800311c:	feeefffc 	.word	0xfeeefffc

08003120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0e7      	b.n	8003304 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003134:	4b75      	ldr	r3, [pc, #468]	; (800330c <HAL_RCC_ClockConfig+0x1ec>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d910      	bls.n	8003164 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003142:	4b72      	ldr	r3, [pc, #456]	; (800330c <HAL_RCC_ClockConfig+0x1ec>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 0207 	bic.w	r2, r3, #7
 800314a:	4970      	ldr	r1, [pc, #448]	; (800330c <HAL_RCC_ClockConfig+0x1ec>)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	4313      	orrs	r3, r2
 8003150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003152:	4b6e      	ldr	r3, [pc, #440]	; (800330c <HAL_RCC_ClockConfig+0x1ec>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d001      	beq.n	8003164 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0cf      	b.n	8003304 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d010      	beq.n	8003192 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	4b66      	ldr	r3, [pc, #408]	; (8003310 <HAL_RCC_ClockConfig+0x1f0>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800317c:	429a      	cmp	r2, r3
 800317e:	d908      	bls.n	8003192 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003180:	4b63      	ldr	r3, [pc, #396]	; (8003310 <HAL_RCC_ClockConfig+0x1f0>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	4960      	ldr	r1, [pc, #384]	; (8003310 <HAL_RCC_ClockConfig+0x1f0>)
 800318e:	4313      	orrs	r3, r2
 8003190:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d04c      	beq.n	8003238 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d107      	bne.n	80031b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a6:	4b5a      	ldr	r3, [pc, #360]	; (8003310 <HAL_RCC_ClockConfig+0x1f0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d121      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e0a6      	b.n	8003304 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d107      	bne.n	80031ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031be:	4b54      	ldr	r3, [pc, #336]	; (8003310 <HAL_RCC_ClockConfig+0x1f0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d115      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e09a      	b.n	8003304 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031d6:	4b4e      	ldr	r3, [pc, #312]	; (8003310 <HAL_RCC_ClockConfig+0x1f0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e08e      	b.n	8003304 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031e6:	4b4a      	ldr	r3, [pc, #296]	; (8003310 <HAL_RCC_ClockConfig+0x1f0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e086      	b.n	8003304 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031f6:	4b46      	ldr	r3, [pc, #280]	; (8003310 <HAL_RCC_ClockConfig+0x1f0>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f023 0203 	bic.w	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4943      	ldr	r1, [pc, #268]	; (8003310 <HAL_RCC_ClockConfig+0x1f0>)
 8003204:	4313      	orrs	r3, r2
 8003206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003208:	f7fe fe32 	bl	8001e70 <HAL_GetTick>
 800320c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320e:	e00a      	b.n	8003226 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003210:	f7fe fe2e 	bl	8001e70 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	; 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e06e      	b.n	8003304 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	4b3a      	ldr	r3, [pc, #232]	; (8003310 <HAL_RCC_ClockConfig+0x1f0>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 020c 	and.w	r2, r3, #12
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	429a      	cmp	r2, r3
 8003236:	d1eb      	bne.n	8003210 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d010      	beq.n	8003266 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	4b31      	ldr	r3, [pc, #196]	; (8003310 <HAL_RCC_ClockConfig+0x1f0>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003250:	429a      	cmp	r2, r3
 8003252:	d208      	bcs.n	8003266 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003254:	4b2e      	ldr	r3, [pc, #184]	; (8003310 <HAL_RCC_ClockConfig+0x1f0>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	492b      	ldr	r1, [pc, #172]	; (8003310 <HAL_RCC_ClockConfig+0x1f0>)
 8003262:	4313      	orrs	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003266:	4b29      	ldr	r3, [pc, #164]	; (800330c <HAL_RCC_ClockConfig+0x1ec>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d210      	bcs.n	8003296 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003274:	4b25      	ldr	r3, [pc, #148]	; (800330c <HAL_RCC_ClockConfig+0x1ec>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f023 0207 	bic.w	r2, r3, #7
 800327c:	4923      	ldr	r1, [pc, #140]	; (800330c <HAL_RCC_ClockConfig+0x1ec>)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	4313      	orrs	r3, r2
 8003282:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003284:	4b21      	ldr	r3, [pc, #132]	; (800330c <HAL_RCC_ClockConfig+0x1ec>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d001      	beq.n	8003296 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e036      	b.n	8003304 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d008      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032a2:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <HAL_RCC_ClockConfig+0x1f0>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	4918      	ldr	r1, [pc, #96]	; (8003310 <HAL_RCC_ClockConfig+0x1f0>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d009      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032c0:	4b13      	ldr	r3, [pc, #76]	; (8003310 <HAL_RCC_ClockConfig+0x1f0>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4910      	ldr	r1, [pc, #64]	; (8003310 <HAL_RCC_ClockConfig+0x1f0>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032d4:	f000 f824 	bl	8003320 <HAL_RCC_GetSysClockFreq>
 80032d8:	4602      	mov	r2, r0
 80032da:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <HAL_RCC_ClockConfig+0x1f0>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	091b      	lsrs	r3, r3, #4
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	490b      	ldr	r1, [pc, #44]	; (8003314 <HAL_RCC_ClockConfig+0x1f4>)
 80032e6:	5ccb      	ldrb	r3, [r1, r3]
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
 80032f0:	4a09      	ldr	r2, [pc, #36]	; (8003318 <HAL_RCC_ClockConfig+0x1f8>)
 80032f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032f4:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_RCC_ClockConfig+0x1fc>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fe fd69 	bl	8001dd0 <HAL_InitTick>
 80032fe:	4603      	mov	r3, r0
 8003300:	72fb      	strb	r3, [r7, #11]

  return status;
 8003302:	7afb      	ldrb	r3, [r7, #11]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40022000 	.word	0x40022000
 8003310:	40021000 	.word	0x40021000
 8003314:	080084b4 	.word	0x080084b4
 8003318:	2000000c 	.word	0x2000000c
 800331c:	20000024 	.word	0x20000024

08003320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003320:	b480      	push	{r7}
 8003322:	b089      	sub	sp, #36	; 0x24
 8003324:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
 800332a:	2300      	movs	r3, #0
 800332c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800332e:	4b3e      	ldr	r3, [pc, #248]	; (8003428 <HAL_RCC_GetSysClockFreq+0x108>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003338:	4b3b      	ldr	r3, [pc, #236]	; (8003428 <HAL_RCC_GetSysClockFreq+0x108>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f003 0303 	and.w	r3, r3, #3
 8003340:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_GetSysClockFreq+0x34>
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	2b0c      	cmp	r3, #12
 800334c:	d121      	bne.n	8003392 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d11e      	bne.n	8003392 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003354:	4b34      	ldr	r3, [pc, #208]	; (8003428 <HAL_RCC_GetSysClockFreq+0x108>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d107      	bne.n	8003370 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003360:	4b31      	ldr	r3, [pc, #196]	; (8003428 <HAL_RCC_GetSysClockFreq+0x108>)
 8003362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003366:	0a1b      	lsrs	r3, r3, #8
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	61fb      	str	r3, [r7, #28]
 800336e:	e005      	b.n	800337c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003370:	4b2d      	ldr	r3, [pc, #180]	; (8003428 <HAL_RCC_GetSysClockFreq+0x108>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800337c:	4a2b      	ldr	r2, [pc, #172]	; (800342c <HAL_RCC_GetSysClockFreq+0x10c>)
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003384:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10d      	bne.n	80033a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003390:	e00a      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	2b04      	cmp	r3, #4
 8003396:	d102      	bne.n	800339e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003398:	4b25      	ldr	r3, [pc, #148]	; (8003430 <HAL_RCC_GetSysClockFreq+0x110>)
 800339a:	61bb      	str	r3, [r7, #24]
 800339c:	e004      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033a4:	4b23      	ldr	r3, [pc, #140]	; (8003434 <HAL_RCC_GetSysClockFreq+0x114>)
 80033a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	2b0c      	cmp	r3, #12
 80033ac:	d134      	bne.n	8003418 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033ae:	4b1e      	ldr	r3, [pc, #120]	; (8003428 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d003      	beq.n	80033c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d003      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0xac>
 80033c4:	e005      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033c6:	4b1a      	ldr	r3, [pc, #104]	; (8003430 <HAL_RCC_GetSysClockFreq+0x110>)
 80033c8:	617b      	str	r3, [r7, #20]
      break;
 80033ca:	e005      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033cc:	4b19      	ldr	r3, [pc, #100]	; (8003434 <HAL_RCC_GetSysClockFreq+0x114>)
 80033ce:	617b      	str	r3, [r7, #20]
      break;
 80033d0:	e002      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	617b      	str	r3, [r7, #20]
      break;
 80033d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033d8:	4b13      	ldr	r3, [pc, #76]	; (8003428 <HAL_RCC_GetSysClockFreq+0x108>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	3301      	adds	r3, #1
 80033e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033e6:	4b10      	ldr	r3, [pc, #64]	; (8003428 <HAL_RCC_GetSysClockFreq+0x108>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	0a1b      	lsrs	r3, r3, #8
 80033ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	fb03 f202 	mul.w	r2, r3, r2
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033fe:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <HAL_RCC_GetSysClockFreq+0x108>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	0e5b      	lsrs	r3, r3, #25
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	3301      	adds	r3, #1
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	fbb2 f3f3 	udiv	r3, r2, r3
 8003416:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003418:	69bb      	ldr	r3, [r7, #24]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3724      	adds	r7, #36	; 0x24
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000
 800342c:	080084cc 	.word	0x080084cc
 8003430:	00f42400 	.word	0x00f42400
 8003434:	007a1200 	.word	0x007a1200

08003438 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800343c:	4b03      	ldr	r3, [pc, #12]	; (800344c <HAL_RCC_GetHCLKFreq+0x14>)
 800343e:	681b      	ldr	r3, [r3, #0]
}
 8003440:	4618      	mov	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	2000000c 	.word	0x2000000c

08003450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003454:	f7ff fff0 	bl	8003438 <HAL_RCC_GetHCLKFreq>
 8003458:	4602      	mov	r2, r0
 800345a:	4b06      	ldr	r3, [pc, #24]	; (8003474 <HAL_RCC_GetPCLK1Freq+0x24>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	0a1b      	lsrs	r3, r3, #8
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	4904      	ldr	r1, [pc, #16]	; (8003478 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003466:	5ccb      	ldrb	r3, [r1, r3]
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003470:	4618      	mov	r0, r3
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40021000 	.word	0x40021000
 8003478:	080084c4 	.word	0x080084c4

0800347c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003480:	f7ff ffda 	bl	8003438 <HAL_RCC_GetHCLKFreq>
 8003484:	4602      	mov	r2, r0
 8003486:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	0adb      	lsrs	r3, r3, #11
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	4904      	ldr	r1, [pc, #16]	; (80034a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003492:	5ccb      	ldrb	r3, [r1, r3]
 8003494:	f003 031f 	and.w	r3, r3, #31
 8003498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800349c:	4618      	mov	r0, r3
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40021000 	.word	0x40021000
 80034a4:	080084c4 	.word	0x080084c4

080034a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034b0:	2300      	movs	r3, #0
 80034b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034b4:	4b2a      	ldr	r3, [pc, #168]	; (8003560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034c0:	f7ff f9b6 	bl	8002830 <HAL_PWREx_GetVoltageRange>
 80034c4:	6178      	str	r0, [r7, #20]
 80034c6:	e014      	b.n	80034f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034c8:	4b25      	ldr	r3, [pc, #148]	; (8003560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034cc:	4a24      	ldr	r2, [pc, #144]	; (8003560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d2:	6593      	str	r3, [r2, #88]	; 0x58
 80034d4:	4b22      	ldr	r3, [pc, #136]	; (8003560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034e0:	f7ff f9a6 	bl	8002830 <HAL_PWREx_GetVoltageRange>
 80034e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034e6:	4b1e      	ldr	r3, [pc, #120]	; (8003560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ea:	4a1d      	ldr	r2, [pc, #116]	; (8003560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f8:	d10b      	bne.n	8003512 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b80      	cmp	r3, #128	; 0x80
 80034fe:	d919      	bls.n	8003534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2ba0      	cmp	r3, #160	; 0xa0
 8003504:	d902      	bls.n	800350c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003506:	2302      	movs	r3, #2
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	e013      	b.n	8003534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800350c:	2301      	movs	r3, #1
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	e010      	b.n	8003534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b80      	cmp	r3, #128	; 0x80
 8003516:	d902      	bls.n	800351e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003518:	2303      	movs	r3, #3
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	e00a      	b.n	8003534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b80      	cmp	r3, #128	; 0x80
 8003522:	d102      	bne.n	800352a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003524:	2302      	movs	r3, #2
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	e004      	b.n	8003534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b70      	cmp	r3, #112	; 0x70
 800352e:	d101      	bne.n	8003534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003530:	2301      	movs	r3, #1
 8003532:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003534:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f023 0207 	bic.w	r2, r3, #7
 800353c:	4909      	ldr	r1, [pc, #36]	; (8003564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003544:	4b07      	ldr	r3, [pc, #28]	; (8003564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	429a      	cmp	r2, r3
 8003550:	d001      	beq.n	8003556 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40021000 	.word	0x40021000
 8003564:	40022000 	.word	0x40022000

08003568 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003570:	2300      	movs	r3, #0
 8003572:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003574:	2300      	movs	r3, #0
 8003576:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003580:	2b00      	cmp	r3, #0
 8003582:	d031      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003588:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800358c:	d01a      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800358e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003592:	d814      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d009      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003598:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800359c:	d10f      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800359e:	4b5d      	ldr	r3, [pc, #372]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	4a5c      	ldr	r2, [pc, #368]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035aa:	e00c      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3304      	adds	r3, #4
 80035b0:	2100      	movs	r1, #0
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 f9f0 	bl	8003998 <RCCEx_PLLSAI1_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035bc:	e003      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	74fb      	strb	r3, [r7, #19]
      break;
 80035c2:	e000      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80035c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035c6:	7cfb      	ldrb	r3, [r7, #19]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10b      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035cc:	4b51      	ldr	r3, [pc, #324]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	494e      	ldr	r1, [pc, #312]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035e2:	e001      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e4:	7cfb      	ldrb	r3, [r7, #19]
 80035e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 809e 	beq.w	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f6:	2300      	movs	r3, #0
 80035f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035fa:	4b46      	ldr	r3, [pc, #280]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800360a:	2300      	movs	r3, #0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00d      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003610:	4b40      	ldr	r3, [pc, #256]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003614:	4a3f      	ldr	r2, [pc, #252]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361a:	6593      	str	r3, [r2, #88]	; 0x58
 800361c:	4b3d      	ldr	r3, [pc, #244]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800361e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003628:	2301      	movs	r3, #1
 800362a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800362c:	4b3a      	ldr	r3, [pc, #232]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a39      	ldr	r2, [pc, #228]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003636:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003638:	f7fe fc1a 	bl	8001e70 <HAL_GetTick>
 800363c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800363e:	e009      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003640:	f7fe fc16 	bl	8001e70 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d902      	bls.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	74fb      	strb	r3, [r7, #19]
        break;
 8003652:	e005      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003654:	4b30      	ldr	r3, [pc, #192]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0ef      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d15a      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003666:	4b2b      	ldr	r3, [pc, #172]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003670:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d01e      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	429a      	cmp	r2, r3
 8003680:	d019      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003682:	4b24      	ldr	r3, [pc, #144]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800368c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800368e:	4b21      	ldr	r3, [pc, #132]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003694:	4a1f      	ldr	r2, [pc, #124]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800369e:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a4:	4a1b      	ldr	r2, [pc, #108]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036ae:	4a19      	ldr	r2, [pc, #100]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d016      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7fe fbd6 	bl	8001e70 <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036c6:	e00b      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c8:	f7fe fbd2 	bl	8001e70 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d902      	bls.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	74fb      	strb	r3, [r7, #19]
            break;
 80036de:	e006      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036e0:	4b0c      	ldr	r3, [pc, #48]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0ec      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80036ee:	7cfb      	ldrb	r3, [r7, #19]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10b      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036f4:	4b07      	ldr	r3, [pc, #28]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003702:	4904      	ldr	r1, [pc, #16]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800370a:	e009      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	74bb      	strb	r3, [r7, #18]
 8003710:	e006      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003712:	bf00      	nop
 8003714:	40021000 	.word	0x40021000
 8003718:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800371c:	7cfb      	ldrb	r3, [r7, #19]
 800371e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003720:	7c7b      	ldrb	r3, [r7, #17]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d105      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003726:	4b9b      	ldr	r3, [pc, #620]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372a:	4a9a      	ldr	r2, [pc, #616]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800372c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003730:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800373e:	4b95      	ldr	r3, [pc, #596]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003744:	f023 0203 	bic.w	r2, r3, #3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	4991      	ldr	r1, [pc, #580]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003760:	4b8c      	ldr	r3, [pc, #560]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003766:	f023 020c 	bic.w	r2, r3, #12
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	4989      	ldr	r1, [pc, #548]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003782:	4b84      	ldr	r3, [pc, #528]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003788:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003790:	4980      	ldr	r1, [pc, #512]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037a4:	4b7b      	ldr	r3, [pc, #492]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b2:	4978      	ldr	r1, [pc, #480]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037c6:	4b73      	ldr	r3, [pc, #460]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d4:	496f      	ldr	r1, [pc, #444]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037e8:	4b6a      	ldr	r3, [pc, #424]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	4967      	ldr	r1, [pc, #412]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800380a:	4b62      	ldr	r3, [pc, #392]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003810:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	495e      	ldr	r1, [pc, #376]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800382c:	4b59      	ldr	r3, [pc, #356]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003832:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383a:	4956      	ldr	r1, [pc, #344]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800384e:	4b51      	ldr	r3, [pc, #324]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003854:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	494d      	ldr	r1, [pc, #308]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d028      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003870:	4b48      	ldr	r3, [pc, #288]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003876:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800387e:	4945      	ldr	r1, [pc, #276]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800388e:	d106      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003890:	4b40      	ldr	r3, [pc, #256]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	4a3f      	ldr	r2, [pc, #252]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003896:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800389a:	60d3      	str	r3, [r2, #12]
 800389c:	e011      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038a6:	d10c      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3304      	adds	r3, #4
 80038ac:	2101      	movs	r1, #1
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 f872 	bl	8003998 <RCCEx_PLLSAI1_Config>
 80038b4:	4603      	mov	r3, r0
 80038b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038b8:	7cfb      	ldrb	r3, [r7, #19]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80038be:	7cfb      	ldrb	r3, [r7, #19]
 80038c0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d028      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038ce:	4b31      	ldr	r3, [pc, #196]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038dc:	492d      	ldr	r1, [pc, #180]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038ec:	d106      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038ee:	4b29      	ldr	r3, [pc, #164]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	4a28      	ldr	r2, [pc, #160]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038f8:	60d3      	str	r3, [r2, #12]
 80038fa:	e011      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003904:	d10c      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3304      	adds	r3, #4
 800390a:	2101      	movs	r1, #1
 800390c:	4618      	mov	r0, r3
 800390e:	f000 f843 	bl	8003998 <RCCEx_PLLSAI1_Config>
 8003912:	4603      	mov	r3, r0
 8003914:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003916:	7cfb      	ldrb	r3, [r7, #19]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800391c:	7cfb      	ldrb	r3, [r7, #19]
 800391e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01c      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800392c:	4b19      	ldr	r3, [pc, #100]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003932:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800393a:	4916      	ldr	r1, [pc, #88]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800393c:	4313      	orrs	r3, r2
 800393e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800394a:	d10c      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3304      	adds	r3, #4
 8003950:	2102      	movs	r1, #2
 8003952:	4618      	mov	r0, r3
 8003954:	f000 f820 	bl	8003998 <RCCEx_PLLSAI1_Config>
 8003958:	4603      	mov	r3, r0
 800395a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800395c:	7cfb      	ldrb	r3, [r7, #19]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8003962:	7cfb      	ldrb	r3, [r7, #19]
 8003964:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003972:	4b08      	ldr	r3, [pc, #32]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003978:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003980:	4904      	ldr	r1, [pc, #16]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003988:	7cbb      	ldrb	r3, [r7, #18]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40021000 	.word	0x40021000

08003998 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039a6:	4b74      	ldr	r3, [pc, #464]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d018      	beq.n	80039e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039b2:	4b71      	ldr	r3, [pc, #452]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f003 0203 	and.w	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d10d      	bne.n	80039de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
       ||
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d009      	beq.n	80039de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039ca:	4b6b      	ldr	r3, [pc, #428]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	091b      	lsrs	r3, r3, #4
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
       ||
 80039da:	429a      	cmp	r2, r3
 80039dc:	d047      	beq.n	8003a6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	73fb      	strb	r3, [r7, #15]
 80039e2:	e044      	b.n	8003a6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d018      	beq.n	8003a1e <RCCEx_PLLSAI1_Config+0x86>
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d825      	bhi.n	8003a3c <RCCEx_PLLSAI1_Config+0xa4>
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d002      	beq.n	80039fa <RCCEx_PLLSAI1_Config+0x62>
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d009      	beq.n	8003a0c <RCCEx_PLLSAI1_Config+0x74>
 80039f8:	e020      	b.n	8003a3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039fa:	4b5f      	ldr	r3, [pc, #380]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d11d      	bne.n	8003a42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a0a:	e01a      	b.n	8003a42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a0c:	4b5a      	ldr	r3, [pc, #360]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d116      	bne.n	8003a46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a1c:	e013      	b.n	8003a46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a1e:	4b56      	ldr	r3, [pc, #344]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10f      	bne.n	8003a4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a2a:	4b53      	ldr	r3, [pc, #332]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a3a:	e006      	b.n	8003a4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a40:	e004      	b.n	8003a4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a42:	bf00      	nop
 8003a44:	e002      	b.n	8003a4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a46:	bf00      	nop
 8003a48:	e000      	b.n	8003a4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10d      	bne.n	8003a6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a52:	4b49      	ldr	r3, [pc, #292]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6819      	ldr	r1, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	430b      	orrs	r3, r1
 8003a68:	4943      	ldr	r1, [pc, #268]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d17c      	bne.n	8003b6e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a74:	4b40      	ldr	r3, [pc, #256]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a3f      	ldr	r2, [pc, #252]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a80:	f7fe f9f6 	bl	8001e70 <HAL_GetTick>
 8003a84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a86:	e009      	b.n	8003a9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a88:	f7fe f9f2 	bl	8001e70 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d902      	bls.n	8003a9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	73fb      	strb	r3, [r7, #15]
        break;
 8003a9a:	e005      	b.n	8003aa8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a9c:	4b36      	ldr	r3, [pc, #216]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1ef      	bne.n	8003a88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d15f      	bne.n	8003b6e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d110      	bne.n	8003ad6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ab4:	4b30      	ldr	r3, [pc, #192]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003abc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6892      	ldr	r2, [r2, #8]
 8003ac4:	0211      	lsls	r1, r2, #8
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	68d2      	ldr	r2, [r2, #12]
 8003aca:	06d2      	lsls	r2, r2, #27
 8003acc:	430a      	orrs	r2, r1
 8003ace:	492a      	ldr	r1, [pc, #168]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	610b      	str	r3, [r1, #16]
 8003ad4:	e027      	b.n	8003b26 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d112      	bne.n	8003b02 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003adc:	4b26      	ldr	r3, [pc, #152]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ae4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6892      	ldr	r2, [r2, #8]
 8003aec:	0211      	lsls	r1, r2, #8
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6912      	ldr	r2, [r2, #16]
 8003af2:	0852      	lsrs	r2, r2, #1
 8003af4:	3a01      	subs	r2, #1
 8003af6:	0552      	lsls	r2, r2, #21
 8003af8:	430a      	orrs	r2, r1
 8003afa:	491f      	ldr	r1, [pc, #124]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	610b      	str	r3, [r1, #16]
 8003b00:	e011      	b.n	8003b26 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b02:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6892      	ldr	r2, [r2, #8]
 8003b12:	0211      	lsls	r1, r2, #8
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6952      	ldr	r2, [r2, #20]
 8003b18:	0852      	lsrs	r2, r2, #1
 8003b1a:	3a01      	subs	r2, #1
 8003b1c:	0652      	lsls	r2, r2, #25
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	4915      	ldr	r1, [pc, #84]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b26:	4b14      	ldr	r3, [pc, #80]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a13      	ldr	r2, [pc, #76]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b32:	f7fe f99d 	bl	8001e70 <HAL_GetTick>
 8003b36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b38:	e009      	b.n	8003b4e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b3a:	f7fe f999 	bl	8001e70 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d902      	bls.n	8003b4e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	73fb      	strb	r3, [r7, #15]
          break;
 8003b4c:	e005      	b.n	8003b5a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b4e:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0ef      	beq.n	8003b3a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d106      	bne.n	8003b6e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b60:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	4903      	ldr	r1, [pc, #12]	; (8003b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40021000 	.word	0x40021000

08003b7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e095      	b.n	8003cba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d108      	bne.n	8003ba8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b9e:	d009      	beq.n	8003bb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	61da      	str	r2, [r3, #28]
 8003ba6:	e005      	b.n	8003bb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f877 	bl	8003cc2 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bf4:	d902      	bls.n	8003bfc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	e002      	b.n	8003c02 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c00:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c0a:	d007      	beq.n	8003c1c <HAL_SPI_Init+0xa0>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c14:	d002      	beq.n	8003c1c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5e:	ea42 0103 	orr.w	r1, r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c66:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	0c1b      	lsrs	r3, r3, #16
 8003c78:	f003 0204 	and.w	r2, r3, #4
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c98:	ea42 0103 	orr.w	r1, r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b08a      	sub	sp, #40	; 0x28
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	607a      	str	r2, [r7, #4]
 8003ce2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_SPI_TransmitReceive+0x26>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e1fb      	b.n	80040f4 <HAL_SPI_TransmitReceive+0x41e>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d04:	f7fe f8b4 	bl	8001e70 <HAL_GetTick>
 8003d08:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d10:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003d18:	887b      	ldrh	r3, [r7, #2]
 8003d1a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003d1c:	887b      	ldrh	r3, [r7, #2]
 8003d1e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d20:	7efb      	ldrb	r3, [r7, #27]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d00e      	beq.n	8003d44 <HAL_SPI_TransmitReceive+0x6e>
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d2c:	d106      	bne.n	8003d3c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d102      	bne.n	8003d3c <HAL_SPI_TransmitReceive+0x66>
 8003d36:	7efb      	ldrb	r3, [r7, #27]
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d003      	beq.n	8003d44 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d42:	e1cd      	b.n	80040e0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d005      	beq.n	8003d56 <HAL_SPI_TransmitReceive+0x80>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <HAL_SPI_TransmitReceive+0x80>
 8003d50:	887b      	ldrh	r3, [r7, #2]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d103      	bne.n	8003d5e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d5c:	e1c0      	b.n	80040e0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d003      	beq.n	8003d72 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2205      	movs	r2, #5
 8003d6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	887a      	ldrh	r2, [r7, #2]
 8003d82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	887a      	ldrh	r2, [r7, #2]
 8003d8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	887a      	ldrh	r2, [r7, #2]
 8003d98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	887a      	ldrh	r2, [r7, #2]
 8003d9e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003db4:	d802      	bhi.n	8003dbc <HAL_SPI_TransmitReceive+0xe6>
 8003db6:	8a3b      	ldrh	r3, [r7, #16]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d908      	bls.n	8003dce <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dca:	605a      	str	r2, [r3, #4]
 8003dcc:	e007      	b.n	8003dde <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ddc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de8:	2b40      	cmp	r3, #64	; 0x40
 8003dea:	d007      	beq.n	8003dfc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e04:	d97c      	bls.n	8003f00 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <HAL_SPI_TransmitReceive+0x13e>
 8003e0e:	8a7b      	ldrh	r3, [r7, #18]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d169      	bne.n	8003ee8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	881a      	ldrh	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	1c9a      	adds	r2, r3, #2
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e38:	e056      	b.n	8003ee8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d11b      	bne.n	8003e80 <HAL_SPI_TransmitReceive+0x1aa>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d016      	beq.n	8003e80 <HAL_SPI_TransmitReceive+0x1aa>
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d113      	bne.n	8003e80 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5c:	881a      	ldrh	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	1c9a      	adds	r2, r3, #2
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d11c      	bne.n	8003ec8 <HAL_SPI_TransmitReceive+0x1f2>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d016      	beq.n	8003ec8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	b292      	uxth	r2, r2
 8003ea6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	1c9a      	adds	r2, r3, #2
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ec8:	f7fd ffd2 	bl	8001e70 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d807      	bhi.n	8003ee8 <HAL_SPI_TransmitReceive+0x212>
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ede:	d003      	beq.n	8003ee8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003ee6:	e0fb      	b.n	80040e0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1a3      	bne.n	8003e3a <HAL_SPI_TransmitReceive+0x164>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d19d      	bne.n	8003e3a <HAL_SPI_TransmitReceive+0x164>
 8003efe:	e0df      	b.n	80040c0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_SPI_TransmitReceive+0x23a>
 8003f08:	8a7b      	ldrh	r3, [r7, #18]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	f040 80cb 	bne.w	80040a6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d912      	bls.n	8003f40 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	881a      	ldrh	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	1c9a      	adds	r2, r3, #2
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	3b02      	subs	r3, #2
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f3e:	e0b2      	b.n	80040a6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	330c      	adds	r3, #12
 8003f4a:	7812      	ldrb	r2, [r2, #0]
 8003f4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f52:	1c5a      	adds	r2, r3, #1
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f66:	e09e      	b.n	80040a6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d134      	bne.n	8003fe0 <HAL_SPI_TransmitReceive+0x30a>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d02f      	beq.n	8003fe0 <HAL_SPI_TransmitReceive+0x30a>
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d12c      	bne.n	8003fe0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d912      	bls.n	8003fb6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f94:	881a      	ldrh	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa0:	1c9a      	adds	r2, r3, #2
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b02      	subs	r3, #2
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fb4:	e012      	b.n	8003fdc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	330c      	adds	r3, #12
 8003fc0:	7812      	ldrb	r2, [r2, #0]
 8003fc2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d148      	bne.n	8004080 <HAL_SPI_TransmitReceive+0x3aa>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d042      	beq.n	8004080 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b01      	cmp	r3, #1
 8004004:	d923      	bls.n	800404e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	b292      	uxth	r2, r2
 8004012:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	1c9a      	adds	r2, r3, #2
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004024:	b29b      	uxth	r3, r3
 8004026:	3b02      	subs	r3, #2
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004036:	b29b      	uxth	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	d81f      	bhi.n	800407c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800404a:	605a      	str	r2, [r3, #4]
 800404c:	e016      	b.n	800407c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f103 020c 	add.w	r2, r3, #12
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	7812      	ldrb	r2, [r2, #0]
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004070:	b29b      	uxth	r3, r3
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800407c:	2301      	movs	r3, #1
 800407e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004080:	f7fd fef6 	bl	8001e70 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800408c:	429a      	cmp	r2, r3
 800408e:	d803      	bhi.n	8004098 <HAL_SPI_TransmitReceive+0x3c2>
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004096:	d102      	bne.n	800409e <HAL_SPI_TransmitReceive+0x3c8>
 8004098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409a:	2b00      	cmp	r3, #0
 800409c:	d103      	bne.n	80040a6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80040a4:	e01c      	b.n	80040e0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f47f af5b 	bne.w	8003f68 <HAL_SPI_TransmitReceive+0x292>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f47f af54 	bne.w	8003f68 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040c0:	69fa      	ldr	r2, [r7, #28]
 80040c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f945 	bl	8004354 <SPI_EndRxTxTransaction>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d006      	beq.n	80040de <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2220      	movs	r2, #32
 80040da:	661a      	str	r2, [r3, #96]	; 0x60
 80040dc:	e000      	b.n	80040e0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80040de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80040f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3728      	adds	r7, #40	; 0x28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800410a:	b2db      	uxtb	r3, r3
}
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b088      	sub	sp, #32
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	4613      	mov	r3, r2
 8004126:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004128:	f7fd fea2 	bl	8001e70 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	4413      	add	r3, r2
 8004136:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004138:	f7fd fe9a 	bl	8001e70 <HAL_GetTick>
 800413c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800413e:	4b39      	ldr	r3, [pc, #228]	; (8004224 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	015b      	lsls	r3, r3, #5
 8004144:	0d1b      	lsrs	r3, r3, #20
 8004146:	69fa      	ldr	r2, [r7, #28]
 8004148:	fb02 f303 	mul.w	r3, r2, r3
 800414c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800414e:	e054      	b.n	80041fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004156:	d050      	beq.n	80041fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004158:	f7fd fe8a 	bl	8001e70 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	429a      	cmp	r2, r3
 8004166:	d902      	bls.n	800416e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d13d      	bne.n	80041ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800417c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004186:	d111      	bne.n	80041ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004190:	d004      	beq.n	800419c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800419a:	d107      	bne.n	80041ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b4:	d10f      	bne.n	80041d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e017      	b.n	800421a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4013      	ands	r3, r2
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	429a      	cmp	r2, r3
 8004208:	bf0c      	ite	eq
 800420a:	2301      	moveq	r3, #1
 800420c:	2300      	movne	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	461a      	mov	r2, r3
 8004212:	79fb      	ldrb	r3, [r7, #7]
 8004214:	429a      	cmp	r2, r3
 8004216:	d19b      	bne.n	8004150 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3720      	adds	r7, #32
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	2000000c 	.word	0x2000000c

08004228 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08a      	sub	sp, #40	; 0x28
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004236:	2300      	movs	r3, #0
 8004238:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800423a:	f7fd fe19 	bl	8001e70 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	4413      	add	r3, r2
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800424a:	f7fd fe11 	bl	8001e70 <HAL_GetTick>
 800424e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	330c      	adds	r3, #12
 8004256:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004258:	4b3d      	ldr	r3, [pc, #244]	; (8004350 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	00da      	lsls	r2, r3, #3
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	0d1b      	lsrs	r3, r3, #20
 8004268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426a:	fb02 f303 	mul.w	r3, r2, r3
 800426e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004270:	e060      	b.n	8004334 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004278:	d107      	bne.n	800428a <SPI_WaitFifoStateUntilTimeout+0x62>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d104      	bne.n	800428a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	b2db      	uxtb	r3, r3
 8004286:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004288:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004290:	d050      	beq.n	8004334 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004292:	f7fd fded 	bl	8001e70 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800429e:	429a      	cmp	r2, r3
 80042a0:	d902      	bls.n	80042a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d13d      	bne.n	8004324 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042c0:	d111      	bne.n	80042e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ca:	d004      	beq.n	80042d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d4:	d107      	bne.n	80042e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ee:	d10f      	bne.n	8004310 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800430e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e010      	b.n	8004346 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	3b01      	subs	r3, #1
 8004332:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	4013      	ands	r3, r2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	429a      	cmp	r2, r3
 8004342:	d196      	bne.n	8004272 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3728      	adds	r7, #40	; 0x28
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	2000000c 	.word	0x2000000c

08004354 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af02      	add	r7, sp, #8
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2200      	movs	r2, #0
 8004368:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f7ff ff5b 	bl	8004228 <SPI_WaitFifoStateUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d007      	beq.n	8004388 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800437c:	f043 0220 	orr.w	r2, r3, #32
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e027      	b.n	80043d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2200      	movs	r2, #0
 8004390:	2180      	movs	r1, #128	; 0x80
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f7ff fec0 	bl	8004118 <SPI_WaitFlagStateUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d007      	beq.n	80043ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a2:	f043 0220 	orr.w	r2, r3, #32
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e014      	b.n	80043d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f7ff ff34 	bl	8004228 <SPI_WaitFifoStateUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ca:	f043 0220 	orr.w	r2, r3, #32
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e000      	b.n	80043d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e040      	b.n	8004474 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d106      	bne.n	8004408 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7fd f8fe 	bl	8001604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2224      	movs	r2, #36	; 0x24
 800440c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0201 	bic.w	r2, r2, #1
 800441c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fc18 	bl	8004c54 <UART_SetConfig>
 8004424:	4603      	mov	r3, r0
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e022      	b.n	8004474 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	2b00      	cmp	r3, #0
 8004434:	d002      	beq.n	800443c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fe66 	bl	8005108 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800444a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800445a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0201 	orr.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 feed 	bl	800524c <UART_CheckIdleState>
 8004472:	4603      	mov	r3, r0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08a      	sub	sp, #40	; 0x28
 8004480:	af02      	add	r7, sp, #8
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	603b      	str	r3, [r7, #0]
 8004488:	4613      	mov	r3, r2
 800448a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004490:	2b20      	cmp	r3, #32
 8004492:	f040 8082 	bne.w	800459a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <HAL_UART_Transmit+0x26>
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e07a      	b.n	800459c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_UART_Transmit+0x38>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e073      	b.n	800459c <HAL_UART_Transmit+0x120>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2221      	movs	r2, #33	; 0x21
 80044c8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044ca:	f7fd fcd1 	bl	8001e70 <HAL_GetTick>
 80044ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	88fa      	ldrh	r2, [r7, #6]
 80044d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	88fa      	ldrh	r2, [r7, #6]
 80044dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e8:	d108      	bne.n	80044fc <HAL_UART_Transmit+0x80>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d104      	bne.n	80044fc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	61bb      	str	r3, [r7, #24]
 80044fa:	e003      	b.n	8004504 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004500:	2300      	movs	r3, #0
 8004502:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800450c:	e02d      	b.n	800456a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2200      	movs	r2, #0
 8004516:	2180      	movs	r1, #128	; 0x80
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 fee0 	bl	80052de <UART_WaitOnFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e039      	b.n	800459c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10b      	bne.n	8004546 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	881a      	ldrh	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800453a:	b292      	uxth	r2, r2
 800453c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	3302      	adds	r3, #2
 8004542:	61bb      	str	r3, [r7, #24]
 8004544:	e008      	b.n	8004558 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	781a      	ldrb	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	b292      	uxth	r2, r2
 8004550:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	3301      	adds	r3, #1
 8004556:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1cb      	bne.n	800450e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2200      	movs	r2, #0
 800457e:	2140      	movs	r1, #64	; 0x40
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 feac 	bl	80052de <UART_WaitOnFlagUntilTimeout>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e005      	b.n	800459c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	e000      	b.n	800459c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800459a:	2302      	movs	r3, #2
  }
}
 800459c:	4618      	mov	r0, r3
 800459e:	3720      	adds	r7, #32
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08a      	sub	sp, #40	; 0x28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	4613      	mov	r3, r2
 80045b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045b6:	2b20      	cmp	r3, #32
 80045b8:	d142      	bne.n	8004640 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <HAL_UART_Receive_IT+0x22>
 80045c0:	88fb      	ldrh	r3, [r7, #6]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e03b      	b.n	8004642 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_UART_Receive_IT+0x34>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e034      	b.n	8004642 <HAL_UART_Receive_IT+0x9e>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a18      	ldr	r2, [pc, #96]	; (800464c <HAL_UART_Receive_IT+0xa8>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d01f      	beq.n	8004630 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d018      	beq.n	8004630 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	613b      	str	r3, [r7, #16]
   return(result);
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	623b      	str	r3, [r7, #32]
 800461e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	69f9      	ldr	r1, [r7, #28]
 8004622:	6a3a      	ldr	r2, [r7, #32]
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	61bb      	str	r3, [r7, #24]
   return(result);
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e6      	bne.n	80045fe <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004630:	88fb      	ldrh	r3, [r7, #6]
 8004632:	461a      	mov	r2, r3
 8004634:	68b9      	ldr	r1, [r7, #8]
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 ff16 	bl	8005468 <UART_Start_Receive_IT>
 800463c:	4603      	mov	r3, r0
 800463e:	e000      	b.n	8004642 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004640:	2302      	movs	r3, #2
  }
}
 8004642:	4618      	mov	r0, r3
 8004644:	3728      	adds	r7, #40	; 0x28
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40008000 	.word	0x40008000

08004650 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b0ba      	sub	sp, #232	; 0xe8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004676:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800467a:	f640 030f 	movw	r3, #2063	; 0x80f
 800467e:	4013      	ands	r3, r2
 8004680:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004684:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004688:	2b00      	cmp	r3, #0
 800468a:	d115      	bne.n	80046b8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800468c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004690:	f003 0320 	and.w	r3, r3, #32
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00f      	beq.n	80046b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800469c:	f003 0320 	and.w	r3, r3, #32
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d009      	beq.n	80046b8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 82a6 	beq.w	8004bfa <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	4798      	blx	r3
      }
      return;
 80046b6:	e2a0      	b.n	8004bfa <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80046b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 8117 	beq.w	80048f0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80046c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80046ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80046d2:	4b85      	ldr	r3, [pc, #532]	; (80048e8 <HAL_UART_IRQHandler+0x298>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 810a 	beq.w	80048f0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d011      	beq.n	800470c <HAL_UART_IRQHandler+0xbc>
 80046e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00b      	beq.n	800470c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2201      	movs	r2, #1
 80046fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004702:	f043 0201 	orr.w	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800470c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d011      	beq.n	800473c <HAL_UART_IRQHandler+0xec>
 8004718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00b      	beq.n	800473c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2202      	movs	r2, #2
 800472a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004732:	f043 0204 	orr.w	r2, r3, #4
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800473c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d011      	beq.n	800476c <HAL_UART_IRQHandler+0x11c>
 8004748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00b      	beq.n	800476c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2204      	movs	r2, #4
 800475a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004762:	f043 0202 	orr.w	r2, r3, #2
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800476c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004770:	f003 0308 	and.w	r3, r3, #8
 8004774:	2b00      	cmp	r3, #0
 8004776:	d017      	beq.n	80047a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800477c:	f003 0320 	and.w	r3, r3, #32
 8004780:	2b00      	cmp	r3, #0
 8004782:	d105      	bne.n	8004790 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004788:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00b      	beq.n	80047a8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2208      	movs	r2, #8
 8004796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800479e:	f043 0208 	orr.w	r2, r3, #8
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d012      	beq.n	80047da <HAL_UART_IRQHandler+0x18a>
 80047b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00c      	beq.n	80047da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047d0:	f043 0220 	orr.w	r2, r3, #32
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 820c 	beq.w	8004bfe <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80047e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ea:	f003 0320 	and.w	r3, r3, #32
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00d      	beq.n	800480e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d007      	beq.n	800480e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004814:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004822:	2b40      	cmp	r3, #64	; 0x40
 8004824:	d005      	beq.n	8004832 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800482a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800482e:	2b00      	cmp	r3, #0
 8004830:	d04f      	beq.n	80048d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fee2 	bl	80055fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004842:	2b40      	cmp	r3, #64	; 0x40
 8004844:	d141      	bne.n	80048ca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3308      	adds	r3, #8
 800484c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004854:	e853 3f00 	ldrex	r3, [r3]
 8004858:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800485c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004864:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3308      	adds	r3, #8
 800486e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004872:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004876:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800487e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800488a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1d9      	bne.n	8004846 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004896:	2b00      	cmp	r3, #0
 8004898:	d013      	beq.n	80048c2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489e:	4a13      	ldr	r2, [pc, #76]	; (80048ec <HAL_UART_IRQHandler+0x29c>)
 80048a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fd fc61 	bl	800216e <HAL_DMA_Abort_IT>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d017      	beq.n	80048e2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80048bc:	4610      	mov	r0, r2
 80048be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c0:	e00f      	b.n	80048e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f9b0 	bl	8004c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c8:	e00b      	b.n	80048e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f9ac 	bl	8004c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d0:	e007      	b.n	80048e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f9a8 	bl	8004c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80048e0:	e18d      	b.n	8004bfe <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e2:	bf00      	nop
    return;
 80048e4:	e18b      	b.n	8004bfe <HAL_UART_IRQHandler+0x5ae>
 80048e6:	bf00      	nop
 80048e8:	04000120 	.word	0x04000120
 80048ec:	080056c3 	.word	0x080056c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	f040 8146 	bne.w	8004b86 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048fe:	f003 0310 	and.w	r3, r3, #16
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 813f 	beq.w	8004b86 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 8138 	beq.w	8004b86 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2210      	movs	r2, #16
 800491c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004928:	2b40      	cmp	r3, #64	; 0x40
 800492a:	f040 80b4 	bne.w	8004a96 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800493a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 815f 	beq.w	8004c02 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800494a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800494e:	429a      	cmp	r2, r3
 8004950:	f080 8157 	bcs.w	8004c02 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800495a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b00      	cmp	r3, #0
 800496c:	f040 8085 	bne.w	8004a7a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800497c:	e853 3f00 	ldrex	r3, [r3]
 8004980:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004984:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800498c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	461a      	mov	r2, r3
 8004996:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800499a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800499e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049aa:	e841 2300 	strex	r3, r2, [r1]
 80049ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1da      	bne.n	8004970 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3308      	adds	r3, #8
 80049c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80049ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3308      	adds	r3, #8
 80049da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e1      	bne.n	80049ba <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3308      	adds	r3, #8
 80049fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a00:	e853 3f00 	ldrex	r3, [r3]
 8004a04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3308      	adds	r3, #8
 8004a16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a22:	e841 2300 	strex	r3, r2, [r1]
 8004a26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1e3      	bne.n	80049f6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a42:	e853 3f00 	ldrex	r3, [r3]
 8004a46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a4a:	f023 0310 	bic.w	r3, r3, #16
 8004a4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	461a      	mov	r2, r3
 8004a58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a5e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a64:	e841 2300 	strex	r3, r2, [r1]
 8004a68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e4      	bne.n	8004a3a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fd fb3c 	bl	80020f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f8d4 	bl	8004c3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a94:	e0b5      	b.n	8004c02 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 80a7 	beq.w	8004c06 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004ab8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 80a2 	beq.w	8004c06 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aca:	e853 3f00 	ldrex	r3, [r3]
 8004ace:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ad6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ae4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ae6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004aea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aec:	e841 2300 	strex	r3, r2, [r1]
 8004af0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e4      	bne.n	8004ac2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3308      	adds	r3, #8
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	623b      	str	r3, [r7, #32]
   return(result);
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	f023 0301 	bic.w	r3, r3, #1
 8004b0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3308      	adds	r3, #8
 8004b18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b1c:	633a      	str	r2, [r7, #48]	; 0x30
 8004b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b24:	e841 2300 	strex	r3, r2, [r1]
 8004b28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e3      	bne.n	8004af8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2220      	movs	r2, #32
 8004b34:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	e853 3f00 	ldrex	r3, [r3]
 8004b4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f023 0310 	bic.w	r3, r3, #16
 8004b56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b64:	61fb      	str	r3, [r7, #28]
 8004b66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b68:	69b9      	ldr	r1, [r7, #24]
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	e841 2300 	strex	r3, r2, [r1]
 8004b70:	617b      	str	r3, [r7, #20]
   return(result);
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1e4      	bne.n	8004b42 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f85c 	bl	8004c3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b84:	e03f      	b.n	8004c06 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00e      	beq.n	8004bb0 <HAL_UART_IRQHandler+0x560>
 8004b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d008      	beq.n	8004bb0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ba6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 ff2a 	bl	8005a02 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bae:	e02d      	b.n	8004c0c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00e      	beq.n	8004bda <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d008      	beq.n	8004bda <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01c      	beq.n	8004c0a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	4798      	blx	r3
    }
    return;
 8004bd8:	e017      	b.n	8004c0a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d012      	beq.n	8004c0c <HAL_UART_IRQHandler+0x5bc>
 8004be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00c      	beq.n	8004c0c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 fd7b 	bl	80056ee <UART_EndTransmit_IT>
    return;
 8004bf8:	e008      	b.n	8004c0c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004bfa:	bf00      	nop
 8004bfc:	e006      	b.n	8004c0c <HAL_UART_IRQHandler+0x5bc>
    return;
 8004bfe:	bf00      	nop
 8004c00:	e004      	b.n	8004c0c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004c02:	bf00      	nop
 8004c04:	e002      	b.n	8004c0c <HAL_UART_IRQHandler+0x5bc>
      return;
 8004c06:	bf00      	nop
 8004c08:	e000      	b.n	8004c0c <HAL_UART_IRQHandler+0x5bc>
    return;
 8004c0a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004c0c:	37e8      	adds	r7, #232	; 0xe8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop

08004c14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c58:	b08a      	sub	sp, #40	; 0x28
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	431a      	orrs	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	4b9e      	ldr	r3, [pc, #632]	; (8004efc <UART_SetConfig+0x2a8>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	6812      	ldr	r2, [r2, #0]
 8004c8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c8c:	430b      	orrs	r3, r1
 8004c8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a93      	ldr	r2, [pc, #588]	; (8004f00 <UART_SetConfig+0x2ac>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d004      	beq.n	8004cc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a8a      	ldr	r2, [pc, #552]	; (8004f04 <UART_SetConfig+0x2b0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d126      	bne.n	8004d2c <UART_SetConfig+0xd8>
 8004cde:	4b8a      	ldr	r3, [pc, #552]	; (8004f08 <UART_SetConfig+0x2b4>)
 8004ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce4:	f003 0303 	and.w	r3, r3, #3
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	d81b      	bhi.n	8004d24 <UART_SetConfig+0xd0>
 8004cec:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <UART_SetConfig+0xa0>)
 8004cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf2:	bf00      	nop
 8004cf4:	08004d05 	.word	0x08004d05
 8004cf8:	08004d15 	.word	0x08004d15
 8004cfc:	08004d0d 	.word	0x08004d0d
 8004d00:	08004d1d 	.word	0x08004d1d
 8004d04:	2301      	movs	r3, #1
 8004d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0a:	e0ab      	b.n	8004e64 <UART_SetConfig+0x210>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d12:	e0a7      	b.n	8004e64 <UART_SetConfig+0x210>
 8004d14:	2304      	movs	r3, #4
 8004d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d1a:	e0a3      	b.n	8004e64 <UART_SetConfig+0x210>
 8004d1c:	2308      	movs	r3, #8
 8004d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d22:	e09f      	b.n	8004e64 <UART_SetConfig+0x210>
 8004d24:	2310      	movs	r3, #16
 8004d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2a:	e09b      	b.n	8004e64 <UART_SetConfig+0x210>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a76      	ldr	r2, [pc, #472]	; (8004f0c <UART_SetConfig+0x2b8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d138      	bne.n	8004da8 <UART_SetConfig+0x154>
 8004d36:	4b74      	ldr	r3, [pc, #464]	; (8004f08 <UART_SetConfig+0x2b4>)
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3c:	f003 030c 	and.w	r3, r3, #12
 8004d40:	2b0c      	cmp	r3, #12
 8004d42:	d82d      	bhi.n	8004da0 <UART_SetConfig+0x14c>
 8004d44:	a201      	add	r2, pc, #4	; (adr r2, 8004d4c <UART_SetConfig+0xf8>)
 8004d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4a:	bf00      	nop
 8004d4c:	08004d81 	.word	0x08004d81
 8004d50:	08004da1 	.word	0x08004da1
 8004d54:	08004da1 	.word	0x08004da1
 8004d58:	08004da1 	.word	0x08004da1
 8004d5c:	08004d91 	.word	0x08004d91
 8004d60:	08004da1 	.word	0x08004da1
 8004d64:	08004da1 	.word	0x08004da1
 8004d68:	08004da1 	.word	0x08004da1
 8004d6c:	08004d89 	.word	0x08004d89
 8004d70:	08004da1 	.word	0x08004da1
 8004d74:	08004da1 	.word	0x08004da1
 8004d78:	08004da1 	.word	0x08004da1
 8004d7c:	08004d99 	.word	0x08004d99
 8004d80:	2300      	movs	r3, #0
 8004d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d86:	e06d      	b.n	8004e64 <UART_SetConfig+0x210>
 8004d88:	2302      	movs	r3, #2
 8004d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8e:	e069      	b.n	8004e64 <UART_SetConfig+0x210>
 8004d90:	2304      	movs	r3, #4
 8004d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d96:	e065      	b.n	8004e64 <UART_SetConfig+0x210>
 8004d98:	2308      	movs	r3, #8
 8004d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9e:	e061      	b.n	8004e64 <UART_SetConfig+0x210>
 8004da0:	2310      	movs	r3, #16
 8004da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da6:	e05d      	b.n	8004e64 <UART_SetConfig+0x210>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a58      	ldr	r2, [pc, #352]	; (8004f10 <UART_SetConfig+0x2bc>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d125      	bne.n	8004dfe <UART_SetConfig+0x1aa>
 8004db2:	4b55      	ldr	r3, [pc, #340]	; (8004f08 <UART_SetConfig+0x2b4>)
 8004db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004dbc:	2b30      	cmp	r3, #48	; 0x30
 8004dbe:	d016      	beq.n	8004dee <UART_SetConfig+0x19a>
 8004dc0:	2b30      	cmp	r3, #48	; 0x30
 8004dc2:	d818      	bhi.n	8004df6 <UART_SetConfig+0x1a2>
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d00a      	beq.n	8004dde <UART_SetConfig+0x18a>
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d814      	bhi.n	8004df6 <UART_SetConfig+0x1a2>
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <UART_SetConfig+0x182>
 8004dd0:	2b10      	cmp	r3, #16
 8004dd2:	d008      	beq.n	8004de6 <UART_SetConfig+0x192>
 8004dd4:	e00f      	b.n	8004df6 <UART_SetConfig+0x1a2>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ddc:	e042      	b.n	8004e64 <UART_SetConfig+0x210>
 8004dde:	2302      	movs	r3, #2
 8004de0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de4:	e03e      	b.n	8004e64 <UART_SetConfig+0x210>
 8004de6:	2304      	movs	r3, #4
 8004de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dec:	e03a      	b.n	8004e64 <UART_SetConfig+0x210>
 8004dee:	2308      	movs	r3, #8
 8004df0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df4:	e036      	b.n	8004e64 <UART_SetConfig+0x210>
 8004df6:	2310      	movs	r3, #16
 8004df8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfc:	e032      	b.n	8004e64 <UART_SetConfig+0x210>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a3f      	ldr	r2, [pc, #252]	; (8004f00 <UART_SetConfig+0x2ac>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d12a      	bne.n	8004e5e <UART_SetConfig+0x20a>
 8004e08:	4b3f      	ldr	r3, [pc, #252]	; (8004f08 <UART_SetConfig+0x2b4>)
 8004e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e16:	d01a      	beq.n	8004e4e <UART_SetConfig+0x1fa>
 8004e18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e1c:	d81b      	bhi.n	8004e56 <UART_SetConfig+0x202>
 8004e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e22:	d00c      	beq.n	8004e3e <UART_SetConfig+0x1ea>
 8004e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e28:	d815      	bhi.n	8004e56 <UART_SetConfig+0x202>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <UART_SetConfig+0x1e2>
 8004e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e32:	d008      	beq.n	8004e46 <UART_SetConfig+0x1f2>
 8004e34:	e00f      	b.n	8004e56 <UART_SetConfig+0x202>
 8004e36:	2300      	movs	r3, #0
 8004e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3c:	e012      	b.n	8004e64 <UART_SetConfig+0x210>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e44:	e00e      	b.n	8004e64 <UART_SetConfig+0x210>
 8004e46:	2304      	movs	r3, #4
 8004e48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4c:	e00a      	b.n	8004e64 <UART_SetConfig+0x210>
 8004e4e:	2308      	movs	r3, #8
 8004e50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e54:	e006      	b.n	8004e64 <UART_SetConfig+0x210>
 8004e56:	2310      	movs	r3, #16
 8004e58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5c:	e002      	b.n	8004e64 <UART_SetConfig+0x210>
 8004e5e:	2310      	movs	r3, #16
 8004e60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a25      	ldr	r2, [pc, #148]	; (8004f00 <UART_SetConfig+0x2ac>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	f040 808a 	bne.w	8004f84 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d824      	bhi.n	8004ec2 <UART_SetConfig+0x26e>
 8004e78:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <UART_SetConfig+0x22c>)
 8004e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7e:	bf00      	nop
 8004e80:	08004ea5 	.word	0x08004ea5
 8004e84:	08004ec3 	.word	0x08004ec3
 8004e88:	08004ead 	.word	0x08004ead
 8004e8c:	08004ec3 	.word	0x08004ec3
 8004e90:	08004eb3 	.word	0x08004eb3
 8004e94:	08004ec3 	.word	0x08004ec3
 8004e98:	08004ec3 	.word	0x08004ec3
 8004e9c:	08004ec3 	.word	0x08004ec3
 8004ea0:	08004ebb 	.word	0x08004ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea4:	f7fe fad4 	bl	8003450 <HAL_RCC_GetPCLK1Freq>
 8004ea8:	61f8      	str	r0, [r7, #28]
        break;
 8004eaa:	e010      	b.n	8004ece <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eac:	4b19      	ldr	r3, [pc, #100]	; (8004f14 <UART_SetConfig+0x2c0>)
 8004eae:	61fb      	str	r3, [r7, #28]
        break;
 8004eb0:	e00d      	b.n	8004ece <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eb2:	f7fe fa35 	bl	8003320 <HAL_RCC_GetSysClockFreq>
 8004eb6:	61f8      	str	r0, [r7, #28]
        break;
 8004eb8:	e009      	b.n	8004ece <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ebe:	61fb      	str	r3, [r7, #28]
        break;
 8004ec0:	e005      	b.n	8004ece <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ecc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 8109 	beq.w	80050e8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	4413      	add	r3, r2
 8004ee0:	69fa      	ldr	r2, [r7, #28]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d305      	bcc.n	8004ef2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d912      	bls.n	8004f18 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ef8:	e0f6      	b.n	80050e8 <UART_SetConfig+0x494>
 8004efa:	bf00      	nop
 8004efc:	efff69f3 	.word	0xefff69f3
 8004f00:	40008000 	.word	0x40008000
 8004f04:	40013800 	.word	0x40013800
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	40004400 	.word	0x40004400
 8004f10:	40004800 	.word	0x40004800
 8004f14:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	461c      	mov	r4, r3
 8004f1e:	4615      	mov	r5, r2
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	022b      	lsls	r3, r5, #8
 8004f2a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f2e:	0222      	lsls	r2, r4, #8
 8004f30:	68f9      	ldr	r1, [r7, #12]
 8004f32:	6849      	ldr	r1, [r1, #4]
 8004f34:	0849      	lsrs	r1, r1, #1
 8004f36:	2000      	movs	r0, #0
 8004f38:	4688      	mov	r8, r1
 8004f3a:	4681      	mov	r9, r0
 8004f3c:	eb12 0a08 	adds.w	sl, r2, r8
 8004f40:	eb43 0b09 	adc.w	fp, r3, r9
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	607a      	str	r2, [r7, #4]
 8004f4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f52:	4650      	mov	r0, sl
 8004f54:	4659      	mov	r1, fp
 8004f56:	f7fb f96b 	bl	8000230 <__aeabi_uldivmod>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4613      	mov	r3, r2
 8004f60:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f68:	d308      	bcc.n	8004f7c <UART_SetConfig+0x328>
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f70:	d204      	bcs.n	8004f7c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	60da      	str	r2, [r3, #12]
 8004f7a:	e0b5      	b.n	80050e8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f82:	e0b1      	b.n	80050e8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f8c:	d15d      	bne.n	800504a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004f8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d827      	bhi.n	8004fe6 <UART_SetConfig+0x392>
 8004f96:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <UART_SetConfig+0x348>)
 8004f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9c:	08004fc1 	.word	0x08004fc1
 8004fa0:	08004fc9 	.word	0x08004fc9
 8004fa4:	08004fd1 	.word	0x08004fd1
 8004fa8:	08004fe7 	.word	0x08004fe7
 8004fac:	08004fd7 	.word	0x08004fd7
 8004fb0:	08004fe7 	.word	0x08004fe7
 8004fb4:	08004fe7 	.word	0x08004fe7
 8004fb8:	08004fe7 	.word	0x08004fe7
 8004fbc:	08004fdf 	.word	0x08004fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fc0:	f7fe fa46 	bl	8003450 <HAL_RCC_GetPCLK1Freq>
 8004fc4:	61f8      	str	r0, [r7, #28]
        break;
 8004fc6:	e014      	b.n	8004ff2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc8:	f7fe fa58 	bl	800347c <HAL_RCC_GetPCLK2Freq>
 8004fcc:	61f8      	str	r0, [r7, #28]
        break;
 8004fce:	e010      	b.n	8004ff2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fd0:	4b4c      	ldr	r3, [pc, #304]	; (8005104 <UART_SetConfig+0x4b0>)
 8004fd2:	61fb      	str	r3, [r7, #28]
        break;
 8004fd4:	e00d      	b.n	8004ff2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fd6:	f7fe f9a3 	bl	8003320 <HAL_RCC_GetSysClockFreq>
 8004fda:	61f8      	str	r0, [r7, #28]
        break;
 8004fdc:	e009      	b.n	8004ff2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fe2:	61fb      	str	r3, [r7, #28]
        break;
 8004fe4:	e005      	b.n	8004ff2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ff0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d077      	beq.n	80050e8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	005a      	lsls	r2, r3, #1
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	085b      	lsrs	r3, r3, #1
 8005002:	441a      	add	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	fbb2 f3f3 	udiv	r3, r2, r3
 800500c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	2b0f      	cmp	r3, #15
 8005012:	d916      	bls.n	8005042 <UART_SetConfig+0x3ee>
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800501a:	d212      	bcs.n	8005042 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	b29b      	uxth	r3, r3
 8005020:	f023 030f 	bic.w	r3, r3, #15
 8005024:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	085b      	lsrs	r3, r3, #1
 800502a:	b29b      	uxth	r3, r3
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	b29a      	uxth	r2, r3
 8005032:	8afb      	ldrh	r3, [r7, #22]
 8005034:	4313      	orrs	r3, r2
 8005036:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	8afa      	ldrh	r2, [r7, #22]
 800503e:	60da      	str	r2, [r3, #12]
 8005040:	e052      	b.n	80050e8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005048:	e04e      	b.n	80050e8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800504a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800504e:	2b08      	cmp	r3, #8
 8005050:	d827      	bhi.n	80050a2 <UART_SetConfig+0x44e>
 8005052:	a201      	add	r2, pc, #4	; (adr r2, 8005058 <UART_SetConfig+0x404>)
 8005054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005058:	0800507d 	.word	0x0800507d
 800505c:	08005085 	.word	0x08005085
 8005060:	0800508d 	.word	0x0800508d
 8005064:	080050a3 	.word	0x080050a3
 8005068:	08005093 	.word	0x08005093
 800506c:	080050a3 	.word	0x080050a3
 8005070:	080050a3 	.word	0x080050a3
 8005074:	080050a3 	.word	0x080050a3
 8005078:	0800509b 	.word	0x0800509b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800507c:	f7fe f9e8 	bl	8003450 <HAL_RCC_GetPCLK1Freq>
 8005080:	61f8      	str	r0, [r7, #28]
        break;
 8005082:	e014      	b.n	80050ae <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005084:	f7fe f9fa 	bl	800347c <HAL_RCC_GetPCLK2Freq>
 8005088:	61f8      	str	r0, [r7, #28]
        break;
 800508a:	e010      	b.n	80050ae <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800508c:	4b1d      	ldr	r3, [pc, #116]	; (8005104 <UART_SetConfig+0x4b0>)
 800508e:	61fb      	str	r3, [r7, #28]
        break;
 8005090:	e00d      	b.n	80050ae <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005092:	f7fe f945 	bl	8003320 <HAL_RCC_GetSysClockFreq>
 8005096:	61f8      	str	r0, [r7, #28]
        break;
 8005098:	e009      	b.n	80050ae <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800509a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800509e:	61fb      	str	r3, [r7, #28]
        break;
 80050a0:	e005      	b.n	80050ae <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050ac:	bf00      	nop
    }

    if (pclk != 0U)
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d019      	beq.n	80050e8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	085a      	lsrs	r2, r3, #1
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	441a      	add	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	2b0f      	cmp	r3, #15
 80050cc:	d909      	bls.n	80050e2 <UART_SetConfig+0x48e>
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d4:	d205      	bcs.n	80050e2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60da      	str	r2, [r3, #12]
 80050e0:	e002      	b.n	80050e8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80050f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3728      	adds	r7, #40	; 0x28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005102:	bf00      	nop
 8005104:	00f42400 	.word	0x00f42400

08005108 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00a      	beq.n	8005132 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	f003 0310 	and.w	r3, r3, #16
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d01a      	beq.n	800521e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005206:	d10a      	bne.n	800521e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	605a      	str	r2, [r3, #4]
  }
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af02      	add	r7, sp, #8
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800525c:	f7fc fe08 	bl	8001e70 <HAL_GetTick>
 8005260:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0308 	and.w	r3, r3, #8
 800526c:	2b08      	cmp	r3, #8
 800526e:	d10e      	bne.n	800528e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005270:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f82d 	bl	80052de <UART_WaitOnFlagUntilTimeout>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e023      	b.n	80052d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b04      	cmp	r3, #4
 800529a:	d10e      	bne.n	80052ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800529c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f817 	bl	80052de <UART_WaitOnFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e00d      	b.n	80052d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2220      	movs	r2, #32
 80052be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2220      	movs	r2, #32
 80052c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b09c      	sub	sp, #112	; 0x70
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	60f8      	str	r0, [r7, #12]
 80052e6:	60b9      	str	r1, [r7, #8]
 80052e8:	603b      	str	r3, [r7, #0]
 80052ea:	4613      	mov	r3, r2
 80052ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ee:	e0a5      	b.n	800543c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052f6:	f000 80a1 	beq.w	800543c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fa:	f7fc fdb9 	bl	8001e70 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005306:	429a      	cmp	r2, r3
 8005308:	d302      	bcc.n	8005310 <UART_WaitOnFlagUntilTimeout+0x32>
 800530a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800530c:	2b00      	cmp	r3, #0
 800530e:	d13e      	bne.n	800538e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800531e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005320:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005324:	667b      	str	r3, [r7, #100]	; 0x64
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800532e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005330:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005334:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800533c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e6      	bne.n	8005310 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3308      	adds	r3, #8
 8005348:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534c:	e853 3f00 	ldrex	r3, [r3]
 8005350:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005354:	f023 0301 	bic.w	r3, r3, #1
 8005358:	663b      	str	r3, [r7, #96]	; 0x60
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3308      	adds	r3, #8
 8005360:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005362:	64ba      	str	r2, [r7, #72]	; 0x48
 8005364:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005366:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800536a:	e841 2300 	strex	r3, r2, [r1]
 800536e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1e5      	bne.n	8005342 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2220      	movs	r2, #32
 800537a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2220      	movs	r2, #32
 8005380:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e067      	b.n	800545e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0304 	and.w	r3, r3, #4
 8005398:	2b00      	cmp	r3, #0
 800539a:	d04f      	beq.n	800543c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053aa:	d147      	bne.n	800543c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053b4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053be:	e853 3f00 	ldrex	r3, [r3]
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	461a      	mov	r2, r3
 80053d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d4:	637b      	str	r3, [r7, #52]	; 0x34
 80053d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053dc:	e841 2300 	strex	r3, r2, [r1]
 80053e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1e6      	bne.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3308      	adds	r3, #8
 80053ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	e853 3f00 	ldrex	r3, [r3]
 80053f6:	613b      	str	r3, [r7, #16]
   return(result);
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f023 0301 	bic.w	r3, r3, #1
 80053fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3308      	adds	r3, #8
 8005406:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005408:	623a      	str	r2, [r7, #32]
 800540a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540c:	69f9      	ldr	r1, [r7, #28]
 800540e:	6a3a      	ldr	r2, [r7, #32]
 8005410:	e841 2300 	strex	r3, r2, [r1]
 8005414:	61bb      	str	r3, [r7, #24]
   return(result);
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1e5      	bne.n	80053e8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2220      	movs	r2, #32
 8005420:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2220      	movs	r2, #32
 8005426:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2220      	movs	r2, #32
 800542c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e010      	b.n	800545e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69da      	ldr	r2, [r3, #28]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	4013      	ands	r3, r2
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	429a      	cmp	r2, r3
 800544a:	bf0c      	ite	eq
 800544c:	2301      	moveq	r3, #1
 800544e:	2300      	movne	r3, #0
 8005450:	b2db      	uxtb	r3, r3
 8005452:	461a      	mov	r2, r3
 8005454:	79fb      	ldrb	r3, [r7, #7]
 8005456:	429a      	cmp	r2, r3
 8005458:	f43f af4a 	beq.w	80052f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3770      	adds	r7, #112	; 0x70
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
	...

08005468 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005468:	b480      	push	{r7}
 800546a:	b097      	sub	sp, #92	; 0x5c
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	4613      	mov	r3, r2
 8005474:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	88fa      	ldrh	r2, [r7, #6]
 8005480:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	88fa      	ldrh	r2, [r7, #6]
 8005488:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549a:	d10e      	bne.n	80054ba <UART_Start_Receive_IT+0x52>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d105      	bne.n	80054b0 <UART_Start_Receive_IT+0x48>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80054aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054ae:	e02d      	b.n	800550c <UART_Start_Receive_IT+0xa4>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	22ff      	movs	r2, #255	; 0xff
 80054b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054b8:	e028      	b.n	800550c <UART_Start_Receive_IT+0xa4>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10d      	bne.n	80054de <UART_Start_Receive_IT+0x76>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d104      	bne.n	80054d4 <UART_Start_Receive_IT+0x6c>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	22ff      	movs	r2, #255	; 0xff
 80054ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054d2:	e01b      	b.n	800550c <UART_Start_Receive_IT+0xa4>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	227f      	movs	r2, #127	; 0x7f
 80054d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054dc:	e016      	b.n	800550c <UART_Start_Receive_IT+0xa4>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054e6:	d10d      	bne.n	8005504 <UART_Start_Receive_IT+0x9c>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d104      	bne.n	80054fa <UART_Start_Receive_IT+0x92>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	227f      	movs	r2, #127	; 0x7f
 80054f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054f8:	e008      	b.n	800550c <UART_Start_Receive_IT+0xa4>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	223f      	movs	r2, #63	; 0x3f
 80054fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005502:	e003      	b.n	800550c <UART_Start_Receive_IT+0xa4>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2222      	movs	r2, #34	; 0x22
 8005518:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3308      	adds	r3, #8
 8005520:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005524:	e853 3f00 	ldrex	r3, [r3]
 8005528:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800552a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552c:	f043 0301 	orr.w	r3, r3, #1
 8005530:	657b      	str	r3, [r7, #84]	; 0x54
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3308      	adds	r3, #8
 8005538:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800553a:	64ba      	str	r2, [r7, #72]	; 0x48
 800553c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005540:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005542:	e841 2300 	strex	r3, r2, [r1]
 8005546:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1e5      	bne.n	800551a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005556:	d107      	bne.n	8005568 <UART_Start_Receive_IT+0x100>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d103      	bne.n	8005568 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4a24      	ldr	r2, [pc, #144]	; (80055f4 <UART_Start_Receive_IT+0x18c>)
 8005564:	665a      	str	r2, [r3, #100]	; 0x64
 8005566:	e002      	b.n	800556e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4a23      	ldr	r2, [pc, #140]	; (80055f8 <UART_Start_Receive_IT+0x190>)
 800556c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d019      	beq.n	80055b2 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005586:	e853 3f00 	ldrex	r3, [r3]
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	461a      	mov	r2, r3
 800559a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800559c:	637b      	str	r3, [r7, #52]	; 0x34
 800559e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e6      	bne.n	800557e <UART_Start_Receive_IT+0x116>
 80055b0:	e018      	b.n	80055e4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	e853 3f00 	ldrex	r3, [r3]
 80055be:	613b      	str	r3, [r7, #16]
   return(result);
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	f043 0320 	orr.w	r3, r3, #32
 80055c6:	653b      	str	r3, [r7, #80]	; 0x50
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	461a      	mov	r2, r3
 80055ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055d0:	623b      	str	r3, [r7, #32]
 80055d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d4:	69f9      	ldr	r1, [r7, #28]
 80055d6:	6a3a      	ldr	r2, [r7, #32]
 80055d8:	e841 2300 	strex	r3, r2, [r1]
 80055dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e6      	bne.n	80055b2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	375c      	adds	r7, #92	; 0x5c
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	080058a3 	.word	0x080058a3
 80055f8:	08005743 	.word	0x08005743

080055fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b095      	sub	sp, #84	; 0x54
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560c:	e853 3f00 	ldrex	r3, [r3]
 8005610:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005614:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005618:	64fb      	str	r3, [r7, #76]	; 0x4c
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005622:	643b      	str	r3, [r7, #64]	; 0x40
 8005624:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005626:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005628:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800562a:	e841 2300 	strex	r3, r2, [r1]
 800562e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1e6      	bne.n	8005604 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3308      	adds	r3, #8
 800563c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	e853 3f00 	ldrex	r3, [r3]
 8005644:	61fb      	str	r3, [r7, #28]
   return(result);
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	f023 0301 	bic.w	r3, r3, #1
 800564c:	64bb      	str	r3, [r7, #72]	; 0x48
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3308      	adds	r3, #8
 8005654:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005656:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005658:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800565c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1e5      	bne.n	8005636 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800566e:	2b01      	cmp	r3, #1
 8005670:	d118      	bne.n	80056a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	e853 3f00 	ldrex	r3, [r3]
 800567e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f023 0310 	bic.w	r3, r3, #16
 8005686:	647b      	str	r3, [r7, #68]	; 0x44
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	461a      	mov	r2, r3
 800568e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005690:	61bb      	str	r3, [r7, #24]
 8005692:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005694:	6979      	ldr	r1, [r7, #20]
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	e841 2300 	strex	r3, r2, [r1]
 800569c:	613b      	str	r3, [r7, #16]
   return(result);
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1e6      	bne.n	8005672 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2220      	movs	r2, #32
 80056a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80056b6:	bf00      	nop
 80056b8:	3754      	adds	r7, #84	; 0x54
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b084      	sub	sp, #16
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f7ff faa1 	bl	8004c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056e6:	bf00      	nop
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b088      	sub	sp, #32
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	e853 3f00 	ldrex	r3, [r3]
 8005702:	60bb      	str	r3, [r7, #8]
   return(result);
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800570a:	61fb      	str	r3, [r7, #28]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	461a      	mov	r2, r3
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	61bb      	str	r3, [r7, #24]
 8005716:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005718:	6979      	ldr	r1, [r7, #20]
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	e841 2300 	strex	r3, r2, [r1]
 8005720:	613b      	str	r3, [r7, #16]
   return(result);
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1e6      	bne.n	80056f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2220      	movs	r2, #32
 800572c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7ff fa6d 	bl	8004c14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800573a:	bf00      	nop
 800573c:	3720      	adds	r7, #32
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b096      	sub	sp, #88	; 0x58
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005750:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005758:	2b22      	cmp	r3, #34	; 0x22
 800575a:	f040 8094 	bne.w	8005886 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005764:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005768:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800576c:	b2d9      	uxtb	r1, r3
 800576e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005772:	b2da      	uxtb	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005778:	400a      	ands	r2, r1
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800578e:	b29b      	uxth	r3, r3
 8005790:	3b01      	subs	r3, #1
 8005792:	b29a      	uxth	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d179      	bne.n	800589a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ae:	e853 3f00 	ldrex	r3, [r3]
 80057b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057ba:	653b      	str	r3, [r7, #80]	; 0x50
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	461a      	mov	r2, r3
 80057c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c4:	647b      	str	r3, [r7, #68]	; 0x44
 80057c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057cc:	e841 2300 	strex	r3, r2, [r1]
 80057d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e6      	bne.n	80057a6 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3308      	adds	r3, #8
 80057de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	e853 3f00 	ldrex	r3, [r3]
 80057e6:	623b      	str	r3, [r7, #32]
   return(result);
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	f023 0301 	bic.w	r3, r3, #1
 80057ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3308      	adds	r3, #8
 80057f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057f8:	633a      	str	r2, [r7, #48]	; 0x30
 80057fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005800:	e841 2300 	strex	r3, r2, [r1]
 8005804:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e5      	bne.n	80057d8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2220      	movs	r2, #32
 8005810:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800581c:	2b01      	cmp	r3, #1
 800581e:	d12e      	bne.n	800587e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	e853 3f00 	ldrex	r3, [r3]
 8005832:	60fb      	str	r3, [r7, #12]
   return(result);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 0310 	bic.w	r3, r3, #16
 800583a:	64bb      	str	r3, [r7, #72]	; 0x48
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	461a      	mov	r2, r3
 8005842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005844:	61fb      	str	r3, [r7, #28]
 8005846:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	69b9      	ldr	r1, [r7, #24]
 800584a:	69fa      	ldr	r2, [r7, #28]
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	617b      	str	r3, [r7, #20]
   return(result);
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e6      	bne.n	8005826 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	f003 0310 	and.w	r3, r3, #16
 8005862:	2b10      	cmp	r3, #16
 8005864:	d103      	bne.n	800586e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2210      	movs	r2, #16
 800586c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005874:	4619      	mov	r1, r3
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7ff f9e0 	bl	8004c3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800587c:	e00d      	b.n	800589a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fb fe8c 	bl	800159c <HAL_UART_RxCpltCallback>
}
 8005884:	e009      	b.n	800589a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	8b1b      	ldrh	r3, [r3, #24]
 800588c:	b29a      	uxth	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f042 0208 	orr.w	r2, r2, #8
 8005896:	b292      	uxth	r2, r2
 8005898:	831a      	strh	r2, [r3, #24]
}
 800589a:	bf00      	nop
 800589c:	3758      	adds	r7, #88	; 0x58
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b096      	sub	sp, #88	; 0x58
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058b8:	2b22      	cmp	r3, #34	; 0x22
 80058ba:	f040 8094 	bne.w	80059e6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80058c4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058cc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80058ce:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80058d2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80058d6:	4013      	ands	r3, r2
 80058d8:	b29a      	uxth	r2, r3
 80058da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e2:	1c9a      	adds	r2, r3, #2
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	3b01      	subs	r3, #1
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d179      	bne.n	80059fa <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800590e:	e853 3f00 	ldrex	r3, [r3]
 8005912:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005916:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800591a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	461a      	mov	r2, r3
 8005922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005924:	643b      	str	r3, [r7, #64]	; 0x40
 8005926:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005928:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800592a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800592c:	e841 2300 	strex	r3, r2, [r1]
 8005930:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1e6      	bne.n	8005906 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3308      	adds	r3, #8
 800593e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	e853 3f00 	ldrex	r3, [r3]
 8005946:	61fb      	str	r3, [r7, #28]
   return(result);
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	f023 0301 	bic.w	r3, r3, #1
 800594e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3308      	adds	r3, #8
 8005956:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005958:	62fa      	str	r2, [r7, #44]	; 0x2c
 800595a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800595e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005960:	e841 2300 	strex	r3, r2, [r1]
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e5      	bne.n	8005938 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2220      	movs	r2, #32
 8005970:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800597c:	2b01      	cmp	r3, #1
 800597e:	d12e      	bne.n	80059de <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	e853 3f00 	ldrex	r3, [r3]
 8005992:	60bb      	str	r3, [r7, #8]
   return(result);
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	f023 0310 	bic.w	r3, r3, #16
 800599a:	647b      	str	r3, [r7, #68]	; 0x44
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	461a      	mov	r2, r3
 80059a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a8:	6979      	ldr	r1, [r7, #20]
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	e841 2300 	strex	r3, r2, [r1]
 80059b0:	613b      	str	r3, [r7, #16]
   return(result);
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1e6      	bne.n	8005986 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	f003 0310 	and.w	r3, r3, #16
 80059c2:	2b10      	cmp	r3, #16
 80059c4:	d103      	bne.n	80059ce <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2210      	movs	r2, #16
 80059cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059d4:	4619      	mov	r1, r3
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7ff f930 	bl	8004c3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059dc:	e00d      	b.n	80059fa <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7fb fddc 	bl	800159c <HAL_UART_RxCpltCallback>
}
 80059e4:	e009      	b.n	80059fa <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	8b1b      	ldrh	r3, [r3, #24]
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0208 	orr.w	r2, r2, #8
 80059f6:	b292      	uxth	r2, r2
 80059f8:	831a      	strh	r2, [r3, #24]
}
 80059fa:	bf00      	nop
 80059fc:	3758      	adds	r7, #88	; 0x58
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a0a:	bf00      	nop
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b08c      	sub	sp, #48	; 0x30
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	603b      	str	r3, [r7, #0]
 8005a1e:	4603      	mov	r3, r0
 8005a20:	71fb      	strb	r3, [r7, #7]
 8005a22:	460b      	mov	r3, r1
 8005a24:	71bb      	strb	r3, [r7, #6]
 8005a26:	4613      	mov	r3, r2
 8005a28:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8005a2a:	79fb      	ldrb	r3, [r7, #7]
 8005a2c:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8005a2e:	79bb      	ldrb	r3, [r7, #6]
 8005a30:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8005a32:	797b      	ldrb	r3, [r7, #5]
 8005a34:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005a36:	f107 030c 	add.w	r3, r7, #12
 8005a3a:	2207      	movs	r2, #7
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f001 fc5e 	bl	8007300 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005a44:	f107 0318 	add.w	r3, r7, #24
 8005a48:	2218      	movs	r2, #24
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f001 fc57 	bl	8007300 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005a52:	233f      	movs	r3, #63	; 0x3f
 8005a54:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8005a56:	238a      	movs	r3, #138	; 0x8a
 8005a58:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8005a5a:	f107 0314 	add.w	r3, r7, #20
 8005a5e:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8005a60:	2303      	movs	r3, #3
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8005a64:	f107 030c 	add.w	r3, r7, #12
 8005a68:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8005a6a:	2307      	movs	r3, #7
 8005a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005a6e:	f107 0318 	add.w	r3, r7, #24
 8005a72:	2100      	movs	r1, #0
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 ffd5 	bl	8006a24 <hci_send_req>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	da01      	bge.n	8005a84 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8005a80:	23ff      	movs	r3, #255	; 0xff
 8005a82:	e014      	b.n	8005aae <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8005a84:	7b3b      	ldrb	r3, [r7, #12]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8005a8a:	7b3b      	ldrb	r3, [r7, #12]
 8005a8c:	e00f      	b.n	8005aae <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8005a8e:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8005a98:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa0:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8005aa2:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aaa:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3730      	adds	r7, #48	; 0x30
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b08e      	sub	sp, #56	; 0x38
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	603b      	str	r3, [r7, #0]
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8005ac6:	7bfb      	ldrb	r3, [r7, #15]
 8005ac8:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005aca:	f107 0314 	add.w	r3, r7, #20
 8005ace:	2207      	movs	r2, #7
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f001 fc14 	bl	8007300 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005ad8:	f107 0320 	add.w	r3, r7, #32
 8005adc:	2218      	movs	r2, #24
 8005ade:	2100      	movs	r1, #0
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f001 fc0d 	bl	8007300 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005ae6:	233f      	movs	r3, #63	; 0x3f
 8005ae8:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8005aea:	238a      	movs	r3, #138	; 0x8a
 8005aec:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 8005aee:	f107 031c 	add.w	r3, r7, #28
 8005af2:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 8005af4:	2301      	movs	r3, #1
 8005af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8005af8:	f107 0314 	add.w	r3, r7, #20
 8005afc:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8005afe:	2307      	movs	r3, #7
 8005b00:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005b02:	f107 0320 	add.w	r3, r7, #32
 8005b06:	2100      	movs	r1, #0
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 ff8b 	bl	8006a24 <hci_send_req>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	da01      	bge.n	8005b18 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8005b14:	23ff      	movs	r3, #255	; 0xff
 8005b16:	e014      	b.n	8005b42 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8005b18:	7d3b      	ldrb	r3, [r7, #20]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8005b1e:	7d3b      	ldrb	r3, [r7, #20]
 8005b20:	e00f      	b.n	8005b42 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8005b22:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8005b2c:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8005b36:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3738      	adds	r7, #56	; 0x38
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8005b4a:	b590      	push	{r4, r7, lr}
 8005b4c:	b095      	sub	sp, #84	; 0x54
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	4604      	mov	r4, r0
 8005b52:	4608      	mov	r0, r1
 8005b54:	4611      	mov	r1, r2
 8005b56:	461a      	mov	r2, r3
 8005b58:	4623      	mov	r3, r4
 8005b5a:	71fb      	strb	r3, [r7, #7]
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	80bb      	strh	r3, [r7, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	807b      	strh	r3, [r7, #2]
 8005b64:	4613      	mov	r3, r2
 8005b66:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8005b6e:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8005b72:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8005b76:	4413      	add	r3, r2
 8005b78:	330e      	adds	r3, #14
 8005b7a:	2b28      	cmp	r3, #40	; 0x28
 8005b7c:	d901      	bls.n	8005b82 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8005b7e:	2342      	movs	r3, #66	; 0x42
 8005b80:	e0c9      	b.n	8005d16 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 8005b82:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005b86:	3350      	adds	r3, #80	; 0x50
 8005b88:	443b      	add	r3, r7
 8005b8a:	79fa      	ldrb	r2, [r7, #7]
 8005b8c:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8005b90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005b94:	3301      	adds	r3, #1
 8005b96:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8005b9a:	88bb      	ldrh	r3, [r7, #4]
 8005b9c:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8005b9e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005ba2:	f107 0208 	add.w	r2, r7, #8
 8005ba6:	4413      	add	r3, r2
 8005ba8:	88ba      	ldrh	r2, [r7, #4]
 8005baa:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8005bac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005bb0:	3302      	adds	r3, #2
 8005bb2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8005bb6:	887b      	ldrh	r3, [r7, #2]
 8005bb8:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8005bba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005bbe:	f107 0208 	add.w	r2, r7, #8
 8005bc2:	4413      	add	r3, r2
 8005bc4:	887a      	ldrh	r2, [r7, #2]
 8005bc6:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8005bc8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005bcc:	3302      	adds	r3, #2
 8005bce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 8005bd2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005bd6:	3350      	adds	r3, #80	; 0x50
 8005bd8:	443b      	add	r3, r7
 8005bda:	79ba      	ldrb	r2, [r7, #6]
 8005bdc:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8005be0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005be4:	3301      	adds	r3, #1
 8005be6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8005bea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005bee:	3350      	adds	r3, #80	; 0x50
 8005bf0:	443b      	add	r3, r7
 8005bf2:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8005bf6:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8005bfa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005bfe:	3301      	adds	r3, #1
 8005c00:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 8005c04:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c08:	3350      	adds	r3, #80	; 0x50
 8005c0a:	443b      	add	r3, r7
 8005c0c:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8005c10:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8005c14:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c18:	3301      	adds	r3, #1
 8005c1a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8005c1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c22:	f107 0208 	add.w	r2, r7, #8
 8005c26:	4413      	add	r3, r2
 8005c28:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8005c2c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f001 fb58 	bl	80072e4 <memcpy>
  indx +=  LocalNameLen;
 8005c34:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005c38:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8005c42:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c46:	3350      	adds	r3, #80	; 0x50
 8005c48:	443b      	add	r3, r7
 8005c4a:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8005c4e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8005c52:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c56:	3301      	adds	r3, #1
 8005c58:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8005c5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c60:	f107 0208 	add.w	r2, r7, #8
 8005c64:	4413      	add	r3, r2
 8005c66:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8005c6a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f001 fb39 	bl	80072e4 <memcpy>
  indx +=  ServiceUUIDLen;  
 8005c72:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005c76:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8005c80:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8005c84:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8005c88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c8c:	f107 0208 	add.w	r2, r7, #8
 8005c90:	4413      	add	r3, r2
 8005c92:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8005c96:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8005c98:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c9c:	3302      	adds	r3, #2
 8005c9e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8005ca2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8005ca6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8005caa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005cae:	f107 0208 	add.w	r2, r7, #8
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8005cb8:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8005cba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005cbe:	3302      	adds	r3, #2
 8005cc0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005cc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005cc8:	2218      	movs	r2, #24
 8005cca:	2100      	movs	r1, #0
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f001 fb17 	bl	8007300 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005cd2:	233f      	movs	r3, #63	; 0x3f
 8005cd4:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8005cd6:	2383      	movs	r3, #131	; 0x83
 8005cd8:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 8005cda:	f107 0308 	add.w	r3, r7, #8
 8005cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 8005ce0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005ce4:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 8005ce6:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8005cea:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 8005cec:	2301      	movs	r3, #1
 8005cee:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8005cf0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 fe94 	bl	8006a24 <hci_send_req>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	da01      	bge.n	8005d06 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 8005d02:	23ff      	movs	r3, #255	; 0xff
 8005d04:	e007      	b.n	8005d16 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 8005d06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d002      	beq.n	8005d14 <aci_gap_set_discoverable+0x1ca>
    return status;
 8005d0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d12:	e000      	b.n	8005d16 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3754      	adds	r7, #84	; 0x54
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd90      	pop	{r4, r7, pc}

08005d1e <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8005d1e:	b590      	push	{r4, r7, lr}
 8005d20:	b091      	sub	sp, #68	; 0x44
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	603a      	str	r2, [r7, #0]
 8005d26:	461a      	mov	r2, r3
 8005d28:	4603      	mov	r3, r0
 8005d2a:	71fb      	strb	r3, [r7, #7]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	71bb      	strb	r3, [r7, #6]
 8005d30:	4613      	mov	r3, r2
 8005d32:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8005d34:	79fb      	ldrb	r3, [r7, #7]
 8005d36:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8005d38:	79bb      	ldrb	r3, [r7, #6]
 8005d3a:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8005d3c:	79bb      	ldrb	r3, [r7, #6]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00a      	beq.n	8005d58 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	f107 030e 	add.w	r3, r7, #14
 8005d48:	6814      	ldr	r4, [r2, #0]
 8005d4a:	6850      	ldr	r0, [r2, #4]
 8005d4c:	6891      	ldr	r1, [r2, #8]
 8005d4e:	68d2      	ldr	r2, [r2, #12]
 8005d50:	601c      	str	r4, [r3, #0]
 8005d52:	6058      	str	r0, [r3, #4]
 8005d54:	6099      	str	r1, [r3, #8]
 8005d56:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8005d58:	797b      	ldrb	r3, [r7, #5]
 8005d5a:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8005d5c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005d60:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8005d62:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8005d66:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8005d6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d6c:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 8005d70:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8005d74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005d78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d7c:	2218      	movs	r2, #24
 8005d7e:	2100      	movs	r1, #0
 8005d80:	4618      	mov	r0, r3
 8005d82:	f001 fabd 	bl	8007300 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005d86:	233f      	movs	r3, #63	; 0x3f
 8005d88:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8005d8a:	2386      	movs	r3, #134	; 0x86
 8005d8c:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 8005d8e:	f107 030c 	add.w	r3, r7, #12
 8005d92:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 8005d94:	231a      	movs	r3, #26
 8005d96:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 8005d98:	f107 030b 	add.w	r3, r7, #11
 8005d9c:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8005da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005da6:	2100      	movs	r1, #0
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 fe3b 	bl	8006a24 <hci_send_req>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	da01      	bge.n	8005db8 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8005db4:	23ff      	movs	r3, #255	; 0xff
 8005db6:	e005      	b.n	8005dc4 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 8005db8:	7afb      	ldrb	r3, [r7, #11]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <aci_gap_set_auth_requirement+0xa4>
    return status;
 8005dbe:	7afb      	ldrb	r3, [r7, #11]
 8005dc0:	e000      	b.n	8005dc4 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3744      	adds	r7, #68	; 0x44
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd90      	pop	{r4, r7, pc}

08005dcc <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b092      	sub	sp, #72	; 0x48
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	607b      	str	r3, [r7, #4]
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	81fb      	strh	r3, [r7, #14]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	81bb      	strh	r3, [r7, #12]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  gap_create_connection_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
 8005de0:	89fb      	ldrh	r3, [r7, #14]
 8005de2:	833b      	strh	r3, [r7, #24]
  cp.scanWindow = htobs(scanWindow);
 8005de4:	89bb      	ldrh	r3, [r7, #12]
 8005de6:	837b      	strh	r3, [r7, #26]
  cp.peer_bdaddr_type = peer_bdaddr_type;
 8005de8:	7afb      	ldrb	r3, [r7, #11]
 8005dea:	773b      	strb	r3, [r7, #28]
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	f107 031d 	add.w	r3, r7, #29
 8005df2:	6811      	ldr	r1, [r2, #0]
 8005df4:	6019      	str	r1, [r3, #0]
 8005df6:	8892      	ldrh	r2, [r2, #4]
 8005df8:	809a      	strh	r2, [r3, #4]
  cp.own_bdaddr_type = own_bdaddr_type;
 8005dfa:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  cp.conn_min_interval = htobs(conn_min_interval);
 8005e02:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005e06:	84bb      	strh	r3, [r7, #36]	; 0x24
  cp.conn_max_interval = htobs(conn_max_interval);
 8005e08:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005e0c:	84fb      	strh	r3, [r7, #38]	; 0x26
  cp.conn_latency = htobs(conn_latency);
 8005e0e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005e12:	853b      	strh	r3, [r7, #40]	; 0x28
  cp.supervision_timeout = htobs(supervision_timeout);
 8005e14:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8005e18:	857b      	strh	r3, [r7, #42]	; 0x2a
  cp.min_conn_length = htobs(min_conn_length);
 8005e1a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e1e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  cp.max_conn_length = htobs(max_conn_length);
 8005e20:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005e24:	85fb      	strh	r3, [r7, #46]	; 0x2e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005e26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005e2a:	2218      	movs	r2, #24
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f001 fa66 	bl	8007300 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005e34:	233f      	movs	r3, #63	; 0x3f
 8005e36:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 8005e38:	239c      	movs	r3, #156	; 0x9c
 8005e3a:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 8005e3c:	f107 0318 	add.w	r3, r7, #24
 8005e40:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = sizeof(cp);
 8005e42:	2318      	movs	r3, #24
 8005e44:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.event = EVT_CMD_STATUS;
 8005e46:	230f      	movs	r3, #15
 8005e48:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 8005e4a:	f107 0317 	add.w	r3, r7, #23
 8005e4e:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8005e50:	2301      	movs	r3, #1
 8005e52:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8005e54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005e58:	2100      	movs	r1, #0
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 fde2 	bl	8006a24 <hci_send_req>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	da01      	bge.n	8005e6a <aci_gap_create_connection+0x9e>
    return BLE_STATUS_TIMEOUT;
 8005e66:	23ff      	movs	r3, #255	; 0xff
 8005e68:	e000      	b.n	8005e6c <aci_gap_create_connection+0xa0>

  return status;
 8005e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3748      	adds	r7, #72	; 0x48
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005e7a:	f107 0308 	add.w	r3, r7, #8
 8005e7e:	2218      	movs	r2, #24
 8005e80:	2100      	movs	r1, #0
 8005e82:	4618      	mov	r0, r3
 8005e84:	f001 fa3c 	bl	8007300 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005e88:	233f      	movs	r3, #63	; 0x3f
 8005e8a:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8005e8c:	f240 1301 	movw	r3, #257	; 0x101
 8005e90:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005e92:	1dfb      	adds	r3, r7, #7
 8005e94:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005e96:	2301      	movs	r3, #1
 8005e98:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8005e9a:	f107 0308 	add.w	r3, r7, #8
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 fdbf 	bl	8006a24 <hci_send_req>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	da01      	bge.n	8005eb0 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8005eac:	23ff      	movs	r3, #255	; 0xff
 8005eae:	e000      	b.n	8005eb2 <aci_gatt_init+0x3e>

  return status;
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3720      	adds	r7, #32
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b090      	sub	sp, #64	; 0x40
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6039      	str	r1, [r7, #0]
 8005ec2:	4611      	mov	r1, r2
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	71fb      	strb	r3, [r7, #7]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	71bb      	strb	r3, [r7, #6]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 8005ed8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005edc:	3340      	adds	r3, #64	; 0x40
 8005ede:	443b      	add	r3, r7
 8005ee0:	79fa      	ldrb	r2, [r7, #7]
 8005ee2:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8005ee6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005eea:	3301      	adds	r3, #1
 8005eec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8005ef0:	79fb      	ldrb	r3, [r7, #7]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d103      	bne.n	8005efe <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005efc:	e002      	b.n	8005f04 <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 8005efe:	2310      	movs	r3, #16
 8005f00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8005f04:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005f08:	f107 020c 	add.w	r2, r7, #12
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005f12:	6839      	ldr	r1, [r7, #0]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f001 f9e5 	bl	80072e4 <memcpy>
  indx +=  uuid_len;
 8005f1a:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8005f1e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f22:	4413      	add	r3, r2
 8005f24:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 8005f28:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005f2c:	3340      	adds	r3, #64	; 0x40
 8005f2e:	443b      	add	r3, r7
 8005f30:	79ba      	ldrb	r2, [r7, #6]
 8005f32:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8005f36:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 8005f40:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005f44:	3340      	adds	r3, #64	; 0x40
 8005f46:	443b      	add	r3, r7
 8005f48:	797a      	ldrb	r2, [r7, #5]
 8005f4a:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8005f4e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005f52:	3301      	adds	r3, #1
 8005f54:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005f58:	f107 0320 	add.w	r3, r7, #32
 8005f5c:	2203      	movs	r2, #3
 8005f5e:	2100      	movs	r1, #0
 8005f60:	4618      	mov	r0, r3
 8005f62:	f001 f9cd 	bl	8007300 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f6a:	2218      	movs	r2, #24
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f001 f9c6 	bl	8007300 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005f74:	233f      	movs	r3, #63	; 0x3f
 8005f76:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8005f78:	f44f 7381 	mov.w	r3, #258	; 0x102
 8005f7c:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 8005f7e:	f107 030c 	add.w	r3, r7, #12
 8005f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 8005f84:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005f88:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 8005f8a:	f107 0320 	add.w	r3, r7, #32
 8005f8e:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8005f90:	2303      	movs	r3, #3
 8005f92:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8005f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f98:	2100      	movs	r1, #0
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 fd42 	bl	8006a24 <hci_send_req>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	da01      	bge.n	8005faa <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 8005fa6:	23ff      	movs	r3, #255	; 0xff
 8005fa8:	e00c      	b.n	8005fc4 <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 8005faa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <aci_gatt_add_serv+0xfe>
    return resp.status;
 8005fb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005fb6:	e005      	b.n	8005fc4 <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 8005fb8:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc0:	801a      	strh	r2, [r3, #0]

  return 0;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3740      	adds	r7, #64	; 0x40
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b092      	sub	sp, #72	; 0x48
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	603a      	str	r2, [r7, #0]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	80fb      	strh	r3, [r7, #6]
 8005fda:	460b      	mov	r3, r1
 8005fdc:	717b      	strb	r3, [r7, #5]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 8005fe8:	88fb      	ldrh	r3, [r7, #6]
 8005fea:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8005fec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005ff0:	f107 020c 	add.w	r2, r7, #12
 8005ff4:	4413      	add	r3, r2
 8005ff6:	88fa      	ldrh	r2, [r7, #6]
 8005ff8:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005ffa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005ffe:	3302      	adds	r3, #2
 8006000:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 8006004:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006008:	3348      	adds	r3, #72	; 0x48
 800600a:	443b      	add	r3, r7
 800600c:	797a      	ldrb	r2, [r7, #5]
 800600e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8006012:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006016:	3301      	adds	r3, #1
 8006018:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800601c:	797b      	ldrb	r3, [r7, #5]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d103      	bne.n	800602a <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8006022:	2302      	movs	r3, #2
 8006024:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006028:	e002      	b.n	8006030 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 800602a:	2310      	movs	r3, #16
 800602c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8006030:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006034:	f107 020c 	add.w	r2, r7, #12
 8006038:	4413      	add	r3, r2
 800603a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800603e:	6839      	ldr	r1, [r7, #0]
 8006040:	4618      	mov	r0, r3
 8006042:	f001 f94f 	bl	80072e4 <memcpy>
  indx +=  uuid_len;
 8006046:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800604a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800604e:	4413      	add	r3, r2
 8006050:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 8006054:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006058:	3348      	adds	r3, #72	; 0x48
 800605a:	443b      	add	r3, r7
 800605c:	793a      	ldrb	r2, [r7, #4]
 800605e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8006062:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006066:	3301      	adds	r3, #1
 8006068:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 800606c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006070:	3348      	adds	r3, #72	; 0x48
 8006072:	443b      	add	r3, r7
 8006074:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8006078:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800607c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006080:	3301      	adds	r3, #1
 8006082:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 8006086:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800608a:	3348      	adds	r3, #72	; 0x48
 800608c:	443b      	add	r3, r7
 800608e:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8006092:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8006096:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800609a:	3301      	adds	r3, #1
 800609c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 80060a0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80060a4:	3348      	adds	r3, #72	; 0x48
 80060a6:	443b      	add	r3, r7
 80060a8:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80060ac:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80060b0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80060b4:	3301      	adds	r3, #1
 80060b6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 80060ba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80060be:	3348      	adds	r3, #72	; 0x48
 80060c0:	443b      	add	r3, r7
 80060c2:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80060c6:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80060ca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80060ce:	3301      	adds	r3, #1
 80060d0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 80060d4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80060d8:	3348      	adds	r3, #72	; 0x48
 80060da:	443b      	add	r3, r7
 80060dc:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80060e0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80060e4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80060e8:	3301      	adds	r3, #1
 80060ea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80060ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060f2:	2203      	movs	r2, #3
 80060f4:	2100      	movs	r1, #0
 80060f6:	4618      	mov	r0, r3
 80060f8:	f001 f902 	bl	8007300 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80060fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006100:	2218      	movs	r2, #24
 8006102:	2100      	movs	r1, #0
 8006104:	4618      	mov	r0, r3
 8006106:	f001 f8fb 	bl	8007300 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800610a:	233f      	movs	r3, #63	; 0x3f
 800610c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 800610e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006112:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8006114:	f107 030c 	add.w	r3, r7, #12
 8006118:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800611a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800611e:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 8006120:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006124:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8006126:	2303      	movs	r3, #3
 8006128:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800612a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800612e:	2100      	movs	r1, #0
 8006130:	4618      	mov	r0, r3
 8006132:	f000 fc77 	bl	8006a24 <hci_send_req>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	da01      	bge.n	8006140 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 800613c:	23ff      	movs	r3, #255	; 0xff
 800613e:	e00c      	b.n	800615a <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8006140:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <aci_gatt_add_char+0x182>
    return resp.status;
 8006148:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800614c:	e005      	b.n	800615a <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 800614e:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 8006152:	b29a      	uxth	r2, r3
 8006154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006156:	801a      	strh	r2, [r3, #0]

  return 0;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3748      	adds	r7, #72	; 0x48
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8006162:	b590      	push	{r4, r7, lr}
 8006164:	b0ab      	sub	sp, #172	; 0xac
 8006166:	af00      	add	r7, sp, #0
 8006168:	4604      	mov	r4, r0
 800616a:	4608      	mov	r0, r1
 800616c:	4611      	mov	r1, r2
 800616e:	461a      	mov	r2, r3
 8006170:	4623      	mov	r3, r4
 8006172:	80fb      	strh	r3, [r7, #6]
 8006174:	4603      	mov	r3, r0
 8006176:	80bb      	strh	r3, [r7, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	70fb      	strb	r3, [r7, #3]
 800617c:	4613      	mov	r3, r2
 800617e:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8006180:	2300      	movs	r3, #0
 8006182:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8006186:	78bb      	ldrb	r3, [r7, #2]
 8006188:	2b7a      	cmp	r3, #122	; 0x7a
 800618a:	d901      	bls.n	8006190 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 800618c:	2342      	movs	r3, #66	; 0x42
 800618e:	e074      	b.n	800627a <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 8006190:	88fb      	ldrh	r3, [r7, #6]
 8006192:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8006194:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006198:	f107 0208 	add.w	r2, r7, #8
 800619c:	4413      	add	r3, r2
 800619e:	88fa      	ldrh	r2, [r7, #6]
 80061a0:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80061a2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80061a6:	3302      	adds	r3, #2
 80061a8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 80061ac:	88bb      	ldrh	r3, [r7, #4]
 80061ae:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 80061b0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80061b4:	f107 0208 	add.w	r2, r7, #8
 80061b8:	4413      	add	r3, r2
 80061ba:	88ba      	ldrh	r2, [r7, #4]
 80061bc:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80061be:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80061c2:	3302      	adds	r3, #2
 80061c4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 80061c8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80061cc:	33a8      	adds	r3, #168	; 0xa8
 80061ce:	443b      	add	r3, r7
 80061d0:	78fa      	ldrb	r2, [r7, #3]
 80061d2:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80061d6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80061da:	3301      	adds	r3, #1
 80061dc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 80061e0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80061e4:	33a8      	adds	r3, #168	; 0xa8
 80061e6:	443b      	add	r3, r7
 80061e8:	78ba      	ldrb	r2, [r7, #2]
 80061ea:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80061ee:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80061f2:	3301      	adds	r3, #1
 80061f4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 80061f8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80061fc:	f107 0208 	add.w	r2, r7, #8
 8006200:	4413      	add	r3, r2
 8006202:	78ba      	ldrb	r2, [r7, #2]
 8006204:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8006208:	4618      	mov	r0, r3
 800620a:	f001 f86b 	bl	80072e4 <memcpy>
  indx +=  charValueLen;
 800620e:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8006212:	78bb      	ldrb	r3, [r7, #2]
 8006214:	4413      	add	r3, r2
 8006216:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800621a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800621e:	2218      	movs	r2, #24
 8006220:	2100      	movs	r1, #0
 8006222:	4618      	mov	r0, r3
 8006224:	f001 f86c 	bl	8007300 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8006228:	233f      	movs	r3, #63	; 0x3f
 800622a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800622e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8006232:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8006236:	f107 0308 	add.w	r3, r7, #8
 800623a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800623e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006242:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8006246:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800624a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800624e:	2301      	movs	r3, #1
 8006250:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8006254:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006258:	2100      	movs	r1, #0
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fbe2 	bl	8006a24 <hci_send_req>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	da01      	bge.n	800626a <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 8006266:	23ff      	movs	r3, #255	; 0xff
 8006268:	e007      	b.n	800627a <aci_gatt_update_char_value+0x118>

  if (status) {
 800626a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <aci_gatt_update_char_value+0x116>
    return status;
 8006272:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8006276:	e000      	b.n	800627a <aci_gatt_update_char_value+0x118>
  }

  return 0;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	37ac      	adds	r7, #172	; 0xac
 800627e:	46bd      	mov	sp, r7
 8006280:	bd90      	pop	{r4, r7, pc}

08006282 <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 8006282:	b590      	push	{r4, r7, lr}
 8006284:	b091      	sub	sp, #68	; 0x44
 8006286:	af00      	add	r7, sp, #0
 8006288:	4604      	mov	r4, r0
 800628a:	4608      	mov	r0, r1
 800628c:	4611      	mov	r1, r2
 800628e:	461a      	mov	r2, r3
 8006290:	4623      	mov	r3, r4
 8006292:	80fb      	strh	r3, [r7, #6]
 8006294:	4603      	mov	r3, r0
 8006296:	80bb      	strh	r3, [r7, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	807b      	strh	r3, [r7, #2]
 800629c:	4613      	mov	r3, r2
 800629e:	707b      	strb	r3, [r7, #1]
  struct hci_request rq;
  uint8_t status;
  
  uint8_t buffer[23];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80062a0:	2300      	movs	r3, #0
 80062a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  conn_handle = htobs(conn_handle);
 80062a6:	88fb      	ldrh	r3, [r7, #6]
 80062a8:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 80062aa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80062ae:	f107 020c 	add.w	r2, r7, #12
 80062b2:	4413      	add	r3, r2
 80062b4:	88fa      	ldrh	r2, [r7, #6]
 80062b6:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80062b8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80062bc:	3302      	adds	r3, #2
 80062be:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  start_handle = htobs(start_handle);
 80062c2:	88bb      	ldrh	r3, [r7, #4]
 80062c4:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 80062c6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80062ca:	f107 020c 	add.w	r2, r7, #12
 80062ce:	4413      	add	r3, r2
 80062d0:	88ba      	ldrh	r2, [r7, #4]
 80062d2:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80062d4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80062d8:	3302      	adds	r3, #2
 80062da:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  end_handle = htobs(end_handle);
 80062de:	887b      	ldrh	r3, [r7, #2]
 80062e0:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 80062e2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80062e6:	f107 020c 	add.w	r2, r7, #12
 80062ea:	4413      	add	r3, r2
 80062ec:	887a      	ldrh	r2, [r7, #2]
 80062ee:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80062f0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80062f4:	3302      	adds	r3, #2
 80062f6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  buffer[indx] = charUuidType;
 80062fa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80062fe:	3340      	adds	r3, #64	; 0x40
 8006300:	443b      	add	r3, r7
 8006302:	787a      	ldrb	r2, [r7, #1]
 8006304:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8006308:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800630c:	3301      	adds	r3, #1
 800630e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(charUuidType == 0x01){
 8006312:	787b      	ldrb	r3, [r7, #1]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d103      	bne.n	8006320 <aci_gatt_disc_charac_by_uuid+0x9e>
    uuid_len = 2;
 8006318:	2302      	movs	r3, #2
 800631a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800631e:	e002      	b.n	8006326 <aci_gatt_disc_charac_by_uuid+0xa4>
  }
  else {
    uuid_len = 16;
 8006320:	2310      	movs	r3, #16
 8006322:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8006326:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800632a:	f107 020c 	add.w	r2, r7, #12
 800632e:	4413      	add	r3, r2
 8006330:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006334:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006336:	4618      	mov	r0, r3
 8006338:	f000 ffd4 	bl	80072e4 <memcpy>
  indx +=  uuid_len;
 800633c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8006340:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006344:	4413      	add	r3, r2
 8006346:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800634a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800634e:	2218      	movs	r2, #24
 8006350:	2100      	movs	r1, #0
 8006352:	4618      	mov	r0, r3
 8006354:	f000 ffd4 	bl	8007300 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8006358:	233f      	movs	r3, #63	; 0x3f
 800635a:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 800635c:	f44f 738b 	mov.w	r3, #278	; 0x116
 8006360:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 8006362:	f107 030c 	add.w	r3, r7, #12
 8006366:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 8006368:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800636c:	633b      	str	r3, [r7, #48]	; 0x30
  rq.event = EVT_CMD_STATUS;
 800636e:	230f      	movs	r3, #15
 8006370:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rparam = &status;
 8006372:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8006376:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = 1;
 8006378:	2301      	movs	r3, #1
 800637a:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800637c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006380:	2100      	movs	r1, #0
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fb4e 	bl	8006a24 <hci_send_req>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	da01      	bge.n	8006392 <aci_gatt_disc_charac_by_uuid+0x110>
    return BLE_STATUS_TIMEOUT;
 800638e:	23ff      	movs	r3, #255	; 0xff
 8006390:	e001      	b.n	8006396 <aci_gatt_disc_charac_by_uuid+0x114>

  return status;
 8006392:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006396:	4618      	mov	r0, r3
 8006398:	3744      	adds	r7, #68	; 0x44
 800639a:	46bd      	mov	sp, r7
 800639c:	bd90      	pop	{r4, r7, pc}

0800639e <aci_gatt_write_charac_descriptor>:
  return status;
}

tBleStatus aci_gatt_write_charac_descriptor(uint16_t conn_handle, uint16_t attr_handle, 
					   uint8_t value_len, uint8_t *attr_value)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b0ac      	sub	sp, #176	; 0xb0
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	607b      	str	r3, [r7, #4]
 80063a6:	4603      	mov	r3, r0
 80063a8:	81fb      	strh	r3, [r7, #14]
 80063aa:	460b      	mov	r3, r1
 80063ac:	81bb      	strh	r3, [r7, #12]
 80063ae:	4613      	mov	r3, r2
 80063b0:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80063b2:	2300      	movs	r3, #0
 80063b4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 80063b8:	7afb      	ldrb	r3, [r7, #11]
 80063ba:	2b7b      	cmp	r3, #123	; 0x7b
 80063bc:	d901      	bls.n	80063c2 <aci_gatt_write_charac_descriptor+0x24>
    return BLE_STATUS_INVALID_PARAMS;
 80063be:	2342      	movs	r3, #66	; 0x42
 80063c0:	e064      	b.n	800648c <aci_gatt_write_charac_descriptor+0xee>

  conn_handle = htobs(conn_handle);
 80063c2:	89fb      	ldrh	r3, [r7, #14]
 80063c4:	81fb      	strh	r3, [r7, #14]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 80063c6:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80063ca:	f107 0210 	add.w	r2, r7, #16
 80063ce:	4413      	add	r3, r2
 80063d0:	89fa      	ldrh	r2, [r7, #14]
 80063d2:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80063d4:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80063d8:	3302      	adds	r3, #2
 80063da:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  attr_handle = htobs(attr_handle);
 80063de:	89bb      	ldrh	r3, [r7, #12]
 80063e0:	81bb      	strh	r3, [r7, #12]
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 80063e2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80063e6:	f107 0210 	add.w	r2, r7, #16
 80063ea:	4413      	add	r3, r2
 80063ec:	89ba      	ldrh	r2, [r7, #12]
 80063ee:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80063f0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80063f4:	3302      	adds	r3, #2
 80063f6:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  buffer[indx] = value_len;
 80063fa:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80063fe:	33b0      	adds	r3, #176	; 0xb0
 8006400:	443b      	add	r3, r7
 8006402:	7afa      	ldrb	r2, [r7, #11]
 8006404:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8006408:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800640c:	3301      	adds	r3, #1
 800640e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 8006412:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006416:	f107 0210 	add.w	r2, r7, #16
 800641a:	4413      	add	r3, r2
 800641c:	7afa      	ldrb	r2, [r7, #11]
 800641e:	6879      	ldr	r1, [r7, #4]
 8006420:	4618      	mov	r0, r3
 8006422:	f000 ff5f 	bl	80072e4 <memcpy>
  indx +=  value_len;
 8006426:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 800642a:	7afb      	ldrb	r3, [r7, #11]
 800642c:	4413      	add	r3, r2
 800642e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006432:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006436:	2218      	movs	r2, #24
 8006438:	2100      	movs	r1, #0
 800643a:	4618      	mov	r0, r3
 800643c:	f000 ff60 	bl	8007300 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8006440:	233f      	movs	r3, #63	; 0x3f
 8006442:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 8006446:	f240 1321 	movw	r3, #289	; 0x121
 800644a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  rq.cparam = (void *)buffer;
 800644e:	f107 0310 	add.w	r3, r7, #16
 8006452:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.clen = indx;
 8006456:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800645a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.event = EVT_CMD_STATUS; 
 800645e:	230f      	movs	r3, #15
 8006460:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8006464:	f107 0393 	add.w	r3, r7, #147	; 0x93
 8006468:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rlen = 1;
 800646c:	2301      	movs	r3, #1
 800646e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (hci_send_req(&rq, FALSE) < 0)
 8006472:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006476:	2100      	movs	r1, #0
 8006478:	4618      	mov	r0, r3
 800647a:	f000 fad3 	bl	8006a24 <hci_send_req>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	da01      	bge.n	8006488 <aci_gatt_write_charac_descriptor+0xea>
    return BLE_STATUS_TIMEOUT;
 8006484:	23ff      	movs	r3, #255	; 0xff
 8006486:	e001      	b.n	800648c <aci_gatt_write_charac_descriptor+0xee>

  return status;
 8006488:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
}
 800648c:	4618      	mov	r0, r3
 800648e:	37b0      	adds	r7, #176	; 0xb0
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <aci_gatt_write_without_response>:
  return status;
}

tBleStatus aci_gatt_write_without_response(uint16_t conn_handle, uint16_t attr_handle,
                                              uint8_t val_len, const uint8_t* attr_val)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b092      	sub	sp, #72	; 0x48
 8006498:	af00      	add	r7, sp, #0
 800649a:	607b      	str	r3, [r7, #4]
 800649c:	4603      	mov	r3, r0
 800649e:	81fb      	strh	r3, [r7, #14]
 80064a0:	460b      	mov	r3, r1
 80064a2:	81bb      	strh	r3, [r7, #12]
 80064a4:	4613      	mov	r3, r2
 80064a6:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
 80064a8:	7afb      	ldrb	r3, [r7, #11]
 80064aa:	2b14      	cmp	r3, #20
 80064ac:	d901      	bls.n	80064b2 <aci_gatt_write_without_response+0x1e>
    return BLE_STATUS_INVALID_PARAMS;
 80064ae:	2342      	movs	r3, #66	; 0x42
 80064b0:	e031      	b.n	8006516 <aci_gatt_write_without_response+0x82>

  cp.conn_handle = htobs(conn_handle);
 80064b2:	89fb      	ldrh	r3, [r7, #14]
 80064b4:	82bb      	strh	r3, [r7, #20]
  cp.attr_handle = htobs(attr_handle);
 80064b6:	89bb      	ldrh	r3, [r7, #12]
 80064b8:	82fb      	strh	r3, [r7, #22]
  cp.val_len = val_len;
 80064ba:	7afb      	ldrb	r3, [r7, #11]
 80064bc:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 80064be:	7afa      	ldrb	r2, [r7, #11]
 80064c0:	f107 0314 	add.w	r3, r7, #20
 80064c4:	3305      	adds	r3, #5
 80064c6:	6879      	ldr	r1, [r7, #4]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 ff0b 	bl	80072e4 <memcpy>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80064ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80064d2:	2218      	movs	r2, #24
 80064d4:	2100      	movs	r1, #0
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 ff12 	bl	8007300 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80064dc:	233f      	movs	r3, #63	; 0x3f
 80064de:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
 80064e0:	f240 1323 	movw	r3, #291	; 0x123
 80064e4:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 80064e6:	f107 0314 	add.w	r3, r7, #20
 80064ea:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 80064ec:	7afb      	ldrb	r3, [r7, #11]
 80064ee:	3305      	adds	r3, #5
 80064f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 80064f2:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80064f6:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 80064f8:	2301      	movs	r3, #1
 80064fa:	647b      	str	r3, [r7, #68]	; 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 80064fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006500:	2100      	movs	r1, #0
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fa8e 	bl	8006a24 <hci_send_req>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	da01      	bge.n	8006512 <aci_gatt_write_without_response+0x7e>
    return BLE_STATUS_TIMEOUT;
 800650e:	23ff      	movs	r3, #255	; 0xff
 8006510:	e001      	b.n	8006516 <aci_gatt_write_without_response+0x82>

  return status;
 8006512:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006516:	4618      	mov	r0, r3
 8006518:	3748      	adds	r7, #72	; 0x48
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b0aa      	sub	sp, #168	; 0xa8
 8006522:	af00      	add	r7, sp, #0
 8006524:	4603      	mov	r3, r0
 8006526:	603a      	str	r2, [r7, #0]
 8006528:	71fb      	strb	r3, [r7, #7]
 800652a:	460b      	mov	r3, r1
 800652c:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800652e:	2300      	movs	r3, #0
 8006530:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8006534:	79bb      	ldrb	r3, [r7, #6]
 8006536:	2b7e      	cmp	r3, #126	; 0x7e
 8006538:	d901      	bls.n	800653e <aci_hal_write_config_data+0x20>
    return BLE_STATUS_INVALID_PARAMS;
 800653a:	2342      	movs	r3, #66	; 0x42
 800653c:	e050      	b.n	80065e0 <aci_hal_write_config_data+0xc2>

  buffer[indx] = offset;
 800653e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006542:	33a8      	adds	r3, #168	; 0xa8
 8006544:	443b      	add	r3, r7
 8006546:	79fa      	ldrb	r2, [r7, #7]
 8006548:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800654c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006550:	3301      	adds	r3, #1
 8006552:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 8006556:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800655a:	33a8      	adds	r3, #168	; 0xa8
 800655c:	443b      	add	r3, r7
 800655e:	79ba      	ldrb	r2, [r7, #6]
 8006560:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8006564:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006568:	3301      	adds	r3, #1
 800656a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 800656e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006572:	f107 0208 	add.w	r2, r7, #8
 8006576:	4413      	add	r3, r2
 8006578:	79ba      	ldrb	r2, [r7, #6]
 800657a:	6839      	ldr	r1, [r7, #0]
 800657c:	4618      	mov	r0, r3
 800657e:	f000 feb1 	bl	80072e4 <memcpy>
  indx +=  len;
 8006582:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8006586:	79bb      	ldrb	r3, [r7, #6]
 8006588:	4413      	add	r3, r2
 800658a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800658e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006592:	2218      	movs	r2, #24
 8006594:	2100      	movs	r1, #0
 8006596:	4618      	mov	r0, r3
 8006598:	f000 feb2 	bl	8007300 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800659c:	233f      	movs	r3, #63	; 0x3f
 800659e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 80065a2:	230c      	movs	r3, #12
 80065a4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 80065a8:	f107 0308 	add.w	r3, r7, #8
 80065ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 80065b0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80065b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 80065b8:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 80065bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 80065c0:	2301      	movs	r3, #1
 80065c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 80065c6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80065ca:	2100      	movs	r1, #0
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 fa29 	bl	8006a24 <hci_send_req>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	da01      	bge.n	80065dc <aci_hal_write_config_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 80065d8:	23ff      	movs	r3, #255	; 0xff
 80065da:	e001      	b.n	80065e0 <aci_hal_write_config_data+0xc2>

  return status;
 80065dc:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	37a8      	adds	r7, #168	; 0xa8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b08a      	sub	sp, #40	; 0x28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	4603      	mov	r3, r0
 80065f0:	460a      	mov	r2, r1
 80065f2:	71fb      	strb	r3, [r7, #7]
 80065f4:	4613      	mov	r3, r2
 80065f6:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 80065f8:	79fb      	ldrb	r3, [r7, #7]
 80065fa:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 80065fc:	79bb      	ldrb	r3, [r7, #6]
 80065fe:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006600:	f107 0310 	add.w	r3, r7, #16
 8006604:	2218      	movs	r2, #24
 8006606:	2100      	movs	r1, #0
 8006608:	4618      	mov	r0, r3
 800660a:	f000 fe79 	bl	8007300 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800660e:	233f      	movs	r3, #63	; 0x3f
 8006610:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8006612:	230f      	movs	r3, #15
 8006614:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8006616:	f107 030c 	add.w	r3, r7, #12
 800661a:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800661c:	2302      	movs	r3, #2
 800661e:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8006620:	f107 030b 	add.w	r3, r7, #11
 8006624:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8006626:	2301      	movs	r3, #1
 8006628:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800662a:	f107 0310 	add.w	r3, r7, #16
 800662e:	2100      	movs	r1, #0
 8006630:	4618      	mov	r0, r3
 8006632:	f000 f9f7 	bl	8006a24 <hci_send_req>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	da01      	bge.n	8006640 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800663c:	23ff      	movs	r3, #255	; 0xff
 800663e:	e000      	b.n	8006642 <aci_hal_set_tx_power_level+0x5a>

  return status;
 8006640:	7afb      	ldrb	r3, [r7, #11]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3728      	adds	r7, #40	; 0x28
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800664a:	b590      	push	{r4, r7, lr}
 800664c:	b089      	sub	sp, #36	; 0x24
 800664e:	af02      	add	r7, sp, #8
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8006654:	f107 0410 	add.w	r4, r7, #16
 8006658:	f107 0215 	add.w	r2, r7, #21
 800665c:	f107 0112 	add.w	r1, r7, #18
 8006660:	f107 0016 	add.w	r0, r7, #22
 8006664:	f107 030e 	add.w	r3, r7, #14
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	4623      	mov	r3, r4
 800666c:	f000 f853 	bl	8006716 <hci_le_read_local_version>
 8006670:	4603      	mov	r3, r0
 8006672:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8006674:	7dfb      	ldrb	r3, [r7, #23]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d126      	bne.n	80066c8 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800667a:	8a7b      	ldrh	r3, [r7, #18]
 800667c:	0a1b      	lsrs	r3, r3, #8
 800667e:	b29b      	uxth	r3, r3
 8006680:	b2da      	uxtb	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8006686:	8a7b      	ldrh	r3, [r7, #18]
 8006688:	021b      	lsls	r3, r3, #8
 800668a:	b29a      	uxth	r2, r3
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	b21a      	sxth	r2, r3
 8006696:	89fb      	ldrh	r3, [r7, #14]
 8006698:	091b      	lsrs	r3, r3, #4
 800669a:	b29b      	uxth	r3, r3
 800669c:	011b      	lsls	r3, r3, #4
 800669e:	b21b      	sxth	r3, r3
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	b21b      	sxth	r3, r3
 80066a4:	4313      	orrs	r3, r2
 80066a6:	b21b      	sxth	r3, r3
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	b21a      	sxth	r2, r3
 80066b4:	89fb      	ldrh	r3, [r7, #14]
 80066b6:	b21b      	sxth	r3, r3
 80066b8:	f003 030f 	and.w	r3, r3, #15
 80066bc:	b21b      	sxth	r3, r3
 80066be:	4313      	orrs	r3, r2
 80066c0:	b21b      	sxth	r3, r3
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	801a      	strh	r2, [r3, #0]
  }
  return status;
 80066c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	371c      	adds	r7, #28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd90      	pop	{r4, r7, pc}

080066d2 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b088      	sub	sp, #32
 80066d6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80066d8:	f107 0308 	add.w	r3, r7, #8
 80066dc:	2218      	movs	r2, #24
 80066de:	2100      	movs	r1, #0
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 fe0d 	bl	8007300 <memset>
  rq.ogf = OGF_HOST_CTL;
 80066e6:	2303      	movs	r3, #3
 80066e8:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 80066ea:	2303      	movs	r3, #3
 80066ec:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80066ee:	1dfb      	adds	r3, r7, #7
 80066f0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80066f2:	2301      	movs	r3, #1
 80066f4:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 80066f6:	f107 0308 	add.w	r3, r7, #8
 80066fa:	2100      	movs	r1, #0
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 f991 	bl	8006a24 <hci_send_req>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	da01      	bge.n	800670c <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8006708:	23ff      	movs	r3, #255	; 0xff
 800670a:	e000      	b.n	800670e <hci_reset+0x3c>
  
  return status;  
 800670c:	79fb      	ldrb	r3, [r7, #7]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3720      	adds	r7, #32
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b08e      	sub	sp, #56	; 0x38
 800671a:	af00      	add	r7, sp, #0
 800671c:	60f8      	str	r0, [r7, #12]
 800671e:	60b9      	str	r1, [r7, #8]
 8006720:	607a      	str	r2, [r7, #4]
 8006722:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006724:	f107 0314 	add.w	r3, r7, #20
 8006728:	2209      	movs	r2, #9
 800672a:	2100      	movs	r1, #0
 800672c:	4618      	mov	r0, r3
 800672e:	f000 fde7 	bl	8007300 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006732:	f107 0320 	add.w	r3, r7, #32
 8006736:	2218      	movs	r2, #24
 8006738:	2100      	movs	r1, #0
 800673a:	4618      	mov	r0, r3
 800673c:	f000 fde0 	bl	8007300 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8006740:	2304      	movs	r3, #4
 8006742:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8006744:	2301      	movs	r3, #1
 8006746:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 8006748:	2300      	movs	r3, #0
 800674a:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 800674c:	2300      	movs	r3, #0
 800674e:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8006750:	f107 0314 	add.w	r3, r7, #20
 8006754:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8006756:	2309      	movs	r3, #9
 8006758:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800675a:	f107 0320 	add.w	r3, r7, #32
 800675e:	2100      	movs	r1, #0
 8006760:	4618      	mov	r0, r3
 8006762:	f000 f95f 	bl	8006a24 <hci_send_req>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	da01      	bge.n	8006770 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800676c:	23ff      	movs	r3, #255	; 0xff
 800676e:	e018      	b.n	80067a2 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8006770:	7d3b      	ldrb	r3, [r7, #20]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <hci_le_read_local_version+0x64>
    return resp.status;
 8006776:	7d3b      	ldrb	r3, [r7, #20]
 8006778:	e013      	b.n	80067a2 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800677a:	7d7a      	ldrb	r2, [r7, #21]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8006780:	8afa      	ldrh	r2, [r7, #22]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8006786:	7e3a      	ldrb	r2, [r7, #24]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800678c:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8006790:	b29a      	uxth	r2, r3
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8006796:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800679a:	b29a      	uxth	r2, r3
 800679c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800679e:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3738      	adds	r7, #56	; 0x38
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b092      	sub	sp, #72	; 0x48
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	4603      	mov	r3, r0
 80067b2:	6039      	str	r1, [r7, #0]
 80067b4:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 80067b6:	f107 0310 	add.w	r3, r7, #16
 80067ba:	2220      	movs	r2, #32
 80067bc:	2100      	movs	r1, #0
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fd9e 	bl	8007300 <memset>
  scan_resp_cp.length = length;
 80067c4:	79fb      	ldrb	r3, [r7, #7]
 80067c6:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 80067c8:	79fb      	ldrb	r3, [r7, #7]
 80067ca:	2b1f      	cmp	r3, #31
 80067cc:	bf28      	it	cs
 80067ce:	231f      	movcs	r3, #31
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	461a      	mov	r2, r3
 80067d4:	f107 0310 	add.w	r3, r7, #16
 80067d8:	3301      	adds	r3, #1
 80067da:	6839      	ldr	r1, [r7, #0]
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 fd81 	bl	80072e4 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80067e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80067e6:	2218      	movs	r2, #24
 80067e8:	2100      	movs	r1, #0
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fd88 	bl	8007300 <memset>
  rq.ogf = OGF_LE_CTL;
 80067f0:	2308      	movs	r3, #8
 80067f2:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 80067f4:	2309      	movs	r3, #9
 80067f6:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 80067f8:	f107 0310 	add.w	r3, r7, #16
 80067fc:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 80067fe:	2320      	movs	r3, #32
 8006800:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 8006802:	f107 030f 	add.w	r3, r7, #15
 8006806:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8006808:	2301      	movs	r3, #1
 800680a:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800680c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006810:	2100      	movs	r1, #0
 8006812:	4618      	mov	r0, r3
 8006814:	f000 f906 	bl	8006a24 <hci_send_req>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	da01      	bge.n	8006822 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800681e:	23ff      	movs	r3, #255	; 0xff
 8006820:	e000      	b.n	8006824 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8006822:	7bfb      	ldrb	r3, [r7, #15]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3748      	adds	r7, #72	; 0x48
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	3308      	adds	r3, #8
 8006838:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	2b04      	cmp	r3, #4
 8006840:	d001      	beq.n	8006846 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8006842:	2301      	movs	r3, #1
 8006844:	e00c      	b.n	8006860 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3302      	adds	r3, #2
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	461a      	mov	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006854:	3b03      	subs	r3, #3
 8006856:	429a      	cmp	r2, r3
 8006858:	d001      	beq.n	800685e <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800685a:	2302      	movs	r3, #2
 800685c:	e000      	b.n	8006860 <verify_packet+0x34>
  
  return 0;      
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b0a6      	sub	sp, #152	; 0x98
 8006870:	af00      	add	r7, sp, #0
 8006872:	607b      	str	r3, [r7, #4]
 8006874:	4603      	mov	r3, r0
 8006876:	81fb      	strh	r3, [r7, #14]
 8006878:	460b      	mov	r3, r1
 800687a:	81bb      	strh	r3, [r7, #12]
 800687c:	4613      	mov	r3, r2
 800687e:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8006880:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006888:	b21a      	sxth	r2, r3
 800688a:	89fb      	ldrh	r3, [r7, #14]
 800688c:	029b      	lsls	r3, r3, #10
 800688e:	b21b      	sxth	r3, r3
 8006890:	4313      	orrs	r3, r2
 8006892:	b21b      	sxth	r3, r3
 8006894:	b29b      	uxth	r3, r3
 8006896:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8006898:	7afb      	ldrb	r3, [r7, #11]
 800689a:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800689c:	2301      	movs	r3, #1
 800689e:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80068a0:	f107 0318 	add.w	r3, r7, #24
 80068a4:	3301      	adds	r3, #1
 80068a6:	461a      	mov	r2, r3
 80068a8:	f107 0314 	add.w	r3, r7, #20
 80068ac:	8819      	ldrh	r1, [r3, #0]
 80068ae:	789b      	ldrb	r3, [r3, #2]
 80068b0:	8011      	strh	r1, [r2, #0]
 80068b2:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80068b4:	f107 0318 	add.w	r3, r7, #24
 80068b8:	3304      	adds	r3, #4
 80068ba:	7afa      	ldrb	r2, [r7, #11]
 80068bc:	6879      	ldr	r1, [r7, #4]
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fd10 	bl	80072e4 <memcpy>
  
  if (hciContext.io.Send)
 80068c4:	4b08      	ldr	r3, [pc, #32]	; (80068e8 <send_cmd+0x7c>)
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d009      	beq.n	80068e0 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80068cc:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <send_cmd+0x7c>)
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	7afa      	ldrb	r2, [r7, #11]
 80068d2:	b292      	uxth	r2, r2
 80068d4:	3204      	adds	r2, #4
 80068d6:	b291      	uxth	r1, r2
 80068d8:	f107 0218 	add.w	r2, r7, #24
 80068dc:	4610      	mov	r0, r2
 80068de:	4798      	blx	r3
  }
}
 80068e0:	bf00      	nop
 80068e2:	3798      	adds	r7, #152	; 0x98
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	20000674 	.word	0x20000674

080068ec <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80068f6:	e00a      	b.n	800690e <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 80068f8:	f107 030c 	add.w	r3, r7, #12
 80068fc:	4619      	mov	r1, r3
 80068fe:	6838      	ldr	r0, [r7, #0]
 8006900:	f000 fae8 	bl	8006ed4 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4619      	mov	r1, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fa4f 	bl	8006dac <list_insert_head>
  while (!list_is_empty(src_list))
 800690e:	6838      	ldr	r0, [r7, #0]
 8006910:	f000 fa2a 	bl	8006d68 <list_is_empty>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d0ee      	beq.n	80068f8 <move_list+0xc>
  }
}
 800691a:	bf00      	nop
 800691c:	bf00      	nop
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800692a:	e009      	b.n	8006940 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800692c:	1d3b      	adds	r3, r7, #4
 800692e:	4619      	mov	r1, r3
 8006930:	4809      	ldr	r0, [pc, #36]	; (8006958 <free_event_list+0x34>)
 8006932:	f000 faa8 	bl	8006e86 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4619      	mov	r1, r3
 800693a:	4808      	ldr	r0, [pc, #32]	; (800695c <free_event_list+0x38>)
 800693c:	f000 fa5c 	bl	8006df8 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8006940:	4806      	ldr	r0, [pc, #24]	; (800695c <free_event_list+0x38>)
 8006942:	f000 faee 	bl	8006f22 <list_get_size>
 8006946:	4603      	mov	r3, r0
 8006948:	2b01      	cmp	r3, #1
 800694a:	ddef      	ble.n	800692c <free_event_list+0x8>
  }
}
 800694c:	bf00      	nop
 800694e:	bf00      	nop
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	200003b0 	.word	0x200003b0
 800695c:	200003a8 	.word	0x200003a8

08006960 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d002      	beq.n	8006976 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8006970:	4a18      	ldr	r2, [pc, #96]	; (80069d4 <hci_init+0x74>)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8006976:	4818      	ldr	r0, [pc, #96]	; (80069d8 <hci_init+0x78>)
 8006978:	f000 f9e6 	bl	8006d48 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800697c:	4817      	ldr	r0, [pc, #92]	; (80069dc <hci_init+0x7c>)
 800697e:	f000 f9e3 	bl	8006d48 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8006982:	f7fa fb1f 	bl	8000fc4 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8006986:	2300      	movs	r3, #0
 8006988:	73fb      	strb	r3, [r7, #15]
 800698a:	e00c      	b.n	80069a6 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800698c:	7bfb      	ldrb	r3, [r7, #15]
 800698e:	228c      	movs	r2, #140	; 0x8c
 8006990:	fb02 f303 	mul.w	r3, r2, r3
 8006994:	4a12      	ldr	r2, [pc, #72]	; (80069e0 <hci_init+0x80>)
 8006996:	4413      	add	r3, r2
 8006998:	4619      	mov	r1, r3
 800699a:	480f      	ldr	r0, [pc, #60]	; (80069d8 <hci_init+0x78>)
 800699c:	f000 fa2c 	bl	8006df8 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
 80069a2:	3301      	adds	r3, #1
 80069a4:	73fb      	strb	r3, [r7, #15]
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
 80069a8:	2b04      	cmp	r3, #4
 80069aa:	d9ef      	bls.n	800698c <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 80069ac:	4b09      	ldr	r3, [pc, #36]	; (80069d4 <hci_init+0x74>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <hci_init+0x5c>
 80069b4:	4b07      	ldr	r3, [pc, #28]	; (80069d4 <hci_init+0x74>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2000      	movs	r0, #0
 80069ba:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 80069bc:	4b05      	ldr	r3, [pc, #20]	; (80069d4 <hci_init+0x74>)
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d002      	beq.n	80069ca <hci_init+0x6a>
 80069c4:	4b03      	ldr	r3, [pc, #12]	; (80069d4 <hci_init+0x74>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	4798      	blx	r3
}
 80069ca:	bf00      	nop
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	20000674 	.word	0x20000674
 80069d8:	200003a8 	.word	0x200003a8
 80069dc:	200003b0 	.word	0x200003b0
 80069e0:	200003b8 	.word	0x200003b8

080069e4 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a0b      	ldr	r2, [pc, #44]	; (8006a20 <hci_register_io_bus+0x3c>)
 80069f2:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	4a09      	ldr	r2, [pc, #36]	; (8006a20 <hci_register_io_bus+0x3c>)
 80069fa:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	4a07      	ldr	r2, [pc, #28]	; (8006a20 <hci_register_io_bus+0x3c>)
 8006a02:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	4a05      	ldr	r2, [pc, #20]	; (8006a20 <hci_register_io_bus+0x3c>)
 8006a0a:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	4a03      	ldr	r2, [pc, #12]	; (8006a20 <hci_register_io_bus+0x3c>)
 8006a12:	6093      	str	r3, [r2, #8]
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	20000674 	.word	0x20000674

08006a24 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b08e      	sub	sp, #56	; 0x38
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	885b      	ldrh	r3, [r3, #2]
 8006a34:	b21b      	sxth	r3, r3
 8006a36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a3a:	b21a      	sxth	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	029b      	lsls	r3, r3, #10
 8006a42:	b21b      	sxth	r3, r3
 8006a44:	4313      	orrs	r3, r2
 8006a46:	b21b      	sxth	r3, r3
 8006a48:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8006a4e:	f107 0308 	add.w	r3, r7, #8
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 f978 	bl	8006d48 <list_init_head>

  free_event_list();
 8006a58:	f7ff ff64 	bl	8006924 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	8818      	ldrh	r0, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	8859      	ldrh	r1, [r3, #2]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	b2da      	uxtb	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f7ff fefd 	bl	800686c <send_cmd>
  
  if (async)
 8006a72:	78fb      	ldrb	r3, [r7, #3]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <hci_send_req+0x58>
  {
    return 0;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e0e2      	b.n	8006c42 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8006a7c:	f7fb f9f8 	bl	8001e70 <HAL_GetTick>
 8006a80:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8006a82:	f7fb f9f5 	bl	8001e70 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a90:	f200 80b3 	bhi.w	8006bfa <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8006a94:	486d      	ldr	r0, [pc, #436]	; (8006c4c <hci_send_req+0x228>)
 8006a96:	f000 f967 	bl	8006d68 <list_is_empty>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d000      	beq.n	8006aa2 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8006aa0:	e7ef      	b.n	8006a82 <hci_send_req+0x5e>
      {
        break;
 8006aa2:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8006aa4:	f107 0310 	add.w	r3, r7, #16
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	4868      	ldr	r0, [pc, #416]	; (8006c4c <hci_send_req+0x228>)
 8006aac:	f000 f9eb 	bl	8006e86 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8006ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	d17f      	bne.n	8006bbe <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 8006abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	3303      	adds	r3, #3
 8006aca:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006ad2:	3b03      	subs	r3, #3
 8006ad4:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8006ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	2b3e      	cmp	r3, #62	; 0x3e
 8006adc:	d04c      	beq.n	8006b78 <hci_send_req+0x154>
 8006ade:	2b3e      	cmp	r3, #62	; 0x3e
 8006ae0:	dc68      	bgt.n	8006bb4 <hci_send_req+0x190>
 8006ae2:	2b10      	cmp	r3, #16
 8006ae4:	f000 808b 	beq.w	8006bfe <hci_send_req+0x1da>
 8006ae8:	2b10      	cmp	r3, #16
 8006aea:	dc63      	bgt.n	8006bb4 <hci_send_req+0x190>
 8006aec:	2b0e      	cmp	r3, #14
 8006aee:	d023      	beq.n	8006b38 <hci_send_req+0x114>
 8006af0:	2b0f      	cmp	r3, #15
 8006af2:	d15f      	bne.n	8006bb4 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	885b      	ldrh	r3, [r3, #2]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d17e      	bne.n	8006c02 <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	2b0f      	cmp	r3, #15
 8006b0a:	d004      	beq.n	8006b16 <hci_send_req+0xf2>
          if (cs->status) {
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d051      	beq.n	8006bb8 <hci_send_req+0x194>
            goto failed;
 8006b14:	e078      	b.n	8006c08 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	695a      	ldr	r2, [r3, #20]
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	bf28      	it	cs
 8006b20:	461a      	movcs	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6918      	ldr	r0, [r3, #16]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b32:	f000 fbd7 	bl	80072e4 <memcpy>
        goto done;
 8006b36:	e078      	b.n	8006c2a <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8006b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3a:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d15d      	bne.n	8006c06 <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	3303      	adds	r3, #3
 8006b4e:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	3b03      	subs	r3, #3
 8006b54:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	695a      	ldr	r2, [r3, #20]
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	bf28      	it	cs
 8006b60:	461a      	movcs	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6918      	ldr	r0, [r3, #16]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b72:	f000 fbb7 	bl	80072e4 <memcpy>
        goto done;
 8006b76:	e058      	b.n	8006c2a <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	461a      	mov	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d118      	bne.n	8006bbc <hci_send_req+0x198>
          break;
      
        len -= 1;
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	695a      	ldr	r2, [r3, #20]
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	bf28      	it	cs
 8006b9a:	461a      	movcs	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6918      	ldr	r0, [r3, #16]
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	1c59      	adds	r1, r3, #1
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	461a      	mov	r2, r3
 8006bae:	f000 fb99 	bl	80072e4 <memcpy>
        goto done;
 8006bb2:	e03a      	b.n	8006c2a <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8006bb4:	bf00      	nop
 8006bb6:	e002      	b.n	8006bbe <hci_send_req+0x19a>
          break;
 8006bb8:	bf00      	nop
 8006bba:	e000      	b.n	8006bbe <hci_send_req+0x19a>
          break;
 8006bbc:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8006bbe:	4824      	ldr	r0, [pc, #144]	; (8006c50 <hci_send_req+0x22c>)
 8006bc0:	f000 f8d2 	bl	8006d68 <list_is_empty>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00d      	beq.n	8006be6 <hci_send_req+0x1c2>
 8006bca:	4820      	ldr	r0, [pc, #128]	; (8006c4c <hci_send_req+0x228>)
 8006bcc:	f000 f8cc 	bl	8006d68 <list_is_empty>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d007      	beq.n	8006be6 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	4619      	mov	r1, r3
 8006bda:	481d      	ldr	r0, [pc, #116]	; (8006c50 <hci_send_req+0x22c>)
 8006bdc:	f000 f90c 	bl	8006df8 <list_insert_tail>
      hciReadPacket=NULL;
 8006be0:	2300      	movs	r3, #0
 8006be2:	613b      	str	r3, [r7, #16]
 8006be4:	e008      	b.n	8006bf8 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	f107 0308 	add.w	r3, r7, #8
 8006bec:	4611      	mov	r1, r2
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 f902 	bl	8006df8 <list_insert_tail>
      hciReadPacket=NULL;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	613b      	str	r3, [r7, #16]
  {
 8006bf8:	e740      	b.n	8006a7c <hci_send_req+0x58>
        goto failed;
 8006bfa:	bf00      	nop
 8006bfc:	e004      	b.n	8006c08 <hci_send_req+0x1e4>
        goto failed;
 8006bfe:	bf00      	nop
 8006c00:	e002      	b.n	8006c08 <hci_send_req+0x1e4>
          goto failed;
 8006c02:	bf00      	nop
 8006c04:	e000      	b.n	8006c08 <hci_send_req+0x1e4>
          goto failed;
 8006c06:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d004      	beq.n	8006c18 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	4619      	mov	r1, r3
 8006c12:	480f      	ldr	r0, [pc, #60]	; (8006c50 <hci_send_req+0x22c>)
 8006c14:	f000 f8ca 	bl	8006dac <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8006c18:	f107 0308 	add.w	r3, r7, #8
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	480b      	ldr	r0, [pc, #44]	; (8006c4c <hci_send_req+0x228>)
 8006c20:	f7ff fe64 	bl	80068ec <move_list>

  return -1;
 8006c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c28:	e00b      	b.n	8006c42 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	4808      	ldr	r0, [pc, #32]	; (8006c50 <hci_send_req+0x22c>)
 8006c30:	f000 f8bc 	bl	8006dac <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8006c34:	f107 0308 	add.w	r3, r7, #8
 8006c38:	4619      	mov	r1, r3
 8006c3a:	4804      	ldr	r0, [pc, #16]	; (8006c4c <hci_send_req+0x228>)
 8006c3c:	f7ff fe56 	bl	80068ec <move_list>

  return 0;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3738      	adds	r7, #56	; 0x38
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	200003b0 	.word	0x200003b0
 8006c50:	200003a8 	.word	0x200003a8

08006c54 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8006c5e:	e013      	b.n	8006c88 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8006c60:	1d3b      	adds	r3, r7, #4
 8006c62:	4619      	mov	r1, r3
 8006c64:	480e      	ldr	r0, [pc, #56]	; (8006ca0 <hci_user_evt_proc+0x4c>)
 8006c66:	f000 f90e 	bl	8006e86 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8006c6a:	4b0e      	ldr	r3, [pc, #56]	; (8006ca4 <hci_user_evt_proc+0x50>)
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d005      	beq.n	8006c7e <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8006c72:	4b0c      	ldr	r3, [pc, #48]	; (8006ca4 <hci_user_evt_proc+0x50>)
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	3208      	adds	r2, #8
 8006c7a:	4610      	mov	r0, r2
 8006c7c:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4619      	mov	r1, r3
 8006c82:	4809      	ldr	r0, [pc, #36]	; (8006ca8 <hci_user_evt_proc+0x54>)
 8006c84:	f000 f8b8 	bl	8006df8 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8006c88:	4805      	ldr	r0, [pc, #20]	; (8006ca0 <hci_user_evt_proc+0x4c>)
 8006c8a:	f000 f86d 	bl	8006d68 <list_is_empty>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d0e5      	beq.n	8006c60 <hci_user_evt_proc+0xc>
  }
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	200003b0 	.word	0x200003b0
 8006ca4:	20000674 	.word	0x20000674
 8006ca8:	200003a8 	.word	0x200003a8

08006cac <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8006cbc:	481f      	ldr	r0, [pc, #124]	; (8006d3c <hci_notify_asynch_evt+0x90>)
 8006cbe:	f000 f853 	bl	8006d68 <list_is_empty>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d132      	bne.n	8006d2e <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8006cc8:	f107 030c 	add.w	r3, r7, #12
 8006ccc:	4619      	mov	r1, r3
 8006cce:	481b      	ldr	r0, [pc, #108]	; (8006d3c <hci_notify_asynch_evt+0x90>)
 8006cd0:	f000 f8d9 	bl	8006e86 <list_remove_head>
    
    if (hciContext.io.Receive)
 8006cd4:	4b1a      	ldr	r3, [pc, #104]	; (8006d40 <hci_notify_asynch_evt+0x94>)
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d02a      	beq.n	8006d32 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8006cdc:	4b18      	ldr	r3, [pc, #96]	; (8006d40 <hci_notify_asynch_evt+0x94>)
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	3208      	adds	r2, #8
 8006ce4:	2180      	movs	r1, #128	; 0x80
 8006ce6:	4610      	mov	r0, r2
 8006ce8:	4798      	blx	r3
 8006cea:	4603      	mov	r3, r0
 8006cec:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8006cee:	7cfb      	ldrb	r3, [r7, #19]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d016      	beq.n	8006d22 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	7cfa      	ldrb	r2, [r7, #19]
 8006cf8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7ff fd94 	bl	800682c <verify_packet>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d105      	bne.n	8006d16 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	480d      	ldr	r0, [pc, #52]	; (8006d44 <hci_notify_asynch_evt+0x98>)
 8006d10:	f000 f872 	bl	8006df8 <list_insert_tail>
 8006d14:	e00d      	b.n	8006d32 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4619      	mov	r1, r3
 8006d1a:	4808      	ldr	r0, [pc, #32]	; (8006d3c <hci_notify_asynch_evt+0x90>)
 8006d1c:	f000 f846 	bl	8006dac <list_insert_head>
 8006d20:	e007      	b.n	8006d32 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	4619      	mov	r1, r3
 8006d26:	4805      	ldr	r0, [pc, #20]	; (8006d3c <hci_notify_asynch_evt+0x90>)
 8006d28:	f000 f840 	bl	8006dac <list_insert_head>
 8006d2c:	e001      	b.n	8006d32 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8006d32:	697b      	ldr	r3, [r7, #20]

}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3718      	adds	r7, #24
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	200003a8 	.word	0x200003a8
 8006d40:	20000674 	.word	0x20000674
 8006d44:	200003b0 	.word	0x200003b0

08006d48 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	605a      	str	r2, [r3, #4]
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d70:	f3ef 8310 	mrs	r3, PRIMASK
 8006d74:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d76:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006d78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006d7a:	b672      	cpsid	i
}
 8006d7c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d102      	bne.n	8006d8e <list_is_empty+0x26>
  {
    return_value = 1;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	75fb      	strb	r3, [r7, #23]
 8006d8c:	e001      	b.n	8006d92 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	75fb      	strb	r3, [r7, #23]
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f383 8810 	msr	PRIMASK, r3
}
 8006d9c:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8006d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	371c      	adds	r7, #28
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b087      	sub	sp, #28
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006db6:	f3ef 8310 	mrs	r3, PRIMASK
 8006dba:	60fb      	str	r3, [r7, #12]
  return(result);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006dbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006dc0:	b672      	cpsid	i
}
 8006dc2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	683a      	ldr	r2, [r7, #0]
 8006dd6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	605a      	str	r2, [r3, #4]
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	f383 8810 	msr	PRIMASK, r3
}
 8006dea:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006dec:	bf00      	nop
 8006dee:	371c      	adds	r7, #28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e02:	f3ef 8310 	mrs	r3, PRIMASK
 8006e06:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e08:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006e0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e0c:	b672      	cpsid	i
}
 8006e0e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	601a      	str	r2, [r3, #0]
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	f383 8810 	msr	PRIMASK, r3
}
 8006e36:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006e38:	bf00      	nop
 8006e3a:	371c      	adds	r7, #28
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e50:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e52:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006e54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e56:	b672      	cpsid	i
}
 8006e58:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	6812      	ldr	r2, [r2, #0]
 8006e62:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	6852      	ldr	r2, [r2, #4]
 8006e6c:	605a      	str	r2, [r3, #4]
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f383 8810 	msr	PRIMASK, r3
}
 8006e78:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006e7a:	bf00      	nop
 8006e7c:	371c      	adds	r7, #28
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b086      	sub	sp, #24
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e90:	f3ef 8310 	mrs	r3, PRIMASK
 8006e94:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e96:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006e98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e9a:	b672      	cpsid	i
}
 8006e9c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7ff ffca 	bl	8006e44 <list_remove_node>
  (*node)->next = NULL;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	605a      	str	r2, [r3, #4]
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	f383 8810 	msr	PRIMASK, r3
}
 8006eca:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006ecc:	bf00      	nop
 8006ece:	3718      	adds	r7, #24
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ede:	f3ef 8310 	mrs	r3, PRIMASK
 8006ee2:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006ee6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ee8:	b672      	cpsid	i
}
 8006eea:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff ffa3 	bl	8006e44 <list_remove_node>
  (*node)->next = NULL;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	605a      	str	r2, [r3, #4]
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f383 8810 	msr	PRIMASK, r3
}
 8006f18:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006f1a:	bf00      	nop
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b089      	sub	sp, #36	; 0x24
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  int size = 0;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f32:	613b      	str	r3, [r7, #16]
  return(result);
 8006f34:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006f36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006f38:	b672      	cpsid	i
}
 8006f3a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8006f42:	e005      	b.n	8006f50 <list_get_size+0x2e>
  {
    size++;
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	3301      	adds	r3, #1
 8006f48:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8006f50:	69ba      	ldr	r2, [r7, #24]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d1f5      	bne.n	8006f44 <list_get_size+0x22>
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f383 8810 	msr	PRIMASK, r3
}
 8006f62:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8006f64:	69fb      	ldr	r3, [r7, #28]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3724      	adds	r7, #36	; 0x24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
	...

08006f74 <__errno>:
 8006f74:	4b01      	ldr	r3, [pc, #4]	; (8006f7c <__errno+0x8>)
 8006f76:	6818      	ldr	r0, [r3, #0]
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	2000002c 	.word	0x2000002c

08006f80 <__sflush_r>:
 8006f80:	898a      	ldrh	r2, [r1, #12]
 8006f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f86:	4605      	mov	r5, r0
 8006f88:	0710      	lsls	r0, r2, #28
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	d458      	bmi.n	8007040 <__sflush_r+0xc0>
 8006f8e:	684b      	ldr	r3, [r1, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	dc05      	bgt.n	8006fa0 <__sflush_r+0x20>
 8006f94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	dc02      	bgt.n	8006fa0 <__sflush_r+0x20>
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fa2:	2e00      	cmp	r6, #0
 8006fa4:	d0f9      	beq.n	8006f9a <__sflush_r+0x1a>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006fac:	682f      	ldr	r7, [r5, #0]
 8006fae:	6a21      	ldr	r1, [r4, #32]
 8006fb0:	602b      	str	r3, [r5, #0]
 8006fb2:	d032      	beq.n	800701a <__sflush_r+0x9a>
 8006fb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006fb6:	89a3      	ldrh	r3, [r4, #12]
 8006fb8:	075a      	lsls	r2, r3, #29
 8006fba:	d505      	bpl.n	8006fc8 <__sflush_r+0x48>
 8006fbc:	6863      	ldr	r3, [r4, #4]
 8006fbe:	1ac0      	subs	r0, r0, r3
 8006fc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006fc2:	b10b      	cbz	r3, 8006fc8 <__sflush_r+0x48>
 8006fc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006fc6:	1ac0      	subs	r0, r0, r3
 8006fc8:	2300      	movs	r3, #0
 8006fca:	4602      	mov	r2, r0
 8006fcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fce:	6a21      	ldr	r1, [r4, #32]
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	47b0      	blx	r6
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	89a3      	ldrh	r3, [r4, #12]
 8006fd8:	d106      	bne.n	8006fe8 <__sflush_r+0x68>
 8006fda:	6829      	ldr	r1, [r5, #0]
 8006fdc:	291d      	cmp	r1, #29
 8006fde:	d82b      	bhi.n	8007038 <__sflush_r+0xb8>
 8006fe0:	4a29      	ldr	r2, [pc, #164]	; (8007088 <__sflush_r+0x108>)
 8006fe2:	410a      	asrs	r2, r1
 8006fe4:	07d6      	lsls	r6, r2, #31
 8006fe6:	d427      	bmi.n	8007038 <__sflush_r+0xb8>
 8006fe8:	2200      	movs	r2, #0
 8006fea:	6062      	str	r2, [r4, #4]
 8006fec:	04d9      	lsls	r1, r3, #19
 8006fee:	6922      	ldr	r2, [r4, #16]
 8006ff0:	6022      	str	r2, [r4, #0]
 8006ff2:	d504      	bpl.n	8006ffe <__sflush_r+0x7e>
 8006ff4:	1c42      	adds	r2, r0, #1
 8006ff6:	d101      	bne.n	8006ffc <__sflush_r+0x7c>
 8006ff8:	682b      	ldr	r3, [r5, #0]
 8006ffa:	b903      	cbnz	r3, 8006ffe <__sflush_r+0x7e>
 8006ffc:	6560      	str	r0, [r4, #84]	; 0x54
 8006ffe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007000:	602f      	str	r7, [r5, #0]
 8007002:	2900      	cmp	r1, #0
 8007004:	d0c9      	beq.n	8006f9a <__sflush_r+0x1a>
 8007006:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800700a:	4299      	cmp	r1, r3
 800700c:	d002      	beq.n	8007014 <__sflush_r+0x94>
 800700e:	4628      	mov	r0, r5
 8007010:	f000 f97e 	bl	8007310 <_free_r>
 8007014:	2000      	movs	r0, #0
 8007016:	6360      	str	r0, [r4, #52]	; 0x34
 8007018:	e7c0      	b.n	8006f9c <__sflush_r+0x1c>
 800701a:	2301      	movs	r3, #1
 800701c:	4628      	mov	r0, r5
 800701e:	47b0      	blx	r6
 8007020:	1c41      	adds	r1, r0, #1
 8007022:	d1c8      	bne.n	8006fb6 <__sflush_r+0x36>
 8007024:	682b      	ldr	r3, [r5, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d0c5      	beq.n	8006fb6 <__sflush_r+0x36>
 800702a:	2b1d      	cmp	r3, #29
 800702c:	d001      	beq.n	8007032 <__sflush_r+0xb2>
 800702e:	2b16      	cmp	r3, #22
 8007030:	d101      	bne.n	8007036 <__sflush_r+0xb6>
 8007032:	602f      	str	r7, [r5, #0]
 8007034:	e7b1      	b.n	8006f9a <__sflush_r+0x1a>
 8007036:	89a3      	ldrh	r3, [r4, #12]
 8007038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800703c:	81a3      	strh	r3, [r4, #12]
 800703e:	e7ad      	b.n	8006f9c <__sflush_r+0x1c>
 8007040:	690f      	ldr	r7, [r1, #16]
 8007042:	2f00      	cmp	r7, #0
 8007044:	d0a9      	beq.n	8006f9a <__sflush_r+0x1a>
 8007046:	0793      	lsls	r3, r2, #30
 8007048:	680e      	ldr	r6, [r1, #0]
 800704a:	bf08      	it	eq
 800704c:	694b      	ldreq	r3, [r1, #20]
 800704e:	600f      	str	r7, [r1, #0]
 8007050:	bf18      	it	ne
 8007052:	2300      	movne	r3, #0
 8007054:	eba6 0807 	sub.w	r8, r6, r7
 8007058:	608b      	str	r3, [r1, #8]
 800705a:	f1b8 0f00 	cmp.w	r8, #0
 800705e:	dd9c      	ble.n	8006f9a <__sflush_r+0x1a>
 8007060:	6a21      	ldr	r1, [r4, #32]
 8007062:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007064:	4643      	mov	r3, r8
 8007066:	463a      	mov	r2, r7
 8007068:	4628      	mov	r0, r5
 800706a:	47b0      	blx	r6
 800706c:	2800      	cmp	r0, #0
 800706e:	dc06      	bgt.n	800707e <__sflush_r+0xfe>
 8007070:	89a3      	ldrh	r3, [r4, #12]
 8007072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007076:	81a3      	strh	r3, [r4, #12]
 8007078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800707c:	e78e      	b.n	8006f9c <__sflush_r+0x1c>
 800707e:	4407      	add	r7, r0
 8007080:	eba8 0800 	sub.w	r8, r8, r0
 8007084:	e7e9      	b.n	800705a <__sflush_r+0xda>
 8007086:	bf00      	nop
 8007088:	dfbffffe 	.word	0xdfbffffe

0800708c <_fflush_r>:
 800708c:	b538      	push	{r3, r4, r5, lr}
 800708e:	690b      	ldr	r3, [r1, #16]
 8007090:	4605      	mov	r5, r0
 8007092:	460c      	mov	r4, r1
 8007094:	b1db      	cbz	r3, 80070ce <_fflush_r+0x42>
 8007096:	b118      	cbz	r0, 80070a0 <_fflush_r+0x14>
 8007098:	6983      	ldr	r3, [r0, #24]
 800709a:	b90b      	cbnz	r3, 80070a0 <_fflush_r+0x14>
 800709c:	f000 f872 	bl	8007184 <__sinit>
 80070a0:	4b0c      	ldr	r3, [pc, #48]	; (80070d4 <_fflush_r+0x48>)
 80070a2:	429c      	cmp	r4, r3
 80070a4:	d109      	bne.n	80070ba <_fflush_r+0x2e>
 80070a6:	686c      	ldr	r4, [r5, #4]
 80070a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ac:	b17b      	cbz	r3, 80070ce <_fflush_r+0x42>
 80070ae:	4621      	mov	r1, r4
 80070b0:	4628      	mov	r0, r5
 80070b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070b6:	f7ff bf63 	b.w	8006f80 <__sflush_r>
 80070ba:	4b07      	ldr	r3, [pc, #28]	; (80070d8 <_fflush_r+0x4c>)
 80070bc:	429c      	cmp	r4, r3
 80070be:	d101      	bne.n	80070c4 <_fflush_r+0x38>
 80070c0:	68ac      	ldr	r4, [r5, #8]
 80070c2:	e7f1      	b.n	80070a8 <_fflush_r+0x1c>
 80070c4:	4b05      	ldr	r3, [pc, #20]	; (80070dc <_fflush_r+0x50>)
 80070c6:	429c      	cmp	r4, r3
 80070c8:	bf08      	it	eq
 80070ca:	68ec      	ldreq	r4, [r5, #12]
 80070cc:	e7ec      	b.n	80070a8 <_fflush_r+0x1c>
 80070ce:	2000      	movs	r0, #0
 80070d0:	bd38      	pop	{r3, r4, r5, pc}
 80070d2:	bf00      	nop
 80070d4:	08008530 	.word	0x08008530
 80070d8:	08008550 	.word	0x08008550
 80070dc:	08008510 	.word	0x08008510

080070e0 <fflush>:
 80070e0:	4601      	mov	r1, r0
 80070e2:	b920      	cbnz	r0, 80070ee <fflush+0xe>
 80070e4:	4b04      	ldr	r3, [pc, #16]	; (80070f8 <fflush+0x18>)
 80070e6:	4905      	ldr	r1, [pc, #20]	; (80070fc <fflush+0x1c>)
 80070e8:	6818      	ldr	r0, [r3, #0]
 80070ea:	f000 b8b7 	b.w	800725c <_fwalk_reent>
 80070ee:	4b04      	ldr	r3, [pc, #16]	; (8007100 <fflush+0x20>)
 80070f0:	6818      	ldr	r0, [r3, #0]
 80070f2:	f7ff bfcb 	b.w	800708c <_fflush_r>
 80070f6:	bf00      	nop
 80070f8:	08008570 	.word	0x08008570
 80070fc:	0800708d 	.word	0x0800708d
 8007100:	2000002c 	.word	0x2000002c

08007104 <std>:
 8007104:	2300      	movs	r3, #0
 8007106:	b510      	push	{r4, lr}
 8007108:	4604      	mov	r4, r0
 800710a:	e9c0 3300 	strd	r3, r3, [r0]
 800710e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007112:	6083      	str	r3, [r0, #8]
 8007114:	8181      	strh	r1, [r0, #12]
 8007116:	6643      	str	r3, [r0, #100]	; 0x64
 8007118:	81c2      	strh	r2, [r0, #14]
 800711a:	6183      	str	r3, [r0, #24]
 800711c:	4619      	mov	r1, r3
 800711e:	2208      	movs	r2, #8
 8007120:	305c      	adds	r0, #92	; 0x5c
 8007122:	f000 f8ed 	bl	8007300 <memset>
 8007126:	4b05      	ldr	r3, [pc, #20]	; (800713c <std+0x38>)
 8007128:	6263      	str	r3, [r4, #36]	; 0x24
 800712a:	4b05      	ldr	r3, [pc, #20]	; (8007140 <std+0x3c>)
 800712c:	62a3      	str	r3, [r4, #40]	; 0x28
 800712e:	4b05      	ldr	r3, [pc, #20]	; (8007144 <std+0x40>)
 8007130:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007132:	4b05      	ldr	r3, [pc, #20]	; (8007148 <std+0x44>)
 8007134:	6224      	str	r4, [r4, #32]
 8007136:	6323      	str	r3, [r4, #48]	; 0x30
 8007138:	bd10      	pop	{r4, pc}
 800713a:	bf00      	nop
 800713c:	08007681 	.word	0x08007681
 8007140:	080076a3 	.word	0x080076a3
 8007144:	080076db 	.word	0x080076db
 8007148:	080076ff 	.word	0x080076ff

0800714c <_cleanup_r>:
 800714c:	4901      	ldr	r1, [pc, #4]	; (8007154 <_cleanup_r+0x8>)
 800714e:	f000 b885 	b.w	800725c <_fwalk_reent>
 8007152:	bf00      	nop
 8007154:	0800708d 	.word	0x0800708d

08007158 <__sfmoreglue>:
 8007158:	b570      	push	{r4, r5, r6, lr}
 800715a:	2368      	movs	r3, #104	; 0x68
 800715c:	1e4d      	subs	r5, r1, #1
 800715e:	435d      	muls	r5, r3
 8007160:	460e      	mov	r6, r1
 8007162:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007166:	f000 f93f 	bl	80073e8 <_malloc_r>
 800716a:	4604      	mov	r4, r0
 800716c:	b140      	cbz	r0, 8007180 <__sfmoreglue+0x28>
 800716e:	2100      	movs	r1, #0
 8007170:	e9c0 1600 	strd	r1, r6, [r0]
 8007174:	300c      	adds	r0, #12
 8007176:	60a0      	str	r0, [r4, #8]
 8007178:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800717c:	f000 f8c0 	bl	8007300 <memset>
 8007180:	4620      	mov	r0, r4
 8007182:	bd70      	pop	{r4, r5, r6, pc}

08007184 <__sinit>:
 8007184:	6983      	ldr	r3, [r0, #24]
 8007186:	b510      	push	{r4, lr}
 8007188:	4604      	mov	r4, r0
 800718a:	bb33      	cbnz	r3, 80071da <__sinit+0x56>
 800718c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007190:	6503      	str	r3, [r0, #80]	; 0x50
 8007192:	4b12      	ldr	r3, [pc, #72]	; (80071dc <__sinit+0x58>)
 8007194:	4a12      	ldr	r2, [pc, #72]	; (80071e0 <__sinit+0x5c>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6282      	str	r2, [r0, #40]	; 0x28
 800719a:	4298      	cmp	r0, r3
 800719c:	bf04      	itt	eq
 800719e:	2301      	moveq	r3, #1
 80071a0:	6183      	streq	r3, [r0, #24]
 80071a2:	f000 f81f 	bl	80071e4 <__sfp>
 80071a6:	6060      	str	r0, [r4, #4]
 80071a8:	4620      	mov	r0, r4
 80071aa:	f000 f81b 	bl	80071e4 <__sfp>
 80071ae:	60a0      	str	r0, [r4, #8]
 80071b0:	4620      	mov	r0, r4
 80071b2:	f000 f817 	bl	80071e4 <__sfp>
 80071b6:	2200      	movs	r2, #0
 80071b8:	60e0      	str	r0, [r4, #12]
 80071ba:	2104      	movs	r1, #4
 80071bc:	6860      	ldr	r0, [r4, #4]
 80071be:	f7ff ffa1 	bl	8007104 <std>
 80071c2:	68a0      	ldr	r0, [r4, #8]
 80071c4:	2201      	movs	r2, #1
 80071c6:	2109      	movs	r1, #9
 80071c8:	f7ff ff9c 	bl	8007104 <std>
 80071cc:	68e0      	ldr	r0, [r4, #12]
 80071ce:	2202      	movs	r2, #2
 80071d0:	2112      	movs	r1, #18
 80071d2:	f7ff ff97 	bl	8007104 <std>
 80071d6:	2301      	movs	r3, #1
 80071d8:	61a3      	str	r3, [r4, #24]
 80071da:	bd10      	pop	{r4, pc}
 80071dc:	08008570 	.word	0x08008570
 80071e0:	0800714d 	.word	0x0800714d

080071e4 <__sfp>:
 80071e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e6:	4b1b      	ldr	r3, [pc, #108]	; (8007254 <__sfp+0x70>)
 80071e8:	681e      	ldr	r6, [r3, #0]
 80071ea:	69b3      	ldr	r3, [r6, #24]
 80071ec:	4607      	mov	r7, r0
 80071ee:	b913      	cbnz	r3, 80071f6 <__sfp+0x12>
 80071f0:	4630      	mov	r0, r6
 80071f2:	f7ff ffc7 	bl	8007184 <__sinit>
 80071f6:	3648      	adds	r6, #72	; 0x48
 80071f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80071fc:	3b01      	subs	r3, #1
 80071fe:	d503      	bpl.n	8007208 <__sfp+0x24>
 8007200:	6833      	ldr	r3, [r6, #0]
 8007202:	b1db      	cbz	r3, 800723c <__sfp+0x58>
 8007204:	6836      	ldr	r6, [r6, #0]
 8007206:	e7f7      	b.n	80071f8 <__sfp+0x14>
 8007208:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800720c:	b9a5      	cbnz	r5, 8007238 <__sfp+0x54>
 800720e:	4b12      	ldr	r3, [pc, #72]	; (8007258 <__sfp+0x74>)
 8007210:	6665      	str	r5, [r4, #100]	; 0x64
 8007212:	e9c4 5500 	strd	r5, r5, [r4]
 8007216:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800721a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800721e:	60a5      	str	r5, [r4, #8]
 8007220:	2208      	movs	r2, #8
 8007222:	4629      	mov	r1, r5
 8007224:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007228:	f000 f86a 	bl	8007300 <memset>
 800722c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007230:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007234:	4620      	mov	r0, r4
 8007236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007238:	3468      	adds	r4, #104	; 0x68
 800723a:	e7df      	b.n	80071fc <__sfp+0x18>
 800723c:	2104      	movs	r1, #4
 800723e:	4638      	mov	r0, r7
 8007240:	f7ff ff8a 	bl	8007158 <__sfmoreglue>
 8007244:	4604      	mov	r4, r0
 8007246:	6030      	str	r0, [r6, #0]
 8007248:	2800      	cmp	r0, #0
 800724a:	d1db      	bne.n	8007204 <__sfp+0x20>
 800724c:	230c      	movs	r3, #12
 800724e:	603b      	str	r3, [r7, #0]
 8007250:	e7f0      	b.n	8007234 <__sfp+0x50>
 8007252:	bf00      	nop
 8007254:	08008570 	.word	0x08008570
 8007258:	ffff0001 	.word	0xffff0001

0800725c <_fwalk_reent>:
 800725c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007260:	4606      	mov	r6, r0
 8007262:	4688      	mov	r8, r1
 8007264:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007268:	2700      	movs	r7, #0
 800726a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800726e:	f1b9 0901 	subs.w	r9, r9, #1
 8007272:	d505      	bpl.n	8007280 <_fwalk_reent+0x24>
 8007274:	6824      	ldr	r4, [r4, #0]
 8007276:	2c00      	cmp	r4, #0
 8007278:	d1f7      	bne.n	800726a <_fwalk_reent+0xe>
 800727a:	4638      	mov	r0, r7
 800727c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007280:	89ab      	ldrh	r3, [r5, #12]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d907      	bls.n	8007296 <_fwalk_reent+0x3a>
 8007286:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800728a:	3301      	adds	r3, #1
 800728c:	d003      	beq.n	8007296 <_fwalk_reent+0x3a>
 800728e:	4629      	mov	r1, r5
 8007290:	4630      	mov	r0, r6
 8007292:	47c0      	blx	r8
 8007294:	4307      	orrs	r7, r0
 8007296:	3568      	adds	r5, #104	; 0x68
 8007298:	e7e9      	b.n	800726e <_fwalk_reent+0x12>
	...

0800729c <__libc_init_array>:
 800729c:	b570      	push	{r4, r5, r6, lr}
 800729e:	4d0d      	ldr	r5, [pc, #52]	; (80072d4 <__libc_init_array+0x38>)
 80072a0:	4c0d      	ldr	r4, [pc, #52]	; (80072d8 <__libc_init_array+0x3c>)
 80072a2:	1b64      	subs	r4, r4, r5
 80072a4:	10a4      	asrs	r4, r4, #2
 80072a6:	2600      	movs	r6, #0
 80072a8:	42a6      	cmp	r6, r4
 80072aa:	d109      	bne.n	80072c0 <__libc_init_array+0x24>
 80072ac:	4d0b      	ldr	r5, [pc, #44]	; (80072dc <__libc_init_array+0x40>)
 80072ae:	4c0c      	ldr	r4, [pc, #48]	; (80072e0 <__libc_init_array+0x44>)
 80072b0:	f000 ffec 	bl	800828c <_init>
 80072b4:	1b64      	subs	r4, r4, r5
 80072b6:	10a4      	asrs	r4, r4, #2
 80072b8:	2600      	movs	r6, #0
 80072ba:	42a6      	cmp	r6, r4
 80072bc:	d105      	bne.n	80072ca <__libc_init_array+0x2e>
 80072be:	bd70      	pop	{r4, r5, r6, pc}
 80072c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80072c4:	4798      	blx	r3
 80072c6:	3601      	adds	r6, #1
 80072c8:	e7ee      	b.n	80072a8 <__libc_init_array+0xc>
 80072ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ce:	4798      	blx	r3
 80072d0:	3601      	adds	r6, #1
 80072d2:	e7f2      	b.n	80072ba <__libc_init_array+0x1e>
 80072d4:	080085b0 	.word	0x080085b0
 80072d8:	080085b0 	.word	0x080085b0
 80072dc:	080085b0 	.word	0x080085b0
 80072e0:	080085b4 	.word	0x080085b4

080072e4 <memcpy>:
 80072e4:	440a      	add	r2, r1
 80072e6:	4291      	cmp	r1, r2
 80072e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80072ec:	d100      	bne.n	80072f0 <memcpy+0xc>
 80072ee:	4770      	bx	lr
 80072f0:	b510      	push	{r4, lr}
 80072f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072fa:	4291      	cmp	r1, r2
 80072fc:	d1f9      	bne.n	80072f2 <memcpy+0xe>
 80072fe:	bd10      	pop	{r4, pc}

08007300 <memset>:
 8007300:	4402      	add	r2, r0
 8007302:	4603      	mov	r3, r0
 8007304:	4293      	cmp	r3, r2
 8007306:	d100      	bne.n	800730a <memset+0xa>
 8007308:	4770      	bx	lr
 800730a:	f803 1b01 	strb.w	r1, [r3], #1
 800730e:	e7f9      	b.n	8007304 <memset+0x4>

08007310 <_free_r>:
 8007310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007312:	2900      	cmp	r1, #0
 8007314:	d044      	beq.n	80073a0 <_free_r+0x90>
 8007316:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800731a:	9001      	str	r0, [sp, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	f1a1 0404 	sub.w	r4, r1, #4
 8007322:	bfb8      	it	lt
 8007324:	18e4      	addlt	r4, r4, r3
 8007326:	f000 fb49 	bl	80079bc <__malloc_lock>
 800732a:	4a1e      	ldr	r2, [pc, #120]	; (80073a4 <_free_r+0x94>)
 800732c:	9801      	ldr	r0, [sp, #4]
 800732e:	6813      	ldr	r3, [r2, #0]
 8007330:	b933      	cbnz	r3, 8007340 <_free_r+0x30>
 8007332:	6063      	str	r3, [r4, #4]
 8007334:	6014      	str	r4, [r2, #0]
 8007336:	b003      	add	sp, #12
 8007338:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800733c:	f000 bb3f 	b.w	80079be <__malloc_unlock>
 8007340:	42a3      	cmp	r3, r4
 8007342:	d908      	bls.n	8007356 <_free_r+0x46>
 8007344:	6825      	ldr	r5, [r4, #0]
 8007346:	1961      	adds	r1, r4, r5
 8007348:	428b      	cmp	r3, r1
 800734a:	bf01      	itttt	eq
 800734c:	6819      	ldreq	r1, [r3, #0]
 800734e:	685b      	ldreq	r3, [r3, #4]
 8007350:	1949      	addeq	r1, r1, r5
 8007352:	6021      	streq	r1, [r4, #0]
 8007354:	e7ed      	b.n	8007332 <_free_r+0x22>
 8007356:	461a      	mov	r2, r3
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	b10b      	cbz	r3, 8007360 <_free_r+0x50>
 800735c:	42a3      	cmp	r3, r4
 800735e:	d9fa      	bls.n	8007356 <_free_r+0x46>
 8007360:	6811      	ldr	r1, [r2, #0]
 8007362:	1855      	adds	r5, r2, r1
 8007364:	42a5      	cmp	r5, r4
 8007366:	d10b      	bne.n	8007380 <_free_r+0x70>
 8007368:	6824      	ldr	r4, [r4, #0]
 800736a:	4421      	add	r1, r4
 800736c:	1854      	adds	r4, r2, r1
 800736e:	42a3      	cmp	r3, r4
 8007370:	6011      	str	r1, [r2, #0]
 8007372:	d1e0      	bne.n	8007336 <_free_r+0x26>
 8007374:	681c      	ldr	r4, [r3, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	6053      	str	r3, [r2, #4]
 800737a:	440c      	add	r4, r1
 800737c:	6014      	str	r4, [r2, #0]
 800737e:	e7da      	b.n	8007336 <_free_r+0x26>
 8007380:	d902      	bls.n	8007388 <_free_r+0x78>
 8007382:	230c      	movs	r3, #12
 8007384:	6003      	str	r3, [r0, #0]
 8007386:	e7d6      	b.n	8007336 <_free_r+0x26>
 8007388:	6825      	ldr	r5, [r4, #0]
 800738a:	1961      	adds	r1, r4, r5
 800738c:	428b      	cmp	r3, r1
 800738e:	bf04      	itt	eq
 8007390:	6819      	ldreq	r1, [r3, #0]
 8007392:	685b      	ldreq	r3, [r3, #4]
 8007394:	6063      	str	r3, [r4, #4]
 8007396:	bf04      	itt	eq
 8007398:	1949      	addeq	r1, r1, r5
 800739a:	6021      	streq	r1, [r4, #0]
 800739c:	6054      	str	r4, [r2, #4]
 800739e:	e7ca      	b.n	8007336 <_free_r+0x26>
 80073a0:	b003      	add	sp, #12
 80073a2:	bd30      	pop	{r4, r5, pc}
 80073a4:	20000694 	.word	0x20000694

080073a8 <sbrk_aligned>:
 80073a8:	b570      	push	{r4, r5, r6, lr}
 80073aa:	4e0e      	ldr	r6, [pc, #56]	; (80073e4 <sbrk_aligned+0x3c>)
 80073ac:	460c      	mov	r4, r1
 80073ae:	6831      	ldr	r1, [r6, #0]
 80073b0:	4605      	mov	r5, r0
 80073b2:	b911      	cbnz	r1, 80073ba <sbrk_aligned+0x12>
 80073b4:	f000 f954 	bl	8007660 <_sbrk_r>
 80073b8:	6030      	str	r0, [r6, #0]
 80073ba:	4621      	mov	r1, r4
 80073bc:	4628      	mov	r0, r5
 80073be:	f000 f94f 	bl	8007660 <_sbrk_r>
 80073c2:	1c43      	adds	r3, r0, #1
 80073c4:	d00a      	beq.n	80073dc <sbrk_aligned+0x34>
 80073c6:	1cc4      	adds	r4, r0, #3
 80073c8:	f024 0403 	bic.w	r4, r4, #3
 80073cc:	42a0      	cmp	r0, r4
 80073ce:	d007      	beq.n	80073e0 <sbrk_aligned+0x38>
 80073d0:	1a21      	subs	r1, r4, r0
 80073d2:	4628      	mov	r0, r5
 80073d4:	f000 f944 	bl	8007660 <_sbrk_r>
 80073d8:	3001      	adds	r0, #1
 80073da:	d101      	bne.n	80073e0 <sbrk_aligned+0x38>
 80073dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80073e0:	4620      	mov	r0, r4
 80073e2:	bd70      	pop	{r4, r5, r6, pc}
 80073e4:	20000698 	.word	0x20000698

080073e8 <_malloc_r>:
 80073e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ec:	1ccd      	adds	r5, r1, #3
 80073ee:	f025 0503 	bic.w	r5, r5, #3
 80073f2:	3508      	adds	r5, #8
 80073f4:	2d0c      	cmp	r5, #12
 80073f6:	bf38      	it	cc
 80073f8:	250c      	movcc	r5, #12
 80073fa:	2d00      	cmp	r5, #0
 80073fc:	4607      	mov	r7, r0
 80073fe:	db01      	blt.n	8007404 <_malloc_r+0x1c>
 8007400:	42a9      	cmp	r1, r5
 8007402:	d905      	bls.n	8007410 <_malloc_r+0x28>
 8007404:	230c      	movs	r3, #12
 8007406:	603b      	str	r3, [r7, #0]
 8007408:	2600      	movs	r6, #0
 800740a:	4630      	mov	r0, r6
 800740c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007410:	4e2e      	ldr	r6, [pc, #184]	; (80074cc <_malloc_r+0xe4>)
 8007412:	f000 fad3 	bl	80079bc <__malloc_lock>
 8007416:	6833      	ldr	r3, [r6, #0]
 8007418:	461c      	mov	r4, r3
 800741a:	bb34      	cbnz	r4, 800746a <_malloc_r+0x82>
 800741c:	4629      	mov	r1, r5
 800741e:	4638      	mov	r0, r7
 8007420:	f7ff ffc2 	bl	80073a8 <sbrk_aligned>
 8007424:	1c43      	adds	r3, r0, #1
 8007426:	4604      	mov	r4, r0
 8007428:	d14d      	bne.n	80074c6 <_malloc_r+0xde>
 800742a:	6834      	ldr	r4, [r6, #0]
 800742c:	4626      	mov	r6, r4
 800742e:	2e00      	cmp	r6, #0
 8007430:	d140      	bne.n	80074b4 <_malloc_r+0xcc>
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	4631      	mov	r1, r6
 8007436:	4638      	mov	r0, r7
 8007438:	eb04 0803 	add.w	r8, r4, r3
 800743c:	f000 f910 	bl	8007660 <_sbrk_r>
 8007440:	4580      	cmp	r8, r0
 8007442:	d13a      	bne.n	80074ba <_malloc_r+0xd2>
 8007444:	6823      	ldr	r3, [r4, #0]
 8007446:	3503      	adds	r5, #3
 8007448:	1aed      	subs	r5, r5, r3
 800744a:	f025 0503 	bic.w	r5, r5, #3
 800744e:	3508      	adds	r5, #8
 8007450:	2d0c      	cmp	r5, #12
 8007452:	bf38      	it	cc
 8007454:	250c      	movcc	r5, #12
 8007456:	4629      	mov	r1, r5
 8007458:	4638      	mov	r0, r7
 800745a:	f7ff ffa5 	bl	80073a8 <sbrk_aligned>
 800745e:	3001      	adds	r0, #1
 8007460:	d02b      	beq.n	80074ba <_malloc_r+0xd2>
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	442b      	add	r3, r5
 8007466:	6023      	str	r3, [r4, #0]
 8007468:	e00e      	b.n	8007488 <_malloc_r+0xa0>
 800746a:	6822      	ldr	r2, [r4, #0]
 800746c:	1b52      	subs	r2, r2, r5
 800746e:	d41e      	bmi.n	80074ae <_malloc_r+0xc6>
 8007470:	2a0b      	cmp	r2, #11
 8007472:	d916      	bls.n	80074a2 <_malloc_r+0xba>
 8007474:	1961      	adds	r1, r4, r5
 8007476:	42a3      	cmp	r3, r4
 8007478:	6025      	str	r5, [r4, #0]
 800747a:	bf18      	it	ne
 800747c:	6059      	strne	r1, [r3, #4]
 800747e:	6863      	ldr	r3, [r4, #4]
 8007480:	bf08      	it	eq
 8007482:	6031      	streq	r1, [r6, #0]
 8007484:	5162      	str	r2, [r4, r5]
 8007486:	604b      	str	r3, [r1, #4]
 8007488:	4638      	mov	r0, r7
 800748a:	f104 060b 	add.w	r6, r4, #11
 800748e:	f000 fa96 	bl	80079be <__malloc_unlock>
 8007492:	f026 0607 	bic.w	r6, r6, #7
 8007496:	1d23      	adds	r3, r4, #4
 8007498:	1af2      	subs	r2, r6, r3
 800749a:	d0b6      	beq.n	800740a <_malloc_r+0x22>
 800749c:	1b9b      	subs	r3, r3, r6
 800749e:	50a3      	str	r3, [r4, r2]
 80074a0:	e7b3      	b.n	800740a <_malloc_r+0x22>
 80074a2:	6862      	ldr	r2, [r4, #4]
 80074a4:	42a3      	cmp	r3, r4
 80074a6:	bf0c      	ite	eq
 80074a8:	6032      	streq	r2, [r6, #0]
 80074aa:	605a      	strne	r2, [r3, #4]
 80074ac:	e7ec      	b.n	8007488 <_malloc_r+0xa0>
 80074ae:	4623      	mov	r3, r4
 80074b0:	6864      	ldr	r4, [r4, #4]
 80074b2:	e7b2      	b.n	800741a <_malloc_r+0x32>
 80074b4:	4634      	mov	r4, r6
 80074b6:	6876      	ldr	r6, [r6, #4]
 80074b8:	e7b9      	b.n	800742e <_malloc_r+0x46>
 80074ba:	230c      	movs	r3, #12
 80074bc:	603b      	str	r3, [r7, #0]
 80074be:	4638      	mov	r0, r7
 80074c0:	f000 fa7d 	bl	80079be <__malloc_unlock>
 80074c4:	e7a1      	b.n	800740a <_malloc_r+0x22>
 80074c6:	6025      	str	r5, [r4, #0]
 80074c8:	e7de      	b.n	8007488 <_malloc_r+0xa0>
 80074ca:	bf00      	nop
 80074cc:	20000694 	.word	0x20000694

080074d0 <iprintf>:
 80074d0:	b40f      	push	{r0, r1, r2, r3}
 80074d2:	4b0a      	ldr	r3, [pc, #40]	; (80074fc <iprintf+0x2c>)
 80074d4:	b513      	push	{r0, r1, r4, lr}
 80074d6:	681c      	ldr	r4, [r3, #0]
 80074d8:	b124      	cbz	r4, 80074e4 <iprintf+0x14>
 80074da:	69a3      	ldr	r3, [r4, #24]
 80074dc:	b913      	cbnz	r3, 80074e4 <iprintf+0x14>
 80074de:	4620      	mov	r0, r4
 80074e0:	f7ff fe50 	bl	8007184 <__sinit>
 80074e4:	ab05      	add	r3, sp, #20
 80074e6:	9a04      	ldr	r2, [sp, #16]
 80074e8:	68a1      	ldr	r1, [r4, #8]
 80074ea:	9301      	str	r3, [sp, #4]
 80074ec:	4620      	mov	r0, r4
 80074ee:	f000 fa91 	bl	8007a14 <_vfiprintf_r>
 80074f2:	b002      	add	sp, #8
 80074f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074f8:	b004      	add	sp, #16
 80074fa:	4770      	bx	lr
 80074fc:	2000002c 	.word	0x2000002c

08007500 <putchar>:
 8007500:	4b09      	ldr	r3, [pc, #36]	; (8007528 <putchar+0x28>)
 8007502:	b513      	push	{r0, r1, r4, lr}
 8007504:	681c      	ldr	r4, [r3, #0]
 8007506:	4601      	mov	r1, r0
 8007508:	b134      	cbz	r4, 8007518 <putchar+0x18>
 800750a:	69a3      	ldr	r3, [r4, #24]
 800750c:	b923      	cbnz	r3, 8007518 <putchar+0x18>
 800750e:	9001      	str	r0, [sp, #4]
 8007510:	4620      	mov	r0, r4
 8007512:	f7ff fe37 	bl	8007184 <__sinit>
 8007516:	9901      	ldr	r1, [sp, #4]
 8007518:	68a2      	ldr	r2, [r4, #8]
 800751a:	4620      	mov	r0, r4
 800751c:	b002      	add	sp, #8
 800751e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007522:	f000 b803 	b.w	800752c <_putc_r>
 8007526:	bf00      	nop
 8007528:	2000002c 	.word	0x2000002c

0800752c <_putc_r>:
 800752c:	b570      	push	{r4, r5, r6, lr}
 800752e:	460d      	mov	r5, r1
 8007530:	4614      	mov	r4, r2
 8007532:	4606      	mov	r6, r0
 8007534:	b118      	cbz	r0, 800753e <_putc_r+0x12>
 8007536:	6983      	ldr	r3, [r0, #24]
 8007538:	b90b      	cbnz	r3, 800753e <_putc_r+0x12>
 800753a:	f7ff fe23 	bl	8007184 <__sinit>
 800753e:	4b13      	ldr	r3, [pc, #76]	; (800758c <_putc_r+0x60>)
 8007540:	429c      	cmp	r4, r3
 8007542:	d112      	bne.n	800756a <_putc_r+0x3e>
 8007544:	6874      	ldr	r4, [r6, #4]
 8007546:	68a3      	ldr	r3, [r4, #8]
 8007548:	3b01      	subs	r3, #1
 800754a:	2b00      	cmp	r3, #0
 800754c:	60a3      	str	r3, [r4, #8]
 800754e:	da16      	bge.n	800757e <_putc_r+0x52>
 8007550:	69a2      	ldr	r2, [r4, #24]
 8007552:	4293      	cmp	r3, r2
 8007554:	db02      	blt.n	800755c <_putc_r+0x30>
 8007556:	b2eb      	uxtb	r3, r5
 8007558:	2b0a      	cmp	r3, #10
 800755a:	d110      	bne.n	800757e <_putc_r+0x52>
 800755c:	4622      	mov	r2, r4
 800755e:	4629      	mov	r1, r5
 8007560:	4630      	mov	r0, r6
 8007562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007566:	f000 b8cf 	b.w	8007708 <__swbuf_r>
 800756a:	4b09      	ldr	r3, [pc, #36]	; (8007590 <_putc_r+0x64>)
 800756c:	429c      	cmp	r4, r3
 800756e:	d101      	bne.n	8007574 <_putc_r+0x48>
 8007570:	68b4      	ldr	r4, [r6, #8]
 8007572:	e7e8      	b.n	8007546 <_putc_r+0x1a>
 8007574:	4b07      	ldr	r3, [pc, #28]	; (8007594 <_putc_r+0x68>)
 8007576:	429c      	cmp	r4, r3
 8007578:	bf08      	it	eq
 800757a:	68f4      	ldreq	r4, [r6, #12]
 800757c:	e7e3      	b.n	8007546 <_putc_r+0x1a>
 800757e:	6823      	ldr	r3, [r4, #0]
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	6022      	str	r2, [r4, #0]
 8007584:	701d      	strb	r5, [r3, #0]
 8007586:	b2e8      	uxtb	r0, r5
 8007588:	bd70      	pop	{r4, r5, r6, pc}
 800758a:	bf00      	nop
 800758c:	08008530 	.word	0x08008530
 8007590:	08008550 	.word	0x08008550
 8007594:	08008510 	.word	0x08008510

08007598 <_puts_r>:
 8007598:	b570      	push	{r4, r5, r6, lr}
 800759a:	460e      	mov	r6, r1
 800759c:	4605      	mov	r5, r0
 800759e:	b118      	cbz	r0, 80075a8 <_puts_r+0x10>
 80075a0:	6983      	ldr	r3, [r0, #24]
 80075a2:	b90b      	cbnz	r3, 80075a8 <_puts_r+0x10>
 80075a4:	f7ff fdee 	bl	8007184 <__sinit>
 80075a8:	69ab      	ldr	r3, [r5, #24]
 80075aa:	68ac      	ldr	r4, [r5, #8]
 80075ac:	b913      	cbnz	r3, 80075b4 <_puts_r+0x1c>
 80075ae:	4628      	mov	r0, r5
 80075b0:	f7ff fde8 	bl	8007184 <__sinit>
 80075b4:	4b23      	ldr	r3, [pc, #140]	; (8007644 <_puts_r+0xac>)
 80075b6:	429c      	cmp	r4, r3
 80075b8:	d117      	bne.n	80075ea <_puts_r+0x52>
 80075ba:	686c      	ldr	r4, [r5, #4]
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	071b      	lsls	r3, r3, #28
 80075c0:	d51d      	bpl.n	80075fe <_puts_r+0x66>
 80075c2:	6923      	ldr	r3, [r4, #16]
 80075c4:	b1db      	cbz	r3, 80075fe <_puts_r+0x66>
 80075c6:	3e01      	subs	r6, #1
 80075c8:	68a3      	ldr	r3, [r4, #8]
 80075ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80075ce:	3b01      	subs	r3, #1
 80075d0:	60a3      	str	r3, [r4, #8]
 80075d2:	b9e9      	cbnz	r1, 8007610 <_puts_r+0x78>
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	da2e      	bge.n	8007636 <_puts_r+0x9e>
 80075d8:	4622      	mov	r2, r4
 80075da:	210a      	movs	r1, #10
 80075dc:	4628      	mov	r0, r5
 80075de:	f000 f893 	bl	8007708 <__swbuf_r>
 80075e2:	3001      	adds	r0, #1
 80075e4:	d011      	beq.n	800760a <_puts_r+0x72>
 80075e6:	200a      	movs	r0, #10
 80075e8:	e011      	b.n	800760e <_puts_r+0x76>
 80075ea:	4b17      	ldr	r3, [pc, #92]	; (8007648 <_puts_r+0xb0>)
 80075ec:	429c      	cmp	r4, r3
 80075ee:	d101      	bne.n	80075f4 <_puts_r+0x5c>
 80075f0:	68ac      	ldr	r4, [r5, #8]
 80075f2:	e7e3      	b.n	80075bc <_puts_r+0x24>
 80075f4:	4b15      	ldr	r3, [pc, #84]	; (800764c <_puts_r+0xb4>)
 80075f6:	429c      	cmp	r4, r3
 80075f8:	bf08      	it	eq
 80075fa:	68ec      	ldreq	r4, [r5, #12]
 80075fc:	e7de      	b.n	80075bc <_puts_r+0x24>
 80075fe:	4621      	mov	r1, r4
 8007600:	4628      	mov	r0, r5
 8007602:	f000 f8e5 	bl	80077d0 <__swsetup_r>
 8007606:	2800      	cmp	r0, #0
 8007608:	d0dd      	beq.n	80075c6 <_puts_r+0x2e>
 800760a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800760e:	bd70      	pop	{r4, r5, r6, pc}
 8007610:	2b00      	cmp	r3, #0
 8007612:	da04      	bge.n	800761e <_puts_r+0x86>
 8007614:	69a2      	ldr	r2, [r4, #24]
 8007616:	429a      	cmp	r2, r3
 8007618:	dc06      	bgt.n	8007628 <_puts_r+0x90>
 800761a:	290a      	cmp	r1, #10
 800761c:	d004      	beq.n	8007628 <_puts_r+0x90>
 800761e:	6823      	ldr	r3, [r4, #0]
 8007620:	1c5a      	adds	r2, r3, #1
 8007622:	6022      	str	r2, [r4, #0]
 8007624:	7019      	strb	r1, [r3, #0]
 8007626:	e7cf      	b.n	80075c8 <_puts_r+0x30>
 8007628:	4622      	mov	r2, r4
 800762a:	4628      	mov	r0, r5
 800762c:	f000 f86c 	bl	8007708 <__swbuf_r>
 8007630:	3001      	adds	r0, #1
 8007632:	d1c9      	bne.n	80075c8 <_puts_r+0x30>
 8007634:	e7e9      	b.n	800760a <_puts_r+0x72>
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	200a      	movs	r0, #10
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	6022      	str	r2, [r4, #0]
 800763e:	7018      	strb	r0, [r3, #0]
 8007640:	e7e5      	b.n	800760e <_puts_r+0x76>
 8007642:	bf00      	nop
 8007644:	08008530 	.word	0x08008530
 8007648:	08008550 	.word	0x08008550
 800764c:	08008510 	.word	0x08008510

08007650 <puts>:
 8007650:	4b02      	ldr	r3, [pc, #8]	; (800765c <puts+0xc>)
 8007652:	4601      	mov	r1, r0
 8007654:	6818      	ldr	r0, [r3, #0]
 8007656:	f7ff bf9f 	b.w	8007598 <_puts_r>
 800765a:	bf00      	nop
 800765c:	2000002c 	.word	0x2000002c

08007660 <_sbrk_r>:
 8007660:	b538      	push	{r3, r4, r5, lr}
 8007662:	4d06      	ldr	r5, [pc, #24]	; (800767c <_sbrk_r+0x1c>)
 8007664:	2300      	movs	r3, #0
 8007666:	4604      	mov	r4, r0
 8007668:	4608      	mov	r0, r1
 800766a:	602b      	str	r3, [r5, #0]
 800766c:	f7fa f8ea 	bl	8001844 <_sbrk>
 8007670:	1c43      	adds	r3, r0, #1
 8007672:	d102      	bne.n	800767a <_sbrk_r+0x1a>
 8007674:	682b      	ldr	r3, [r5, #0]
 8007676:	b103      	cbz	r3, 800767a <_sbrk_r+0x1a>
 8007678:	6023      	str	r3, [r4, #0]
 800767a:	bd38      	pop	{r3, r4, r5, pc}
 800767c:	2000069c 	.word	0x2000069c

08007680 <__sread>:
 8007680:	b510      	push	{r4, lr}
 8007682:	460c      	mov	r4, r1
 8007684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007688:	f000 fad8 	bl	8007c3c <_read_r>
 800768c:	2800      	cmp	r0, #0
 800768e:	bfab      	itete	ge
 8007690:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007692:	89a3      	ldrhlt	r3, [r4, #12]
 8007694:	181b      	addge	r3, r3, r0
 8007696:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800769a:	bfac      	ite	ge
 800769c:	6563      	strge	r3, [r4, #84]	; 0x54
 800769e:	81a3      	strhlt	r3, [r4, #12]
 80076a0:	bd10      	pop	{r4, pc}

080076a2 <__swrite>:
 80076a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a6:	461f      	mov	r7, r3
 80076a8:	898b      	ldrh	r3, [r1, #12]
 80076aa:	05db      	lsls	r3, r3, #23
 80076ac:	4605      	mov	r5, r0
 80076ae:	460c      	mov	r4, r1
 80076b0:	4616      	mov	r6, r2
 80076b2:	d505      	bpl.n	80076c0 <__swrite+0x1e>
 80076b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b8:	2302      	movs	r3, #2
 80076ba:	2200      	movs	r2, #0
 80076bc:	f000 f906 	bl	80078cc <_lseek_r>
 80076c0:	89a3      	ldrh	r3, [r4, #12]
 80076c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076ca:	81a3      	strh	r3, [r4, #12]
 80076cc:	4632      	mov	r2, r6
 80076ce:	463b      	mov	r3, r7
 80076d0:	4628      	mov	r0, r5
 80076d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076d6:	f000 b869 	b.w	80077ac <_write_r>

080076da <__sseek>:
 80076da:	b510      	push	{r4, lr}
 80076dc:	460c      	mov	r4, r1
 80076de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e2:	f000 f8f3 	bl	80078cc <_lseek_r>
 80076e6:	1c43      	adds	r3, r0, #1
 80076e8:	89a3      	ldrh	r3, [r4, #12]
 80076ea:	bf15      	itete	ne
 80076ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80076ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80076f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076f6:	81a3      	strheq	r3, [r4, #12]
 80076f8:	bf18      	it	ne
 80076fa:	81a3      	strhne	r3, [r4, #12]
 80076fc:	bd10      	pop	{r4, pc}

080076fe <__sclose>:
 80076fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007702:	f000 b8d3 	b.w	80078ac <_close_r>
	...

08007708 <__swbuf_r>:
 8007708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770a:	460e      	mov	r6, r1
 800770c:	4614      	mov	r4, r2
 800770e:	4605      	mov	r5, r0
 8007710:	b118      	cbz	r0, 800771a <__swbuf_r+0x12>
 8007712:	6983      	ldr	r3, [r0, #24]
 8007714:	b90b      	cbnz	r3, 800771a <__swbuf_r+0x12>
 8007716:	f7ff fd35 	bl	8007184 <__sinit>
 800771a:	4b21      	ldr	r3, [pc, #132]	; (80077a0 <__swbuf_r+0x98>)
 800771c:	429c      	cmp	r4, r3
 800771e:	d12b      	bne.n	8007778 <__swbuf_r+0x70>
 8007720:	686c      	ldr	r4, [r5, #4]
 8007722:	69a3      	ldr	r3, [r4, #24]
 8007724:	60a3      	str	r3, [r4, #8]
 8007726:	89a3      	ldrh	r3, [r4, #12]
 8007728:	071a      	lsls	r2, r3, #28
 800772a:	d52f      	bpl.n	800778c <__swbuf_r+0x84>
 800772c:	6923      	ldr	r3, [r4, #16]
 800772e:	b36b      	cbz	r3, 800778c <__swbuf_r+0x84>
 8007730:	6923      	ldr	r3, [r4, #16]
 8007732:	6820      	ldr	r0, [r4, #0]
 8007734:	1ac0      	subs	r0, r0, r3
 8007736:	6963      	ldr	r3, [r4, #20]
 8007738:	b2f6      	uxtb	r6, r6
 800773a:	4283      	cmp	r3, r0
 800773c:	4637      	mov	r7, r6
 800773e:	dc04      	bgt.n	800774a <__swbuf_r+0x42>
 8007740:	4621      	mov	r1, r4
 8007742:	4628      	mov	r0, r5
 8007744:	f7ff fca2 	bl	800708c <_fflush_r>
 8007748:	bb30      	cbnz	r0, 8007798 <__swbuf_r+0x90>
 800774a:	68a3      	ldr	r3, [r4, #8]
 800774c:	3b01      	subs	r3, #1
 800774e:	60a3      	str	r3, [r4, #8]
 8007750:	6823      	ldr	r3, [r4, #0]
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	6022      	str	r2, [r4, #0]
 8007756:	701e      	strb	r6, [r3, #0]
 8007758:	6963      	ldr	r3, [r4, #20]
 800775a:	3001      	adds	r0, #1
 800775c:	4283      	cmp	r3, r0
 800775e:	d004      	beq.n	800776a <__swbuf_r+0x62>
 8007760:	89a3      	ldrh	r3, [r4, #12]
 8007762:	07db      	lsls	r3, r3, #31
 8007764:	d506      	bpl.n	8007774 <__swbuf_r+0x6c>
 8007766:	2e0a      	cmp	r6, #10
 8007768:	d104      	bne.n	8007774 <__swbuf_r+0x6c>
 800776a:	4621      	mov	r1, r4
 800776c:	4628      	mov	r0, r5
 800776e:	f7ff fc8d 	bl	800708c <_fflush_r>
 8007772:	b988      	cbnz	r0, 8007798 <__swbuf_r+0x90>
 8007774:	4638      	mov	r0, r7
 8007776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007778:	4b0a      	ldr	r3, [pc, #40]	; (80077a4 <__swbuf_r+0x9c>)
 800777a:	429c      	cmp	r4, r3
 800777c:	d101      	bne.n	8007782 <__swbuf_r+0x7a>
 800777e:	68ac      	ldr	r4, [r5, #8]
 8007780:	e7cf      	b.n	8007722 <__swbuf_r+0x1a>
 8007782:	4b09      	ldr	r3, [pc, #36]	; (80077a8 <__swbuf_r+0xa0>)
 8007784:	429c      	cmp	r4, r3
 8007786:	bf08      	it	eq
 8007788:	68ec      	ldreq	r4, [r5, #12]
 800778a:	e7ca      	b.n	8007722 <__swbuf_r+0x1a>
 800778c:	4621      	mov	r1, r4
 800778e:	4628      	mov	r0, r5
 8007790:	f000 f81e 	bl	80077d0 <__swsetup_r>
 8007794:	2800      	cmp	r0, #0
 8007796:	d0cb      	beq.n	8007730 <__swbuf_r+0x28>
 8007798:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800779c:	e7ea      	b.n	8007774 <__swbuf_r+0x6c>
 800779e:	bf00      	nop
 80077a0:	08008530 	.word	0x08008530
 80077a4:	08008550 	.word	0x08008550
 80077a8:	08008510 	.word	0x08008510

080077ac <_write_r>:
 80077ac:	b538      	push	{r3, r4, r5, lr}
 80077ae:	4d07      	ldr	r5, [pc, #28]	; (80077cc <_write_r+0x20>)
 80077b0:	4604      	mov	r4, r0
 80077b2:	4608      	mov	r0, r1
 80077b4:	4611      	mov	r1, r2
 80077b6:	2200      	movs	r2, #0
 80077b8:	602a      	str	r2, [r5, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	f7f9 fff1 	bl	80017a2 <_write>
 80077c0:	1c43      	adds	r3, r0, #1
 80077c2:	d102      	bne.n	80077ca <_write_r+0x1e>
 80077c4:	682b      	ldr	r3, [r5, #0]
 80077c6:	b103      	cbz	r3, 80077ca <_write_r+0x1e>
 80077c8:	6023      	str	r3, [r4, #0]
 80077ca:	bd38      	pop	{r3, r4, r5, pc}
 80077cc:	2000069c 	.word	0x2000069c

080077d0 <__swsetup_r>:
 80077d0:	4b32      	ldr	r3, [pc, #200]	; (800789c <__swsetup_r+0xcc>)
 80077d2:	b570      	push	{r4, r5, r6, lr}
 80077d4:	681d      	ldr	r5, [r3, #0]
 80077d6:	4606      	mov	r6, r0
 80077d8:	460c      	mov	r4, r1
 80077da:	b125      	cbz	r5, 80077e6 <__swsetup_r+0x16>
 80077dc:	69ab      	ldr	r3, [r5, #24]
 80077de:	b913      	cbnz	r3, 80077e6 <__swsetup_r+0x16>
 80077e0:	4628      	mov	r0, r5
 80077e2:	f7ff fccf 	bl	8007184 <__sinit>
 80077e6:	4b2e      	ldr	r3, [pc, #184]	; (80078a0 <__swsetup_r+0xd0>)
 80077e8:	429c      	cmp	r4, r3
 80077ea:	d10f      	bne.n	800780c <__swsetup_r+0x3c>
 80077ec:	686c      	ldr	r4, [r5, #4]
 80077ee:	89a3      	ldrh	r3, [r4, #12]
 80077f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077f4:	0719      	lsls	r1, r3, #28
 80077f6:	d42c      	bmi.n	8007852 <__swsetup_r+0x82>
 80077f8:	06dd      	lsls	r5, r3, #27
 80077fa:	d411      	bmi.n	8007820 <__swsetup_r+0x50>
 80077fc:	2309      	movs	r3, #9
 80077fe:	6033      	str	r3, [r6, #0]
 8007800:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007804:	81a3      	strh	r3, [r4, #12]
 8007806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800780a:	e03e      	b.n	800788a <__swsetup_r+0xba>
 800780c:	4b25      	ldr	r3, [pc, #148]	; (80078a4 <__swsetup_r+0xd4>)
 800780e:	429c      	cmp	r4, r3
 8007810:	d101      	bne.n	8007816 <__swsetup_r+0x46>
 8007812:	68ac      	ldr	r4, [r5, #8]
 8007814:	e7eb      	b.n	80077ee <__swsetup_r+0x1e>
 8007816:	4b24      	ldr	r3, [pc, #144]	; (80078a8 <__swsetup_r+0xd8>)
 8007818:	429c      	cmp	r4, r3
 800781a:	bf08      	it	eq
 800781c:	68ec      	ldreq	r4, [r5, #12]
 800781e:	e7e6      	b.n	80077ee <__swsetup_r+0x1e>
 8007820:	0758      	lsls	r0, r3, #29
 8007822:	d512      	bpl.n	800784a <__swsetup_r+0x7a>
 8007824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007826:	b141      	cbz	r1, 800783a <__swsetup_r+0x6a>
 8007828:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800782c:	4299      	cmp	r1, r3
 800782e:	d002      	beq.n	8007836 <__swsetup_r+0x66>
 8007830:	4630      	mov	r0, r6
 8007832:	f7ff fd6d 	bl	8007310 <_free_r>
 8007836:	2300      	movs	r3, #0
 8007838:	6363      	str	r3, [r4, #52]	; 0x34
 800783a:	89a3      	ldrh	r3, [r4, #12]
 800783c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007840:	81a3      	strh	r3, [r4, #12]
 8007842:	2300      	movs	r3, #0
 8007844:	6063      	str	r3, [r4, #4]
 8007846:	6923      	ldr	r3, [r4, #16]
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	89a3      	ldrh	r3, [r4, #12]
 800784c:	f043 0308 	orr.w	r3, r3, #8
 8007850:	81a3      	strh	r3, [r4, #12]
 8007852:	6923      	ldr	r3, [r4, #16]
 8007854:	b94b      	cbnz	r3, 800786a <__swsetup_r+0x9a>
 8007856:	89a3      	ldrh	r3, [r4, #12]
 8007858:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800785c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007860:	d003      	beq.n	800786a <__swsetup_r+0x9a>
 8007862:	4621      	mov	r1, r4
 8007864:	4630      	mov	r0, r6
 8007866:	f000 f869 	bl	800793c <__smakebuf_r>
 800786a:	89a0      	ldrh	r0, [r4, #12]
 800786c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007870:	f010 0301 	ands.w	r3, r0, #1
 8007874:	d00a      	beq.n	800788c <__swsetup_r+0xbc>
 8007876:	2300      	movs	r3, #0
 8007878:	60a3      	str	r3, [r4, #8]
 800787a:	6963      	ldr	r3, [r4, #20]
 800787c:	425b      	negs	r3, r3
 800787e:	61a3      	str	r3, [r4, #24]
 8007880:	6923      	ldr	r3, [r4, #16]
 8007882:	b943      	cbnz	r3, 8007896 <__swsetup_r+0xc6>
 8007884:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007888:	d1ba      	bne.n	8007800 <__swsetup_r+0x30>
 800788a:	bd70      	pop	{r4, r5, r6, pc}
 800788c:	0781      	lsls	r1, r0, #30
 800788e:	bf58      	it	pl
 8007890:	6963      	ldrpl	r3, [r4, #20]
 8007892:	60a3      	str	r3, [r4, #8]
 8007894:	e7f4      	b.n	8007880 <__swsetup_r+0xb0>
 8007896:	2000      	movs	r0, #0
 8007898:	e7f7      	b.n	800788a <__swsetup_r+0xba>
 800789a:	bf00      	nop
 800789c:	2000002c 	.word	0x2000002c
 80078a0:	08008530 	.word	0x08008530
 80078a4:	08008550 	.word	0x08008550
 80078a8:	08008510 	.word	0x08008510

080078ac <_close_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4d06      	ldr	r5, [pc, #24]	; (80078c8 <_close_r+0x1c>)
 80078b0:	2300      	movs	r3, #0
 80078b2:	4604      	mov	r4, r0
 80078b4:	4608      	mov	r0, r1
 80078b6:	602b      	str	r3, [r5, #0]
 80078b8:	f7f9 ff8f 	bl	80017da <_close>
 80078bc:	1c43      	adds	r3, r0, #1
 80078be:	d102      	bne.n	80078c6 <_close_r+0x1a>
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	b103      	cbz	r3, 80078c6 <_close_r+0x1a>
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	bd38      	pop	{r3, r4, r5, pc}
 80078c8:	2000069c 	.word	0x2000069c

080078cc <_lseek_r>:
 80078cc:	b538      	push	{r3, r4, r5, lr}
 80078ce:	4d07      	ldr	r5, [pc, #28]	; (80078ec <_lseek_r+0x20>)
 80078d0:	4604      	mov	r4, r0
 80078d2:	4608      	mov	r0, r1
 80078d4:	4611      	mov	r1, r2
 80078d6:	2200      	movs	r2, #0
 80078d8:	602a      	str	r2, [r5, #0]
 80078da:	461a      	mov	r2, r3
 80078dc:	f7f9 ffa4 	bl	8001828 <_lseek>
 80078e0:	1c43      	adds	r3, r0, #1
 80078e2:	d102      	bne.n	80078ea <_lseek_r+0x1e>
 80078e4:	682b      	ldr	r3, [r5, #0]
 80078e6:	b103      	cbz	r3, 80078ea <_lseek_r+0x1e>
 80078e8:	6023      	str	r3, [r4, #0]
 80078ea:	bd38      	pop	{r3, r4, r5, pc}
 80078ec:	2000069c 	.word	0x2000069c

080078f0 <__swhatbuf_r>:
 80078f0:	b570      	push	{r4, r5, r6, lr}
 80078f2:	460c      	mov	r4, r1
 80078f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f8:	2900      	cmp	r1, #0
 80078fa:	b096      	sub	sp, #88	; 0x58
 80078fc:	4615      	mov	r5, r2
 80078fe:	461e      	mov	r6, r3
 8007900:	da0d      	bge.n	800791e <__swhatbuf_r+0x2e>
 8007902:	89a3      	ldrh	r3, [r4, #12]
 8007904:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007908:	f04f 0100 	mov.w	r1, #0
 800790c:	bf0c      	ite	eq
 800790e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007912:	2340      	movne	r3, #64	; 0x40
 8007914:	2000      	movs	r0, #0
 8007916:	6031      	str	r1, [r6, #0]
 8007918:	602b      	str	r3, [r5, #0]
 800791a:	b016      	add	sp, #88	; 0x58
 800791c:	bd70      	pop	{r4, r5, r6, pc}
 800791e:	466a      	mov	r2, sp
 8007920:	f000 f99e 	bl	8007c60 <_fstat_r>
 8007924:	2800      	cmp	r0, #0
 8007926:	dbec      	blt.n	8007902 <__swhatbuf_r+0x12>
 8007928:	9901      	ldr	r1, [sp, #4]
 800792a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800792e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007932:	4259      	negs	r1, r3
 8007934:	4159      	adcs	r1, r3
 8007936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800793a:	e7eb      	b.n	8007914 <__swhatbuf_r+0x24>

0800793c <__smakebuf_r>:
 800793c:	898b      	ldrh	r3, [r1, #12]
 800793e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007940:	079d      	lsls	r5, r3, #30
 8007942:	4606      	mov	r6, r0
 8007944:	460c      	mov	r4, r1
 8007946:	d507      	bpl.n	8007958 <__smakebuf_r+0x1c>
 8007948:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800794c:	6023      	str	r3, [r4, #0]
 800794e:	6123      	str	r3, [r4, #16]
 8007950:	2301      	movs	r3, #1
 8007952:	6163      	str	r3, [r4, #20]
 8007954:	b002      	add	sp, #8
 8007956:	bd70      	pop	{r4, r5, r6, pc}
 8007958:	ab01      	add	r3, sp, #4
 800795a:	466a      	mov	r2, sp
 800795c:	f7ff ffc8 	bl	80078f0 <__swhatbuf_r>
 8007960:	9900      	ldr	r1, [sp, #0]
 8007962:	4605      	mov	r5, r0
 8007964:	4630      	mov	r0, r6
 8007966:	f7ff fd3f 	bl	80073e8 <_malloc_r>
 800796a:	b948      	cbnz	r0, 8007980 <__smakebuf_r+0x44>
 800796c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007970:	059a      	lsls	r2, r3, #22
 8007972:	d4ef      	bmi.n	8007954 <__smakebuf_r+0x18>
 8007974:	f023 0303 	bic.w	r3, r3, #3
 8007978:	f043 0302 	orr.w	r3, r3, #2
 800797c:	81a3      	strh	r3, [r4, #12]
 800797e:	e7e3      	b.n	8007948 <__smakebuf_r+0xc>
 8007980:	4b0d      	ldr	r3, [pc, #52]	; (80079b8 <__smakebuf_r+0x7c>)
 8007982:	62b3      	str	r3, [r6, #40]	; 0x28
 8007984:	89a3      	ldrh	r3, [r4, #12]
 8007986:	6020      	str	r0, [r4, #0]
 8007988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800798c:	81a3      	strh	r3, [r4, #12]
 800798e:	9b00      	ldr	r3, [sp, #0]
 8007990:	6163      	str	r3, [r4, #20]
 8007992:	9b01      	ldr	r3, [sp, #4]
 8007994:	6120      	str	r0, [r4, #16]
 8007996:	b15b      	cbz	r3, 80079b0 <__smakebuf_r+0x74>
 8007998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800799c:	4630      	mov	r0, r6
 800799e:	f000 f971 	bl	8007c84 <_isatty_r>
 80079a2:	b128      	cbz	r0, 80079b0 <__smakebuf_r+0x74>
 80079a4:	89a3      	ldrh	r3, [r4, #12]
 80079a6:	f023 0303 	bic.w	r3, r3, #3
 80079aa:	f043 0301 	orr.w	r3, r3, #1
 80079ae:	81a3      	strh	r3, [r4, #12]
 80079b0:	89a3      	ldrh	r3, [r4, #12]
 80079b2:	431d      	orrs	r5, r3
 80079b4:	81a5      	strh	r5, [r4, #12]
 80079b6:	e7cd      	b.n	8007954 <__smakebuf_r+0x18>
 80079b8:	0800714d 	.word	0x0800714d

080079bc <__malloc_lock>:
 80079bc:	4770      	bx	lr

080079be <__malloc_unlock>:
 80079be:	4770      	bx	lr

080079c0 <__sfputc_r>:
 80079c0:	6893      	ldr	r3, [r2, #8]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	b410      	push	{r4}
 80079c8:	6093      	str	r3, [r2, #8]
 80079ca:	da08      	bge.n	80079de <__sfputc_r+0x1e>
 80079cc:	6994      	ldr	r4, [r2, #24]
 80079ce:	42a3      	cmp	r3, r4
 80079d0:	db01      	blt.n	80079d6 <__sfputc_r+0x16>
 80079d2:	290a      	cmp	r1, #10
 80079d4:	d103      	bne.n	80079de <__sfputc_r+0x1e>
 80079d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079da:	f7ff be95 	b.w	8007708 <__swbuf_r>
 80079de:	6813      	ldr	r3, [r2, #0]
 80079e0:	1c58      	adds	r0, r3, #1
 80079e2:	6010      	str	r0, [r2, #0]
 80079e4:	7019      	strb	r1, [r3, #0]
 80079e6:	4608      	mov	r0, r1
 80079e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <__sfputs_r>:
 80079ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f0:	4606      	mov	r6, r0
 80079f2:	460f      	mov	r7, r1
 80079f4:	4614      	mov	r4, r2
 80079f6:	18d5      	adds	r5, r2, r3
 80079f8:	42ac      	cmp	r4, r5
 80079fa:	d101      	bne.n	8007a00 <__sfputs_r+0x12>
 80079fc:	2000      	movs	r0, #0
 80079fe:	e007      	b.n	8007a10 <__sfputs_r+0x22>
 8007a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a04:	463a      	mov	r2, r7
 8007a06:	4630      	mov	r0, r6
 8007a08:	f7ff ffda 	bl	80079c0 <__sfputc_r>
 8007a0c:	1c43      	adds	r3, r0, #1
 8007a0e:	d1f3      	bne.n	80079f8 <__sfputs_r+0xa>
 8007a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a14 <_vfiprintf_r>:
 8007a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a18:	460d      	mov	r5, r1
 8007a1a:	b09d      	sub	sp, #116	; 0x74
 8007a1c:	4614      	mov	r4, r2
 8007a1e:	4698      	mov	r8, r3
 8007a20:	4606      	mov	r6, r0
 8007a22:	b118      	cbz	r0, 8007a2c <_vfiprintf_r+0x18>
 8007a24:	6983      	ldr	r3, [r0, #24]
 8007a26:	b90b      	cbnz	r3, 8007a2c <_vfiprintf_r+0x18>
 8007a28:	f7ff fbac 	bl	8007184 <__sinit>
 8007a2c:	4b7b      	ldr	r3, [pc, #492]	; (8007c1c <_vfiprintf_r+0x208>)
 8007a2e:	429d      	cmp	r5, r3
 8007a30:	d161      	bne.n	8007af6 <_vfiprintf_r+0xe2>
 8007a32:	6875      	ldr	r5, [r6, #4]
 8007a34:	89ab      	ldrh	r3, [r5, #12]
 8007a36:	071b      	lsls	r3, r3, #28
 8007a38:	d567      	bpl.n	8007b0a <_vfiprintf_r+0xf6>
 8007a3a:	692b      	ldr	r3, [r5, #16]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d064      	beq.n	8007b0a <_vfiprintf_r+0xf6>
 8007a40:	2300      	movs	r3, #0
 8007a42:	9309      	str	r3, [sp, #36]	; 0x24
 8007a44:	2320      	movs	r3, #32
 8007a46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a4e:	2330      	movs	r3, #48	; 0x30
 8007a50:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8007c20 <_vfiprintf_r+0x20c>
 8007a54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a58:	f04f 0901 	mov.w	r9, #1
 8007a5c:	4623      	mov	r3, r4
 8007a5e:	469a      	mov	sl, r3
 8007a60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a64:	b10a      	cbz	r2, 8007a6a <_vfiprintf_r+0x56>
 8007a66:	2a25      	cmp	r2, #37	; 0x25
 8007a68:	d1f9      	bne.n	8007a5e <_vfiprintf_r+0x4a>
 8007a6a:	ebba 0b04 	subs.w	fp, sl, r4
 8007a6e:	d00b      	beq.n	8007a88 <_vfiprintf_r+0x74>
 8007a70:	465b      	mov	r3, fp
 8007a72:	4622      	mov	r2, r4
 8007a74:	4629      	mov	r1, r5
 8007a76:	4630      	mov	r0, r6
 8007a78:	f7ff ffb9 	bl	80079ee <__sfputs_r>
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	f000 80bf 	beq.w	8007c00 <_vfiprintf_r+0x1ec>
 8007a82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a84:	445a      	add	r2, fp
 8007a86:	9209      	str	r2, [sp, #36]	; 0x24
 8007a88:	f89a 3000 	ldrb.w	r3, [sl]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 80b7 	beq.w	8007c00 <_vfiprintf_r+0x1ec>
 8007a92:	2300      	movs	r3, #0
 8007a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a9c:	f10a 0a01 	add.w	sl, sl, #1
 8007aa0:	9304      	str	r3, [sp, #16]
 8007aa2:	9307      	str	r3, [sp, #28]
 8007aa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007aa8:	931a      	str	r3, [sp, #104]	; 0x68
 8007aaa:	4654      	mov	r4, sl
 8007aac:	2205      	movs	r2, #5
 8007aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ab2:	485b      	ldr	r0, [pc, #364]	; (8007c20 <_vfiprintf_r+0x20c>)
 8007ab4:	f7f8 fb6c 	bl	8000190 <memchr>
 8007ab8:	9a04      	ldr	r2, [sp, #16]
 8007aba:	2800      	cmp	r0, #0
 8007abc:	d130      	bne.n	8007b20 <_vfiprintf_r+0x10c>
 8007abe:	06d0      	lsls	r0, r2, #27
 8007ac0:	bf44      	itt	mi
 8007ac2:	2320      	movmi	r3, #32
 8007ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ac8:	0711      	lsls	r1, r2, #28
 8007aca:	bf44      	itt	mi
 8007acc:	232b      	movmi	r3, #43	; 0x2b
 8007ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ad6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ad8:	d02a      	beq.n	8007b30 <_vfiprintf_r+0x11c>
 8007ada:	9a07      	ldr	r2, [sp, #28]
 8007adc:	4654      	mov	r4, sl
 8007ade:	2000      	movs	r0, #0
 8007ae0:	f04f 0c0a 	mov.w	ip, #10
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007aea:	3b30      	subs	r3, #48	; 0x30
 8007aec:	2b09      	cmp	r3, #9
 8007aee:	d962      	bls.n	8007bb6 <_vfiprintf_r+0x1a2>
 8007af0:	b358      	cbz	r0, 8007b4a <_vfiprintf_r+0x136>
 8007af2:	9207      	str	r2, [sp, #28]
 8007af4:	e029      	b.n	8007b4a <_vfiprintf_r+0x136>
 8007af6:	4b4b      	ldr	r3, [pc, #300]	; (8007c24 <_vfiprintf_r+0x210>)
 8007af8:	429d      	cmp	r5, r3
 8007afa:	d101      	bne.n	8007b00 <_vfiprintf_r+0xec>
 8007afc:	68b5      	ldr	r5, [r6, #8]
 8007afe:	e799      	b.n	8007a34 <_vfiprintf_r+0x20>
 8007b00:	4b49      	ldr	r3, [pc, #292]	; (8007c28 <_vfiprintf_r+0x214>)
 8007b02:	429d      	cmp	r5, r3
 8007b04:	bf08      	it	eq
 8007b06:	68f5      	ldreq	r5, [r6, #12]
 8007b08:	e794      	b.n	8007a34 <_vfiprintf_r+0x20>
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	f7ff fe5f 	bl	80077d0 <__swsetup_r>
 8007b12:	2800      	cmp	r0, #0
 8007b14:	d094      	beq.n	8007a40 <_vfiprintf_r+0x2c>
 8007b16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b1a:	b01d      	add	sp, #116	; 0x74
 8007b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b20:	eba0 0308 	sub.w	r3, r0, r8
 8007b24:	fa09 f303 	lsl.w	r3, r9, r3
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	9304      	str	r3, [sp, #16]
 8007b2c:	46a2      	mov	sl, r4
 8007b2e:	e7bc      	b.n	8007aaa <_vfiprintf_r+0x96>
 8007b30:	9b03      	ldr	r3, [sp, #12]
 8007b32:	1d19      	adds	r1, r3, #4
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	9103      	str	r1, [sp, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	bfbb      	ittet	lt
 8007b3c:	425b      	neglt	r3, r3
 8007b3e:	f042 0202 	orrlt.w	r2, r2, #2
 8007b42:	9307      	strge	r3, [sp, #28]
 8007b44:	9307      	strlt	r3, [sp, #28]
 8007b46:	bfb8      	it	lt
 8007b48:	9204      	strlt	r2, [sp, #16]
 8007b4a:	7823      	ldrb	r3, [r4, #0]
 8007b4c:	2b2e      	cmp	r3, #46	; 0x2e
 8007b4e:	d10c      	bne.n	8007b6a <_vfiprintf_r+0x156>
 8007b50:	7863      	ldrb	r3, [r4, #1]
 8007b52:	2b2a      	cmp	r3, #42	; 0x2a
 8007b54:	d134      	bne.n	8007bc0 <_vfiprintf_r+0x1ac>
 8007b56:	9b03      	ldr	r3, [sp, #12]
 8007b58:	1d1a      	adds	r2, r3, #4
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	9203      	str	r2, [sp, #12]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	bfb8      	it	lt
 8007b62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007b66:	3402      	adds	r4, #2
 8007b68:	9305      	str	r3, [sp, #20]
 8007b6a:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8007c38 <_vfiprintf_r+0x224>
 8007b6e:	7821      	ldrb	r1, [r4, #0]
 8007b70:	2203      	movs	r2, #3
 8007b72:	4650      	mov	r0, sl
 8007b74:	f7f8 fb0c 	bl	8000190 <memchr>
 8007b78:	b138      	cbz	r0, 8007b8a <_vfiprintf_r+0x176>
 8007b7a:	9b04      	ldr	r3, [sp, #16]
 8007b7c:	eba0 000a 	sub.w	r0, r0, sl
 8007b80:	2240      	movs	r2, #64	; 0x40
 8007b82:	4082      	lsls	r2, r0
 8007b84:	4313      	orrs	r3, r2
 8007b86:	3401      	adds	r4, #1
 8007b88:	9304      	str	r3, [sp, #16]
 8007b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b8e:	4827      	ldr	r0, [pc, #156]	; (8007c2c <_vfiprintf_r+0x218>)
 8007b90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b94:	2206      	movs	r2, #6
 8007b96:	f7f8 fafb 	bl	8000190 <memchr>
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	d035      	beq.n	8007c0a <_vfiprintf_r+0x1f6>
 8007b9e:	4b24      	ldr	r3, [pc, #144]	; (8007c30 <_vfiprintf_r+0x21c>)
 8007ba0:	bb1b      	cbnz	r3, 8007bea <_vfiprintf_r+0x1d6>
 8007ba2:	9b03      	ldr	r3, [sp, #12]
 8007ba4:	3307      	adds	r3, #7
 8007ba6:	f023 0307 	bic.w	r3, r3, #7
 8007baa:	3308      	adds	r3, #8
 8007bac:	9303      	str	r3, [sp, #12]
 8007bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb0:	443b      	add	r3, r7
 8007bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8007bb4:	e752      	b.n	8007a5c <_vfiprintf_r+0x48>
 8007bb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bba:	460c      	mov	r4, r1
 8007bbc:	2001      	movs	r0, #1
 8007bbe:	e791      	b.n	8007ae4 <_vfiprintf_r+0xd0>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	3401      	adds	r4, #1
 8007bc4:	9305      	str	r3, [sp, #20]
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	f04f 0c0a 	mov.w	ip, #10
 8007bcc:	4620      	mov	r0, r4
 8007bce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bd2:	3a30      	subs	r2, #48	; 0x30
 8007bd4:	2a09      	cmp	r2, #9
 8007bd6:	d903      	bls.n	8007be0 <_vfiprintf_r+0x1cc>
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d0c6      	beq.n	8007b6a <_vfiprintf_r+0x156>
 8007bdc:	9105      	str	r1, [sp, #20]
 8007bde:	e7c4      	b.n	8007b6a <_vfiprintf_r+0x156>
 8007be0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007be4:	4604      	mov	r4, r0
 8007be6:	2301      	movs	r3, #1
 8007be8:	e7f0      	b.n	8007bcc <_vfiprintf_r+0x1b8>
 8007bea:	ab03      	add	r3, sp, #12
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	462a      	mov	r2, r5
 8007bf0:	4b10      	ldr	r3, [pc, #64]	; (8007c34 <_vfiprintf_r+0x220>)
 8007bf2:	a904      	add	r1, sp, #16
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	f3af 8000 	nop.w
 8007bfa:	1c42      	adds	r2, r0, #1
 8007bfc:	4607      	mov	r7, r0
 8007bfe:	d1d6      	bne.n	8007bae <_vfiprintf_r+0x19a>
 8007c00:	89ab      	ldrh	r3, [r5, #12]
 8007c02:	065b      	lsls	r3, r3, #25
 8007c04:	d487      	bmi.n	8007b16 <_vfiprintf_r+0x102>
 8007c06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c08:	e787      	b.n	8007b1a <_vfiprintf_r+0x106>
 8007c0a:	ab03      	add	r3, sp, #12
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	462a      	mov	r2, r5
 8007c10:	4b08      	ldr	r3, [pc, #32]	; (8007c34 <_vfiprintf_r+0x220>)
 8007c12:	a904      	add	r1, sp, #16
 8007c14:	4630      	mov	r0, r6
 8007c16:	f000 f8b3 	bl	8007d80 <_printf_i>
 8007c1a:	e7ee      	b.n	8007bfa <_vfiprintf_r+0x1e6>
 8007c1c:	08008530 	.word	0x08008530
 8007c20:	08008574 	.word	0x08008574
 8007c24:	08008550 	.word	0x08008550
 8007c28:	08008510 	.word	0x08008510
 8007c2c:	0800857e 	.word	0x0800857e
 8007c30:	00000000 	.word	0x00000000
 8007c34:	080079ef 	.word	0x080079ef
 8007c38:	0800857a 	.word	0x0800857a

08007c3c <_read_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4d07      	ldr	r5, [pc, #28]	; (8007c5c <_read_r+0x20>)
 8007c40:	4604      	mov	r4, r0
 8007c42:	4608      	mov	r0, r1
 8007c44:	4611      	mov	r1, r2
 8007c46:	2200      	movs	r2, #0
 8007c48:	602a      	str	r2, [r5, #0]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	f7f9 fd8c 	bl	8001768 <_read>
 8007c50:	1c43      	adds	r3, r0, #1
 8007c52:	d102      	bne.n	8007c5a <_read_r+0x1e>
 8007c54:	682b      	ldr	r3, [r5, #0]
 8007c56:	b103      	cbz	r3, 8007c5a <_read_r+0x1e>
 8007c58:	6023      	str	r3, [r4, #0]
 8007c5a:	bd38      	pop	{r3, r4, r5, pc}
 8007c5c:	2000069c 	.word	0x2000069c

08007c60 <_fstat_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4d07      	ldr	r5, [pc, #28]	; (8007c80 <_fstat_r+0x20>)
 8007c64:	2300      	movs	r3, #0
 8007c66:	4604      	mov	r4, r0
 8007c68:	4608      	mov	r0, r1
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	602b      	str	r3, [r5, #0]
 8007c6e:	f7f9 fdc0 	bl	80017f2 <_fstat>
 8007c72:	1c43      	adds	r3, r0, #1
 8007c74:	d102      	bne.n	8007c7c <_fstat_r+0x1c>
 8007c76:	682b      	ldr	r3, [r5, #0]
 8007c78:	b103      	cbz	r3, 8007c7c <_fstat_r+0x1c>
 8007c7a:	6023      	str	r3, [r4, #0]
 8007c7c:	bd38      	pop	{r3, r4, r5, pc}
 8007c7e:	bf00      	nop
 8007c80:	2000069c 	.word	0x2000069c

08007c84 <_isatty_r>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	4d06      	ldr	r5, [pc, #24]	; (8007ca0 <_isatty_r+0x1c>)
 8007c88:	2300      	movs	r3, #0
 8007c8a:	4604      	mov	r4, r0
 8007c8c:	4608      	mov	r0, r1
 8007c8e:	602b      	str	r3, [r5, #0]
 8007c90:	f7f9 fdbf 	bl	8001812 <_isatty>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	d102      	bne.n	8007c9e <_isatty_r+0x1a>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	b103      	cbz	r3, 8007c9e <_isatty_r+0x1a>
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ca0:	2000069c 	.word	0x2000069c

08007ca4 <_printf_common>:
 8007ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca8:	4616      	mov	r6, r2
 8007caa:	4699      	mov	r9, r3
 8007cac:	688a      	ldr	r2, [r1, #8]
 8007cae:	690b      	ldr	r3, [r1, #16]
 8007cb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	bfb8      	it	lt
 8007cb8:	4613      	movlt	r3, r2
 8007cba:	6033      	str	r3, [r6, #0]
 8007cbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cc0:	4607      	mov	r7, r0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	b10a      	cbz	r2, 8007cca <_printf_common+0x26>
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	6033      	str	r3, [r6, #0]
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	0699      	lsls	r1, r3, #26
 8007cce:	bf42      	ittt	mi
 8007cd0:	6833      	ldrmi	r3, [r6, #0]
 8007cd2:	3302      	addmi	r3, #2
 8007cd4:	6033      	strmi	r3, [r6, #0]
 8007cd6:	6825      	ldr	r5, [r4, #0]
 8007cd8:	f015 0506 	ands.w	r5, r5, #6
 8007cdc:	d106      	bne.n	8007cec <_printf_common+0x48>
 8007cde:	f104 0a19 	add.w	sl, r4, #25
 8007ce2:	68e3      	ldr	r3, [r4, #12]
 8007ce4:	6832      	ldr	r2, [r6, #0]
 8007ce6:	1a9b      	subs	r3, r3, r2
 8007ce8:	42ab      	cmp	r3, r5
 8007cea:	dc26      	bgt.n	8007d3a <_printf_common+0x96>
 8007cec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cf0:	1e13      	subs	r3, r2, #0
 8007cf2:	6822      	ldr	r2, [r4, #0]
 8007cf4:	bf18      	it	ne
 8007cf6:	2301      	movne	r3, #1
 8007cf8:	0692      	lsls	r2, r2, #26
 8007cfa:	d42b      	bmi.n	8007d54 <_printf_common+0xb0>
 8007cfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d00:	4649      	mov	r1, r9
 8007d02:	4638      	mov	r0, r7
 8007d04:	47c0      	blx	r8
 8007d06:	3001      	adds	r0, #1
 8007d08:	d01e      	beq.n	8007d48 <_printf_common+0xa4>
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	6922      	ldr	r2, [r4, #16]
 8007d0e:	f003 0306 	and.w	r3, r3, #6
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	bf02      	ittt	eq
 8007d16:	68e5      	ldreq	r5, [r4, #12]
 8007d18:	6833      	ldreq	r3, [r6, #0]
 8007d1a:	1aed      	subeq	r5, r5, r3
 8007d1c:	68a3      	ldr	r3, [r4, #8]
 8007d1e:	bf0c      	ite	eq
 8007d20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d24:	2500      	movne	r5, #0
 8007d26:	4293      	cmp	r3, r2
 8007d28:	bfc4      	itt	gt
 8007d2a:	1a9b      	subgt	r3, r3, r2
 8007d2c:	18ed      	addgt	r5, r5, r3
 8007d2e:	2600      	movs	r6, #0
 8007d30:	341a      	adds	r4, #26
 8007d32:	42b5      	cmp	r5, r6
 8007d34:	d11a      	bne.n	8007d6c <_printf_common+0xc8>
 8007d36:	2000      	movs	r0, #0
 8007d38:	e008      	b.n	8007d4c <_printf_common+0xa8>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	4652      	mov	r2, sl
 8007d3e:	4649      	mov	r1, r9
 8007d40:	4638      	mov	r0, r7
 8007d42:	47c0      	blx	r8
 8007d44:	3001      	adds	r0, #1
 8007d46:	d103      	bne.n	8007d50 <_printf_common+0xac>
 8007d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d50:	3501      	adds	r5, #1
 8007d52:	e7c6      	b.n	8007ce2 <_printf_common+0x3e>
 8007d54:	18e1      	adds	r1, r4, r3
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	2030      	movs	r0, #48	; 0x30
 8007d5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d5e:	4422      	add	r2, r4
 8007d60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d68:	3302      	adds	r3, #2
 8007d6a:	e7c7      	b.n	8007cfc <_printf_common+0x58>
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	4622      	mov	r2, r4
 8007d70:	4649      	mov	r1, r9
 8007d72:	4638      	mov	r0, r7
 8007d74:	47c0      	blx	r8
 8007d76:	3001      	adds	r0, #1
 8007d78:	d0e6      	beq.n	8007d48 <_printf_common+0xa4>
 8007d7a:	3601      	adds	r6, #1
 8007d7c:	e7d9      	b.n	8007d32 <_printf_common+0x8e>
	...

08007d80 <_printf_i>:
 8007d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d84:	7e0f      	ldrb	r7, [r1, #24]
 8007d86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d88:	2f78      	cmp	r7, #120	; 0x78
 8007d8a:	4691      	mov	r9, r2
 8007d8c:	4680      	mov	r8, r0
 8007d8e:	460c      	mov	r4, r1
 8007d90:	469a      	mov	sl, r3
 8007d92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d96:	d807      	bhi.n	8007da8 <_printf_i+0x28>
 8007d98:	2f62      	cmp	r7, #98	; 0x62
 8007d9a:	d80a      	bhi.n	8007db2 <_printf_i+0x32>
 8007d9c:	2f00      	cmp	r7, #0
 8007d9e:	f000 80d4 	beq.w	8007f4a <_printf_i+0x1ca>
 8007da2:	2f58      	cmp	r7, #88	; 0x58
 8007da4:	f000 80c0 	beq.w	8007f28 <_printf_i+0x1a8>
 8007da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007db0:	e03a      	b.n	8007e28 <_printf_i+0xa8>
 8007db2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007db6:	2b15      	cmp	r3, #21
 8007db8:	d8f6      	bhi.n	8007da8 <_printf_i+0x28>
 8007dba:	a101      	add	r1, pc, #4	; (adr r1, 8007dc0 <_printf_i+0x40>)
 8007dbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007dc0:	08007e19 	.word	0x08007e19
 8007dc4:	08007e2d 	.word	0x08007e2d
 8007dc8:	08007da9 	.word	0x08007da9
 8007dcc:	08007da9 	.word	0x08007da9
 8007dd0:	08007da9 	.word	0x08007da9
 8007dd4:	08007da9 	.word	0x08007da9
 8007dd8:	08007e2d 	.word	0x08007e2d
 8007ddc:	08007da9 	.word	0x08007da9
 8007de0:	08007da9 	.word	0x08007da9
 8007de4:	08007da9 	.word	0x08007da9
 8007de8:	08007da9 	.word	0x08007da9
 8007dec:	08007f31 	.word	0x08007f31
 8007df0:	08007e59 	.word	0x08007e59
 8007df4:	08007eeb 	.word	0x08007eeb
 8007df8:	08007da9 	.word	0x08007da9
 8007dfc:	08007da9 	.word	0x08007da9
 8007e00:	08007f53 	.word	0x08007f53
 8007e04:	08007da9 	.word	0x08007da9
 8007e08:	08007e59 	.word	0x08007e59
 8007e0c:	08007da9 	.word	0x08007da9
 8007e10:	08007da9 	.word	0x08007da9
 8007e14:	08007ef3 	.word	0x08007ef3
 8007e18:	682b      	ldr	r3, [r5, #0]
 8007e1a:	1d1a      	adds	r2, r3, #4
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	602a      	str	r2, [r5, #0]
 8007e20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e09f      	b.n	8007f6c <_printf_i+0x1ec>
 8007e2c:	6820      	ldr	r0, [r4, #0]
 8007e2e:	682b      	ldr	r3, [r5, #0]
 8007e30:	0607      	lsls	r7, r0, #24
 8007e32:	f103 0104 	add.w	r1, r3, #4
 8007e36:	6029      	str	r1, [r5, #0]
 8007e38:	d501      	bpl.n	8007e3e <_printf_i+0xbe>
 8007e3a:	681e      	ldr	r6, [r3, #0]
 8007e3c:	e003      	b.n	8007e46 <_printf_i+0xc6>
 8007e3e:	0646      	lsls	r6, r0, #25
 8007e40:	d5fb      	bpl.n	8007e3a <_printf_i+0xba>
 8007e42:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007e46:	2e00      	cmp	r6, #0
 8007e48:	da03      	bge.n	8007e52 <_printf_i+0xd2>
 8007e4a:	232d      	movs	r3, #45	; 0x2d
 8007e4c:	4276      	negs	r6, r6
 8007e4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e52:	485a      	ldr	r0, [pc, #360]	; (8007fbc <_printf_i+0x23c>)
 8007e54:	230a      	movs	r3, #10
 8007e56:	e012      	b.n	8007e7e <_printf_i+0xfe>
 8007e58:	682b      	ldr	r3, [r5, #0]
 8007e5a:	6820      	ldr	r0, [r4, #0]
 8007e5c:	1d19      	adds	r1, r3, #4
 8007e5e:	6029      	str	r1, [r5, #0]
 8007e60:	0605      	lsls	r5, r0, #24
 8007e62:	d501      	bpl.n	8007e68 <_printf_i+0xe8>
 8007e64:	681e      	ldr	r6, [r3, #0]
 8007e66:	e002      	b.n	8007e6e <_printf_i+0xee>
 8007e68:	0641      	lsls	r1, r0, #25
 8007e6a:	d5fb      	bpl.n	8007e64 <_printf_i+0xe4>
 8007e6c:	881e      	ldrh	r6, [r3, #0]
 8007e6e:	4853      	ldr	r0, [pc, #332]	; (8007fbc <_printf_i+0x23c>)
 8007e70:	2f6f      	cmp	r7, #111	; 0x6f
 8007e72:	bf0c      	ite	eq
 8007e74:	2308      	moveq	r3, #8
 8007e76:	230a      	movne	r3, #10
 8007e78:	2100      	movs	r1, #0
 8007e7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e7e:	6865      	ldr	r5, [r4, #4]
 8007e80:	60a5      	str	r5, [r4, #8]
 8007e82:	2d00      	cmp	r5, #0
 8007e84:	bfa2      	ittt	ge
 8007e86:	6821      	ldrge	r1, [r4, #0]
 8007e88:	f021 0104 	bicge.w	r1, r1, #4
 8007e8c:	6021      	strge	r1, [r4, #0]
 8007e8e:	b90e      	cbnz	r6, 8007e94 <_printf_i+0x114>
 8007e90:	2d00      	cmp	r5, #0
 8007e92:	d04b      	beq.n	8007f2c <_printf_i+0x1ac>
 8007e94:	4615      	mov	r5, r2
 8007e96:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e9a:	fb03 6711 	mls	r7, r3, r1, r6
 8007e9e:	5dc7      	ldrb	r7, [r0, r7]
 8007ea0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ea4:	4637      	mov	r7, r6
 8007ea6:	42bb      	cmp	r3, r7
 8007ea8:	460e      	mov	r6, r1
 8007eaa:	d9f4      	bls.n	8007e96 <_printf_i+0x116>
 8007eac:	2b08      	cmp	r3, #8
 8007eae:	d10b      	bne.n	8007ec8 <_printf_i+0x148>
 8007eb0:	6823      	ldr	r3, [r4, #0]
 8007eb2:	07de      	lsls	r6, r3, #31
 8007eb4:	d508      	bpl.n	8007ec8 <_printf_i+0x148>
 8007eb6:	6923      	ldr	r3, [r4, #16]
 8007eb8:	6861      	ldr	r1, [r4, #4]
 8007eba:	4299      	cmp	r1, r3
 8007ebc:	bfde      	ittt	le
 8007ebe:	2330      	movle	r3, #48	; 0x30
 8007ec0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ec4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007ec8:	1b52      	subs	r2, r2, r5
 8007eca:	6122      	str	r2, [r4, #16]
 8007ecc:	f8cd a000 	str.w	sl, [sp]
 8007ed0:	464b      	mov	r3, r9
 8007ed2:	aa03      	add	r2, sp, #12
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	4640      	mov	r0, r8
 8007ed8:	f7ff fee4 	bl	8007ca4 <_printf_common>
 8007edc:	3001      	adds	r0, #1
 8007ede:	d14a      	bne.n	8007f76 <_printf_i+0x1f6>
 8007ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ee4:	b004      	add	sp, #16
 8007ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eea:	6823      	ldr	r3, [r4, #0]
 8007eec:	f043 0320 	orr.w	r3, r3, #32
 8007ef0:	6023      	str	r3, [r4, #0]
 8007ef2:	4833      	ldr	r0, [pc, #204]	; (8007fc0 <_printf_i+0x240>)
 8007ef4:	2778      	movs	r7, #120	; 0x78
 8007ef6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007efa:	6823      	ldr	r3, [r4, #0]
 8007efc:	6829      	ldr	r1, [r5, #0]
 8007efe:	061f      	lsls	r7, r3, #24
 8007f00:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f04:	d402      	bmi.n	8007f0c <_printf_i+0x18c>
 8007f06:	065f      	lsls	r7, r3, #25
 8007f08:	bf48      	it	mi
 8007f0a:	b2b6      	uxthmi	r6, r6
 8007f0c:	07df      	lsls	r7, r3, #31
 8007f0e:	bf48      	it	mi
 8007f10:	f043 0320 	orrmi.w	r3, r3, #32
 8007f14:	6029      	str	r1, [r5, #0]
 8007f16:	bf48      	it	mi
 8007f18:	6023      	strmi	r3, [r4, #0]
 8007f1a:	b91e      	cbnz	r6, 8007f24 <_printf_i+0x1a4>
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	f023 0320 	bic.w	r3, r3, #32
 8007f22:	6023      	str	r3, [r4, #0]
 8007f24:	2310      	movs	r3, #16
 8007f26:	e7a7      	b.n	8007e78 <_printf_i+0xf8>
 8007f28:	4824      	ldr	r0, [pc, #144]	; (8007fbc <_printf_i+0x23c>)
 8007f2a:	e7e4      	b.n	8007ef6 <_printf_i+0x176>
 8007f2c:	4615      	mov	r5, r2
 8007f2e:	e7bd      	b.n	8007eac <_printf_i+0x12c>
 8007f30:	682b      	ldr	r3, [r5, #0]
 8007f32:	6826      	ldr	r6, [r4, #0]
 8007f34:	6961      	ldr	r1, [r4, #20]
 8007f36:	1d18      	adds	r0, r3, #4
 8007f38:	6028      	str	r0, [r5, #0]
 8007f3a:	0635      	lsls	r5, r6, #24
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	d501      	bpl.n	8007f44 <_printf_i+0x1c4>
 8007f40:	6019      	str	r1, [r3, #0]
 8007f42:	e002      	b.n	8007f4a <_printf_i+0x1ca>
 8007f44:	0670      	lsls	r0, r6, #25
 8007f46:	d5fb      	bpl.n	8007f40 <_printf_i+0x1c0>
 8007f48:	8019      	strh	r1, [r3, #0]
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	6123      	str	r3, [r4, #16]
 8007f4e:	4615      	mov	r5, r2
 8007f50:	e7bc      	b.n	8007ecc <_printf_i+0x14c>
 8007f52:	682b      	ldr	r3, [r5, #0]
 8007f54:	1d1a      	adds	r2, r3, #4
 8007f56:	602a      	str	r2, [r5, #0]
 8007f58:	681d      	ldr	r5, [r3, #0]
 8007f5a:	6862      	ldr	r2, [r4, #4]
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	4628      	mov	r0, r5
 8007f60:	f7f8 f916 	bl	8000190 <memchr>
 8007f64:	b108      	cbz	r0, 8007f6a <_printf_i+0x1ea>
 8007f66:	1b40      	subs	r0, r0, r5
 8007f68:	6060      	str	r0, [r4, #4]
 8007f6a:	6863      	ldr	r3, [r4, #4]
 8007f6c:	6123      	str	r3, [r4, #16]
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f74:	e7aa      	b.n	8007ecc <_printf_i+0x14c>
 8007f76:	6923      	ldr	r3, [r4, #16]
 8007f78:	462a      	mov	r2, r5
 8007f7a:	4649      	mov	r1, r9
 8007f7c:	4640      	mov	r0, r8
 8007f7e:	47d0      	blx	sl
 8007f80:	3001      	adds	r0, #1
 8007f82:	d0ad      	beq.n	8007ee0 <_printf_i+0x160>
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	079b      	lsls	r3, r3, #30
 8007f88:	d413      	bmi.n	8007fb2 <_printf_i+0x232>
 8007f8a:	68e0      	ldr	r0, [r4, #12]
 8007f8c:	9b03      	ldr	r3, [sp, #12]
 8007f8e:	4298      	cmp	r0, r3
 8007f90:	bfb8      	it	lt
 8007f92:	4618      	movlt	r0, r3
 8007f94:	e7a6      	b.n	8007ee4 <_printf_i+0x164>
 8007f96:	2301      	movs	r3, #1
 8007f98:	4632      	mov	r2, r6
 8007f9a:	4649      	mov	r1, r9
 8007f9c:	4640      	mov	r0, r8
 8007f9e:	47d0      	blx	sl
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	d09d      	beq.n	8007ee0 <_printf_i+0x160>
 8007fa4:	3501      	adds	r5, #1
 8007fa6:	68e3      	ldr	r3, [r4, #12]
 8007fa8:	9903      	ldr	r1, [sp, #12]
 8007faa:	1a5b      	subs	r3, r3, r1
 8007fac:	42ab      	cmp	r3, r5
 8007fae:	dcf2      	bgt.n	8007f96 <_printf_i+0x216>
 8007fb0:	e7eb      	b.n	8007f8a <_printf_i+0x20a>
 8007fb2:	2500      	movs	r5, #0
 8007fb4:	f104 0619 	add.w	r6, r4, #25
 8007fb8:	e7f5      	b.n	8007fa6 <_printf_i+0x226>
 8007fba:	bf00      	nop
 8007fbc:	08008585 	.word	0x08008585
 8007fc0:	08008596 	.word	0x08008596

08007fc4 <__udivmoddi4>:
 8007fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fc8:	9e08      	ldr	r6, [sp, #32]
 8007fca:	460d      	mov	r5, r1
 8007fcc:	4604      	mov	r4, r0
 8007fce:	460f      	mov	r7, r1
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d14a      	bne.n	800806a <__udivmoddi4+0xa6>
 8007fd4:	428a      	cmp	r2, r1
 8007fd6:	4694      	mov	ip, r2
 8007fd8:	d965      	bls.n	80080a6 <__udivmoddi4+0xe2>
 8007fda:	fab2 f382 	clz	r3, r2
 8007fde:	b143      	cbz	r3, 8007ff2 <__udivmoddi4+0x2e>
 8007fe0:	fa02 fc03 	lsl.w	ip, r2, r3
 8007fe4:	f1c3 0220 	rsb	r2, r3, #32
 8007fe8:	409f      	lsls	r7, r3
 8007fea:	fa20 f202 	lsr.w	r2, r0, r2
 8007fee:	4317      	orrs	r7, r2
 8007ff0:	409c      	lsls	r4, r3
 8007ff2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8007ff6:	fa1f f58c 	uxth.w	r5, ip
 8007ffa:	fbb7 f1fe 	udiv	r1, r7, lr
 8007ffe:	0c22      	lsrs	r2, r4, #16
 8008000:	fb0e 7711 	mls	r7, lr, r1, r7
 8008004:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8008008:	fb01 f005 	mul.w	r0, r1, r5
 800800c:	4290      	cmp	r0, r2
 800800e:	d90a      	bls.n	8008026 <__udivmoddi4+0x62>
 8008010:	eb1c 0202 	adds.w	r2, ip, r2
 8008014:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8008018:	f080 811c 	bcs.w	8008254 <__udivmoddi4+0x290>
 800801c:	4290      	cmp	r0, r2
 800801e:	f240 8119 	bls.w	8008254 <__udivmoddi4+0x290>
 8008022:	3902      	subs	r1, #2
 8008024:	4462      	add	r2, ip
 8008026:	1a12      	subs	r2, r2, r0
 8008028:	b2a4      	uxth	r4, r4
 800802a:	fbb2 f0fe 	udiv	r0, r2, lr
 800802e:	fb0e 2210 	mls	r2, lr, r0, r2
 8008032:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008036:	fb00 f505 	mul.w	r5, r0, r5
 800803a:	42a5      	cmp	r5, r4
 800803c:	d90a      	bls.n	8008054 <__udivmoddi4+0x90>
 800803e:	eb1c 0404 	adds.w	r4, ip, r4
 8008042:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8008046:	f080 8107 	bcs.w	8008258 <__udivmoddi4+0x294>
 800804a:	42a5      	cmp	r5, r4
 800804c:	f240 8104 	bls.w	8008258 <__udivmoddi4+0x294>
 8008050:	4464      	add	r4, ip
 8008052:	3802      	subs	r0, #2
 8008054:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008058:	1b64      	subs	r4, r4, r5
 800805a:	2100      	movs	r1, #0
 800805c:	b11e      	cbz	r6, 8008066 <__udivmoddi4+0xa2>
 800805e:	40dc      	lsrs	r4, r3
 8008060:	2300      	movs	r3, #0
 8008062:	e9c6 4300 	strd	r4, r3, [r6]
 8008066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800806a:	428b      	cmp	r3, r1
 800806c:	d908      	bls.n	8008080 <__udivmoddi4+0xbc>
 800806e:	2e00      	cmp	r6, #0
 8008070:	f000 80ed 	beq.w	800824e <__udivmoddi4+0x28a>
 8008074:	2100      	movs	r1, #0
 8008076:	e9c6 0500 	strd	r0, r5, [r6]
 800807a:	4608      	mov	r0, r1
 800807c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008080:	fab3 f183 	clz	r1, r3
 8008084:	2900      	cmp	r1, #0
 8008086:	d149      	bne.n	800811c <__udivmoddi4+0x158>
 8008088:	42ab      	cmp	r3, r5
 800808a:	d302      	bcc.n	8008092 <__udivmoddi4+0xce>
 800808c:	4282      	cmp	r2, r0
 800808e:	f200 80f8 	bhi.w	8008282 <__udivmoddi4+0x2be>
 8008092:	1a84      	subs	r4, r0, r2
 8008094:	eb65 0203 	sbc.w	r2, r5, r3
 8008098:	2001      	movs	r0, #1
 800809a:	4617      	mov	r7, r2
 800809c:	2e00      	cmp	r6, #0
 800809e:	d0e2      	beq.n	8008066 <__udivmoddi4+0xa2>
 80080a0:	e9c6 4700 	strd	r4, r7, [r6]
 80080a4:	e7df      	b.n	8008066 <__udivmoddi4+0xa2>
 80080a6:	b902      	cbnz	r2, 80080aa <__udivmoddi4+0xe6>
 80080a8:	deff      	udf	#255	; 0xff
 80080aa:	fab2 f382 	clz	r3, r2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f040 8090 	bne.w	80081d4 <__udivmoddi4+0x210>
 80080b4:	1a8a      	subs	r2, r1, r2
 80080b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80080ba:	fa1f fe8c 	uxth.w	lr, ip
 80080be:	2101      	movs	r1, #1
 80080c0:	fbb2 f5f7 	udiv	r5, r2, r7
 80080c4:	fb07 2015 	mls	r0, r7, r5, r2
 80080c8:	0c22      	lsrs	r2, r4, #16
 80080ca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80080ce:	fb0e f005 	mul.w	r0, lr, r5
 80080d2:	4290      	cmp	r0, r2
 80080d4:	d908      	bls.n	80080e8 <__udivmoddi4+0x124>
 80080d6:	eb1c 0202 	adds.w	r2, ip, r2
 80080da:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80080de:	d202      	bcs.n	80080e6 <__udivmoddi4+0x122>
 80080e0:	4290      	cmp	r0, r2
 80080e2:	f200 80cb 	bhi.w	800827c <__udivmoddi4+0x2b8>
 80080e6:	4645      	mov	r5, r8
 80080e8:	1a12      	subs	r2, r2, r0
 80080ea:	b2a4      	uxth	r4, r4
 80080ec:	fbb2 f0f7 	udiv	r0, r2, r7
 80080f0:	fb07 2210 	mls	r2, r7, r0, r2
 80080f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80080f8:	fb0e fe00 	mul.w	lr, lr, r0
 80080fc:	45a6      	cmp	lr, r4
 80080fe:	d908      	bls.n	8008112 <__udivmoddi4+0x14e>
 8008100:	eb1c 0404 	adds.w	r4, ip, r4
 8008104:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8008108:	d202      	bcs.n	8008110 <__udivmoddi4+0x14c>
 800810a:	45a6      	cmp	lr, r4
 800810c:	f200 80bb 	bhi.w	8008286 <__udivmoddi4+0x2c2>
 8008110:	4610      	mov	r0, r2
 8008112:	eba4 040e 	sub.w	r4, r4, lr
 8008116:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800811a:	e79f      	b.n	800805c <__udivmoddi4+0x98>
 800811c:	f1c1 0720 	rsb	r7, r1, #32
 8008120:	408b      	lsls	r3, r1
 8008122:	fa22 fc07 	lsr.w	ip, r2, r7
 8008126:	ea4c 0c03 	orr.w	ip, ip, r3
 800812a:	fa05 f401 	lsl.w	r4, r5, r1
 800812e:	fa20 f307 	lsr.w	r3, r0, r7
 8008132:	40fd      	lsrs	r5, r7
 8008134:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8008138:	4323      	orrs	r3, r4
 800813a:	fbb5 f8f9 	udiv	r8, r5, r9
 800813e:	fa1f fe8c 	uxth.w	lr, ip
 8008142:	fb09 5518 	mls	r5, r9, r8, r5
 8008146:	0c1c      	lsrs	r4, r3, #16
 8008148:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800814c:	fb08 f50e 	mul.w	r5, r8, lr
 8008150:	42a5      	cmp	r5, r4
 8008152:	fa02 f201 	lsl.w	r2, r2, r1
 8008156:	fa00 f001 	lsl.w	r0, r0, r1
 800815a:	d90b      	bls.n	8008174 <__udivmoddi4+0x1b0>
 800815c:	eb1c 0404 	adds.w	r4, ip, r4
 8008160:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8008164:	f080 8088 	bcs.w	8008278 <__udivmoddi4+0x2b4>
 8008168:	42a5      	cmp	r5, r4
 800816a:	f240 8085 	bls.w	8008278 <__udivmoddi4+0x2b4>
 800816e:	f1a8 0802 	sub.w	r8, r8, #2
 8008172:	4464      	add	r4, ip
 8008174:	1b64      	subs	r4, r4, r5
 8008176:	b29d      	uxth	r5, r3
 8008178:	fbb4 f3f9 	udiv	r3, r4, r9
 800817c:	fb09 4413 	mls	r4, r9, r3, r4
 8008180:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8008184:	fb03 fe0e 	mul.w	lr, r3, lr
 8008188:	45a6      	cmp	lr, r4
 800818a:	d908      	bls.n	800819e <__udivmoddi4+0x1da>
 800818c:	eb1c 0404 	adds.w	r4, ip, r4
 8008190:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8008194:	d26c      	bcs.n	8008270 <__udivmoddi4+0x2ac>
 8008196:	45a6      	cmp	lr, r4
 8008198:	d96a      	bls.n	8008270 <__udivmoddi4+0x2ac>
 800819a:	3b02      	subs	r3, #2
 800819c:	4464      	add	r4, ip
 800819e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80081a2:	fba3 9502 	umull	r9, r5, r3, r2
 80081a6:	eba4 040e 	sub.w	r4, r4, lr
 80081aa:	42ac      	cmp	r4, r5
 80081ac:	46c8      	mov	r8, r9
 80081ae:	46ae      	mov	lr, r5
 80081b0:	d356      	bcc.n	8008260 <__udivmoddi4+0x29c>
 80081b2:	d053      	beq.n	800825c <__udivmoddi4+0x298>
 80081b4:	b156      	cbz	r6, 80081cc <__udivmoddi4+0x208>
 80081b6:	ebb0 0208 	subs.w	r2, r0, r8
 80081ba:	eb64 040e 	sbc.w	r4, r4, lr
 80081be:	fa04 f707 	lsl.w	r7, r4, r7
 80081c2:	40ca      	lsrs	r2, r1
 80081c4:	40cc      	lsrs	r4, r1
 80081c6:	4317      	orrs	r7, r2
 80081c8:	e9c6 7400 	strd	r7, r4, [r6]
 80081cc:	4618      	mov	r0, r3
 80081ce:	2100      	movs	r1, #0
 80081d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d4:	f1c3 0120 	rsb	r1, r3, #32
 80081d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80081dc:	fa20 f201 	lsr.w	r2, r0, r1
 80081e0:	fa25 f101 	lsr.w	r1, r5, r1
 80081e4:	409d      	lsls	r5, r3
 80081e6:	432a      	orrs	r2, r5
 80081e8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80081ec:	fa1f fe8c 	uxth.w	lr, ip
 80081f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80081f4:	fb07 1510 	mls	r5, r7, r0, r1
 80081f8:	0c11      	lsrs	r1, r2, #16
 80081fa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80081fe:	fb00 f50e 	mul.w	r5, r0, lr
 8008202:	428d      	cmp	r5, r1
 8008204:	fa04 f403 	lsl.w	r4, r4, r3
 8008208:	d908      	bls.n	800821c <__udivmoddi4+0x258>
 800820a:	eb1c 0101 	adds.w	r1, ip, r1
 800820e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8008212:	d22f      	bcs.n	8008274 <__udivmoddi4+0x2b0>
 8008214:	428d      	cmp	r5, r1
 8008216:	d92d      	bls.n	8008274 <__udivmoddi4+0x2b0>
 8008218:	3802      	subs	r0, #2
 800821a:	4461      	add	r1, ip
 800821c:	1b49      	subs	r1, r1, r5
 800821e:	b292      	uxth	r2, r2
 8008220:	fbb1 f5f7 	udiv	r5, r1, r7
 8008224:	fb07 1115 	mls	r1, r7, r5, r1
 8008228:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800822c:	fb05 f10e 	mul.w	r1, r5, lr
 8008230:	4291      	cmp	r1, r2
 8008232:	d908      	bls.n	8008246 <__udivmoddi4+0x282>
 8008234:	eb1c 0202 	adds.w	r2, ip, r2
 8008238:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800823c:	d216      	bcs.n	800826c <__udivmoddi4+0x2a8>
 800823e:	4291      	cmp	r1, r2
 8008240:	d914      	bls.n	800826c <__udivmoddi4+0x2a8>
 8008242:	3d02      	subs	r5, #2
 8008244:	4462      	add	r2, ip
 8008246:	1a52      	subs	r2, r2, r1
 8008248:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800824c:	e738      	b.n	80080c0 <__udivmoddi4+0xfc>
 800824e:	4631      	mov	r1, r6
 8008250:	4630      	mov	r0, r6
 8008252:	e708      	b.n	8008066 <__udivmoddi4+0xa2>
 8008254:	4639      	mov	r1, r7
 8008256:	e6e6      	b.n	8008026 <__udivmoddi4+0x62>
 8008258:	4610      	mov	r0, r2
 800825a:	e6fb      	b.n	8008054 <__udivmoddi4+0x90>
 800825c:	4548      	cmp	r0, r9
 800825e:	d2a9      	bcs.n	80081b4 <__udivmoddi4+0x1f0>
 8008260:	ebb9 0802 	subs.w	r8, r9, r2
 8008264:	eb65 0e0c 	sbc.w	lr, r5, ip
 8008268:	3b01      	subs	r3, #1
 800826a:	e7a3      	b.n	80081b4 <__udivmoddi4+0x1f0>
 800826c:	4645      	mov	r5, r8
 800826e:	e7ea      	b.n	8008246 <__udivmoddi4+0x282>
 8008270:	462b      	mov	r3, r5
 8008272:	e794      	b.n	800819e <__udivmoddi4+0x1da>
 8008274:	4640      	mov	r0, r8
 8008276:	e7d1      	b.n	800821c <__udivmoddi4+0x258>
 8008278:	46d0      	mov	r8, sl
 800827a:	e77b      	b.n	8008174 <__udivmoddi4+0x1b0>
 800827c:	3d02      	subs	r5, #2
 800827e:	4462      	add	r2, ip
 8008280:	e732      	b.n	80080e8 <__udivmoddi4+0x124>
 8008282:	4608      	mov	r0, r1
 8008284:	e70a      	b.n	800809c <__udivmoddi4+0xd8>
 8008286:	4464      	add	r4, ip
 8008288:	3802      	subs	r0, #2
 800828a:	e742      	b.n	8008112 <__udivmoddi4+0x14e>

0800828c <_init>:
 800828c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828e:	bf00      	nop
 8008290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008292:	bc08      	pop	{r3}
 8008294:	469e      	mov	lr, r3
 8008296:	4770      	bx	lr

08008298 <_fini>:
 8008298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829a:	bf00      	nop
 800829c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800829e:	bc08      	pop	{r3}
 80082a0:	469e      	mov	lr, r3
 80082a2:	4770      	bx	lr
