
ADC_MUXing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008284  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008440  08008440  00018440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084b0  080084b0  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080084b0  080084b0  000184b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084b8  080084b8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084b8  080084b8  000184b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084bc  080084bc  000184bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080084c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000554  20000018  080084d8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  080084d8  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000057  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f88a  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037a1  00000000  00000000  0003f929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c78  00000000  00000000  000430d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016a1  00000000  00000000  00044d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002df42  00000000  00000000  000463e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d5b1  00000000  00000000  0007432b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001241bf  00000000  00000000  000918dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007954  00000000  00000000  001b5a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  001bd3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000b9a  00000000  00000000  001bd473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__aeabi_uldivmod>:
 80001bc:	b953      	cbnz	r3, 80001d4 <__aeabi_uldivmod+0x18>
 80001be:	b94a      	cbnz	r2, 80001d4 <__aeabi_uldivmod+0x18>
 80001c0:	2900      	cmp	r1, #0
 80001c2:	bf08      	it	eq
 80001c4:	2800      	cmpeq	r0, #0
 80001c6:	bf1c      	itt	ne
 80001c8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001cc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001d0:	f000 b80c 	b.w	80001ec <__aeabi_idiv0>
 80001d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001dc:	f007 ffc0 	bl	8008160 <__udivmoddi4>
 80001e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001e8:	b004      	add	sp, #16
 80001ea:	4770      	bx	lr

080001ec <__aeabi_idiv0>:
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop

080001f0 <deregister_tm_clones>:
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <deregister_tm_clones+0x10>)
 80001f2:	4b04      	ldr	r3, [pc, #16]	; (8000204 <deregister_tm_clones+0x14>)
 80001f4:	4283      	cmp	r3, r0
 80001f6:	d002      	beq.n	80001fe <deregister_tm_clones+0xe>
 80001f8:	4b03      	ldr	r3, [pc, #12]	; (8000208 <deregister_tm_clones+0x18>)
 80001fa:	b103      	cbz	r3, 80001fe <deregister_tm_clones+0xe>
 80001fc:	4718      	bx	r3
 80001fe:	4770      	bx	lr
 8000200:	20000018 	.word	0x20000018
 8000204:	20000018 	.word	0x20000018
 8000208:	00000000 	.word	0x00000000

0800020c <register_tm_clones>:
 800020c:	4805      	ldr	r0, [pc, #20]	; (8000224 <register_tm_clones+0x18>)
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <register_tm_clones+0x1c>)
 8000210:	1a1b      	subs	r3, r3, r0
 8000212:	0fd9      	lsrs	r1, r3, #31
 8000214:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000218:	1049      	asrs	r1, r1, #1
 800021a:	d002      	beq.n	8000222 <register_tm_clones+0x16>
 800021c:	4b03      	ldr	r3, [pc, #12]	; (800022c <register_tm_clones+0x20>)
 800021e:	b103      	cbz	r3, 8000222 <register_tm_clones+0x16>
 8000220:	4718      	bx	r3
 8000222:	4770      	bx	lr
 8000224:	20000018 	.word	0x20000018
 8000228:	20000018 	.word	0x20000018
 800022c:	00000000 	.word	0x00000000

08000230 <__do_global_dtors_aux>:
 8000230:	b510      	push	{r4, lr}
 8000232:	4c06      	ldr	r4, [pc, #24]	; (800024c <__do_global_dtors_aux+0x1c>)
 8000234:	7823      	ldrb	r3, [r4, #0]
 8000236:	b943      	cbnz	r3, 800024a <__do_global_dtors_aux+0x1a>
 8000238:	f7ff ffda 	bl	80001f0 <deregister_tm_clones>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x20>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x16>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x24>)
 8000242:	f3af 8000 	nop.w
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000018 	.word	0x20000018
 8000250:	00000000 	.word	0x00000000
 8000254:	08008428 	.word	0x08008428

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b05      	ldr	r3, [pc, #20]	; (8000270 <frame_dummy+0x18>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4905      	ldr	r1, [pc, #20]	; (8000274 <frame_dummy+0x1c>)
 8000260:	4805      	ldr	r0, [pc, #20]	; (8000278 <frame_dummy+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800026a:	f7ff bfcf 	b.w	800020c <register_tm_clones>
 800026e:	bf00      	nop
 8000270:	00000000 	.word	0x00000000
 8000274:	2000001c 	.word	0x2000001c
 8000278:	08008428 	.word	0x08008428

0800027c <setDataReady>:
uint8_t RXone_Data[4] = {0,0,0,0};
uint8_t RXtwo_Data[4] = {0,0,0,0};
int milis = 0;
int counter = 0; //sample counter

void setDataReady(){
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	if(flipped){
 8000280:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <setDataReady+0x54>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d021      	beq.n	80002cc <setDataReady+0x50>
		if(pin){
 8000288:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <setDataReady+0x58>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d008      	beq.n	80002a2 <setDataReady+0x26>
			HAL_SPI_Receive_IT(&hspi1, RXone_Data, sizeof(RXone_Data));
 8000290:	2204      	movs	r2, #4
 8000292:	4911      	ldr	r1, [pc, #68]	; (80002d8 <setDataReady+0x5c>)
 8000294:	4811      	ldr	r0, [pc, #68]	; (80002dc <setDataReady+0x60>)
 8000296:	f005 fa71 	bl	800577c <HAL_SPI_Receive_IT>
			flipped = 0;
 800029a:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <setDataReady+0x54>)
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
			}
			HAL_SPI_Receive_IT(&hspi1, RXtwo_Data, sizeof(RXtwo_Data));
			flipped = 0;
		}
	}
}
 80002a0:	e014      	b.n	80002cc <setDataReady+0x50>
			if(flagone){
 80002a2:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <setDataReady+0x64>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d008      	beq.n	80002bc <setDataReady+0x40>
				milis = HAL_GetTick();
 80002aa:	f001 fbb5 	bl	8001a18 <HAL_GetTick>
 80002ae:	4603      	mov	r3, r0
 80002b0:	461a      	mov	r2, r3
 80002b2:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <setDataReady+0x68>)
 80002b4:	601a      	str	r2, [r3, #0]
				flagone = 0;
 80002b6:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <setDataReady+0x64>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
			HAL_SPI_Receive_IT(&hspi1, RXtwo_Data, sizeof(RXtwo_Data));
 80002bc:	2204      	movs	r2, #4
 80002be:	490a      	ldr	r1, [pc, #40]	; (80002e8 <setDataReady+0x6c>)
 80002c0:	4806      	ldr	r0, [pc, #24]	; (80002dc <setDataReady+0x60>)
 80002c2:	f005 fa5b 	bl	800577c <HAL_SPI_Receive_IT>
			flipped = 0;
 80002c6:	4b02      	ldr	r3, [pc, #8]	; (80002d0 <setDataReady+0x54>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	20000008 	.word	0x20000008
 80002d4:	20000520 	.word	0x20000520
 80002d8:	20000530 	.word	0x20000530
 80002dc:	200001cc 	.word	0x200001cc
 80002e0:	20000000 	.word	0x20000000
 80002e4:	20000538 	.word	0x20000538
 80002e8:	20000534 	.word	0x20000534

080002ec <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
    if(pin){
 80002f4:	4b20      	ldr	r3, [pc, #128]	; (8000378 <HAL_SPI_RxCpltCallback+0x8c>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d02b      	beq.n	8000354 <HAL_SPI_RxCpltCallback+0x68>
    	if(flagtwo){
 80002fc:	4b1f      	ldr	r3, [pc, #124]	; (800037c <HAL_SPI_RxCpltCallback+0x90>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d018      	beq.n	8000336 <HAL_SPI_RxCpltCallback+0x4a>
    		if(counter>1000){
 8000304:	4b1e      	ldr	r3, [pc, #120]	; (8000380 <HAL_SPI_RxCpltCallback+0x94>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800030c:	dd0e      	ble.n	800032c <HAL_SPI_RxCpltCallback+0x40>
    		milis = HAL_GetTick() - milis; //get time for 1k samples
 800030e:	f001 fb83 	bl	8001a18 <HAL_GetTick>
 8000312:	4603      	mov	r3, r0
 8000314:	4a1b      	ldr	r2, [pc, #108]	; (8000384 <HAL_SPI_RxCpltCallback+0x98>)
 8000316:	6812      	ldr	r2, [r2, #0]
 8000318:	1a9b      	subs	r3, r3, r2
 800031a:	461a      	mov	r2, r3
 800031c:	4b19      	ldr	r3, [pc, #100]	; (8000384 <HAL_SPI_RxCpltCallback+0x98>)
 800031e:	601a      	str	r2, [r3, #0]
    		flagtwo = 0;
 8000320:	4b16      	ldr	r3, [pc, #88]	; (800037c <HAL_SPI_RxCpltCallback+0x90>)
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
    		flagger = 1;
 8000326:	4b18      	ldr	r3, [pc, #96]	; (8000388 <HAL_SPI_RxCpltCallback+0x9c>)
 8000328:	2201      	movs	r2, #1
 800032a:	601a      	str	r2, [r3, #0]
    		}
    		counter +=1;
 800032c:	4b14      	ldr	r3, [pc, #80]	; (8000380 <HAL_SPI_RxCpltCallback+0x94>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	3301      	adds	r3, #1
 8000332:	4a13      	ldr	r2, [pc, #76]	; (8000380 <HAL_SPI_RxCpltCallback+0x94>)
 8000334:	6013      	str	r3, [r2, #0]
    	}
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	2101      	movs	r1, #1
 800033a:	4814      	ldr	r0, [pc, #80]	; (800038c <HAL_SPI_RxCpltCallback+0xa0>)
 800033c:	f002 fe6e 	bl	800301c <HAL_GPIO_WritePin>
    	pin = 0;
 8000340:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <HAL_SPI_RxCpltCallback+0x8c>)
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
    	dataonewritten = 1;
 8000346:	4b12      	ldr	r3, [pc, #72]	; (8000390 <HAL_SPI_RxCpltCallback+0xa4>)
 8000348:	2201      	movs	r2, #1
 800034a:	601a      	str	r2, [r3, #0]
    	flipped = 1;
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <HAL_SPI_RxCpltCallback+0xa8>)
 800034e:	2201      	movs	r2, #1
 8000350:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
    	pin = 1;
    	datatwowritten = 1;
    	flipped = 1;
    }
}
 8000352:	e00d      	b.n	8000370 <HAL_SPI_RxCpltCallback+0x84>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000354:	2201      	movs	r2, #1
 8000356:	2101      	movs	r1, #1
 8000358:	480c      	ldr	r0, [pc, #48]	; (800038c <HAL_SPI_RxCpltCallback+0xa0>)
 800035a:	f002 fe5f 	bl	800301c <HAL_GPIO_WritePin>
    	pin = 1;
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <HAL_SPI_RxCpltCallback+0x8c>)
 8000360:	2201      	movs	r2, #1
 8000362:	601a      	str	r2, [r3, #0]
    	datatwowritten = 1;
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <HAL_SPI_RxCpltCallback+0xac>)
 8000366:	2201      	movs	r2, #1
 8000368:	601a      	str	r2, [r3, #0]
    	flipped = 1;
 800036a:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <HAL_SPI_RxCpltCallback+0xa8>)
 800036c:	2201      	movs	r2, #1
 800036e:	601a      	str	r2, [r3, #0]
}
 8000370:	bf00      	nop
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000520 	.word	0x20000520
 800037c:	20000004 	.word	0x20000004
 8000380:	2000053c 	.word	0x2000053c
 8000384:	20000538 	.word	0x20000538
 8000388:	20000524 	.word	0x20000524
 800038c:	48000800 	.word	0x48000800
 8000390:	20000528 	.word	0x20000528
 8000394:	20000008 	.word	0x20000008
 8000398:	2000052c 	.word	0x2000052c

0800039c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	f5ad 3d48 	sub.w	sp, sp, #204800	; 0x32000
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a6:	f001 face 	bl	8001946 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003aa:	f000 f8c3 	bl	8000534 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80003ae:	f000 f925 	bl	80005fc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b2:	f000 fcf1 	bl	8000d98 <MX_GPIO_Init>
  MX_ADC1_Init();
 80003b6:	f000 f951 	bl	800065c <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80003ba:	f000 f9b3 	bl	8000724 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 80003be:	f000 f9e9 	bl	8000794 <MX_I2C1_Init>
  MX_I2C2_Init();
 80003c2:	f000 fa27 	bl	8000814 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80003c6:	f000 fa65 	bl	8000894 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 80003ca:	f000 fab9 	bl	8000940 <MX_SPI1_Init>
  MX_SPI3_Init();
 80003ce:	f000 faf5 	bl	80009bc <MX_SPI3_Init>
  MX_TIM3_Init();
 80003d2:	f000 fb31 	bl	8000a38 <MX_TIM3_Init>
  MX_UART4_Init();
 80003d6:	f000 fba5 	bl	8000b24 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80003da:	f000 fbef 	bl	8000bbc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80003de:	f000 fc39 	bl	8000c54 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80003e2:	f000 fc85 	bl	8000cf0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80003e6:	f000 fccf 	bl	8000d88 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  uint8_t RXone_Data_local[102400] = {0};
 80003ea:	f507 33c8 	add.w	r3, r7, #102400	; 0x19000
 80003ee:	f103 0310 	add.w	r3, r3, #16
 80003f2:	2200      	movs	r2, #0
 80003f4:	f843 2c0c 	str.w	r2, [r3, #-12]
 80003f8:	3b08      	subs	r3, #8
 80003fa:	4a45      	ldr	r2, [pc, #276]	; (8000510 <main+0x174>)
 80003fc:	2100      	movs	r1, #0
 80003fe:	4618      	mov	r0, r3
 8000400:	f007 fea6 	bl	8008150 <memset>
  int pointerone = 0;
 8000404:	2300      	movs	r3, #0
 8000406:	f507 3248 	add.w	r2, r7, #204800	; 0x32000
 800040a:	f102 020c 	add.w	r2, r2, #12
 800040e:	6013      	str	r3, [r2, #0]
  uint8_t RXtwo_Data_local[102400] = {0};
 8000410:	f107 0310 	add.w	r3, r7, #16
 8000414:	2200      	movs	r2, #0
 8000416:	f843 2c0c 	str.w	r2, [r3, #-12]
 800041a:	3b08      	subs	r3, #8
 800041c:	4a3c      	ldr	r2, [pc, #240]	; (8000510 <main+0x174>)
 800041e:	2100      	movs	r1, #0
 8000420:	4618      	mov	r0, r3
 8000422:	f007 fe95 	bl	8008150 <memset>
  int pointertwo = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	f507 3248 	add.w	r2, r7, #204800	; 0x32000
 800042c:	f102 0208 	add.w	r2, r2, #8
 8000430:	6013      	str	r3, [r2, #0]

  //int xd = 0;
  HAL_TIM_Base_Start(&htim3);
 8000432:	4838      	ldr	r0, [pc, #224]	; (8000514 <main+0x178>)
 8000434:	f005 fffe 	bl	8006434 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000438:	210c      	movs	r1, #12
 800043a:	4836      	ldr	r0, [pc, #216]	; (8000514 <main+0x178>)
 800043c:	f006 f8c4 	bl	80065c8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000440:	2200      	movs	r2, #0
 8000442:	2101      	movs	r1, #1
 8000444:	4834      	ldr	r0, [pc, #208]	; (8000518 <main+0x17c>)
 8000446:	f002 fde9 	bl	800301c <HAL_GPIO_WritePin>
  //int milis = HAL_GetTick();

  int time = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	f507 3248 	add.w	r2, r7, #204800	; 0x32000
 8000450:	f102 0204 	add.w	r2, r2, #4
 8000454:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 if(dataonewritten&&pointerone<102400){
 8000456:	4b31      	ldr	r3, [pc, #196]	; (800051c <main+0x180>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d023      	beq.n	80004a6 <main+0x10a>
 800045e:	f507 3348 	add.w	r3, r7, #204800	; 0x32000
 8000462:	f103 030c 	add.w	r3, r3, #12
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	f5b3 3fc8 	cmp.w	r3, #102400	; 0x19000
 800046c:	da1b      	bge.n	80004a6 <main+0x10a>
		 memcpy(RXone_Data_local + pointerone, &RXone_Data, 4);
 800046e:	f507 3348 	add.w	r3, r7, #204800	; 0x32000
 8000472:	f103 030c 	add.w	r3, r3, #12
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	f507 33c8 	add.w	r3, r7, #102400	; 0x19000
 800047c:	f103 0310 	add.w	r3, r3, #16
 8000480:	3b0c      	subs	r3, #12
 8000482:	4413      	add	r3, r2
 8000484:	4a26      	ldr	r2, [pc, #152]	; (8000520 <main+0x184>)
 8000486:	6812      	ldr	r2, [r2, #0]
 8000488:	601a      	str	r2, [r3, #0]
		 pointerone +=4;
 800048a:	f507 3348 	add.w	r3, r7, #204800	; 0x32000
 800048e:	f103 030c 	add.w	r3, r3, #12
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	3304      	adds	r3, #4
 8000496:	f507 3248 	add.w	r2, r7, #204800	; 0x32000
 800049a:	f102 020c 	add.w	r2, r2, #12
 800049e:	6013      	str	r3, [r2, #0]
		 dataonewritten = 0;
 80004a0:	4b1e      	ldr	r3, [pc, #120]	; (800051c <main+0x180>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
	 }
	 if(datatwowritten&&pointertwo<102400){
 80004a6:	4b1f      	ldr	r3, [pc, #124]	; (8000524 <main+0x188>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d021      	beq.n	80004f2 <main+0x156>
 80004ae:	f507 3348 	add.w	r3, r7, #204800	; 0x32000
 80004b2:	f103 0308 	add.w	r3, r3, #8
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f5b3 3fc8 	cmp.w	r3, #102400	; 0x19000
 80004bc:	da19      	bge.n	80004f2 <main+0x156>
		 memcpy(RXtwo_Data_local + pointertwo, &RXtwo_Data, 4);
 80004be:	f507 3348 	add.w	r3, r7, #204800	; 0x32000
 80004c2:	f103 0308 	add.w	r3, r3, #8
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	3b0c      	subs	r3, #12
 80004ce:	4413      	add	r3, r2
 80004d0:	4a15      	ldr	r2, [pc, #84]	; (8000528 <main+0x18c>)
 80004d2:	6812      	ldr	r2, [r2, #0]
 80004d4:	601a      	str	r2, [r3, #0]
		 pointertwo +=4;
 80004d6:	f507 3348 	add.w	r3, r7, #204800	; 0x32000
 80004da:	f103 0308 	add.w	r3, r3, #8
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	3304      	adds	r3, #4
 80004e2:	f507 3248 	add.w	r2, r7, #204800	; 0x32000
 80004e6:	f102 0208 	add.w	r2, r2, #8
 80004ea:	6013      	str	r3, [r2, #0]
		 datatwowritten = 0;
 80004ec:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <main+0x188>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
	 }
	// memcpy(RXone_Data_local, &RXone_Data, 4); //just copy the data into scope so it can be viewed in debugger
	// memcpy(RXtwo_Data_local, &RXtwo_Data, 4);
	 if(flagger){
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <main+0x190>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0ad      	beq.n	8000456 <main+0xba>
		 //HAL_SPI_Receive(&hspi1, RX_Data, sizeof(RX_Data), 5000);
		 //HAL_Delay(5000);
		 time = milis;
 80004fa:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <main+0x194>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f507 3248 	add.w	r2, r7, #204800	; 0x32000
 8000502:	f102 0204 	add.w	r2, r2, #4
 8000506:	6013      	str	r3, [r2, #0]
		 flagger = 0;
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <main+0x190>)
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
	 if(dataonewritten&&pointerone<102400){
 800050e:	e7a2      	b.n	8000456 <main+0xba>
 8000510:	00018ffc 	.word	0x00018ffc
 8000514:	20000294 	.word	0x20000294
 8000518:	48000800 	.word	0x48000800
 800051c:	20000528 	.word	0x20000528
 8000520:	20000530 	.word	0x20000530
 8000524:	2000052c 	.word	0x2000052c
 8000528:	20000534 	.word	0x20000534
 800052c:	20000524 	.word	0x20000524
 8000530:	20000538 	.word	0x20000538

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b096      	sub	sp, #88	; 0x58
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	2244      	movs	r2, #68	; 0x44
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f007 fe04 	bl	8008150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	463b      	mov	r3, r7
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000556:	2000      	movs	r0, #0
 8000558:	f003 fbc8 	bl	8003cec <HAL_PWREx_ControlVoltageScaling>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000562:	f000 fd6f 	bl	8001044 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000566:	f003 fb91 	bl	8003c8c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800056a:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <SystemClock_Config+0xc4>)
 800056c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000570:	4a21      	ldr	r2, [pc, #132]	; (80005f8 <SystemClock_Config+0xc4>)
 8000572:	f023 0318 	bic.w	r3, r3, #24
 8000576:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800057a:	2314      	movs	r3, #20
 800057c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800057e:	2301      	movs	r3, #1
 8000580:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000582:	2301      	movs	r3, #1
 8000584:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800058a:	2360      	movs	r3, #96	; 0x60
 800058c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000592:	2301      	movs	r3, #1
 8000594:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000596:	2301      	movs	r3, #1
 8000598:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800059a:	233c      	movs	r3, #60	; 0x3c
 800059c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fc40 	bl	8003e34 <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005ba:	f000 fd43 	bl	8001044 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2303      	movs	r3, #3
 80005c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ca:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80005ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80005d0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d6:	463b      	mov	r3, r7
 80005d8:	2105      	movs	r1, #5
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 f844 	bl	8004668 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005e6:	f000 fd2d 	bl	8001044 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005ea:	f004 fe2b 	bl	8005244 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005ee:	bf00      	nop
 80005f0:	3758      	adds	r7, #88	; 0x58
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000

080005fc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b0a6      	sub	sp, #152	; 0x98
 8000600:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2294      	movs	r2, #148	; 0x94
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f007 fda1 	bl	8008150 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800060e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000612:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000614:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800061c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000620:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000622:	2301      	movs	r3, #1
 8000624:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000626:	2301      	movs	r3, #1
 8000628:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800062a:	2318      	movs	r3, #24
 800062c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800063a:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800063e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f004 face 	bl	8004be4 <HAL_RCCEx_PeriphCLKConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800064e:	f000 fcf9 	bl	8001044 <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3798      	adds	r7, #152	; 0x98
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000662:	463b      	mov	r3, r7
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
 8000670:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000672:	4b29      	ldr	r3, [pc, #164]	; (8000718 <MX_ADC1_Init+0xbc>)
 8000674:	4a29      	ldr	r2, [pc, #164]	; (800071c <MX_ADC1_Init+0xc0>)
 8000676:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000678:	4b27      	ldr	r3, [pc, #156]	; (8000718 <MX_ADC1_Init+0xbc>)
 800067a:	2200      	movs	r2, #0
 800067c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800067e:	4b26      	ldr	r3, [pc, #152]	; (8000718 <MX_ADC1_Init+0xbc>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <MX_ADC1_Init+0xbc>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800068a:	4b23      	ldr	r3, [pc, #140]	; (8000718 <MX_ADC1_Init+0xbc>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000690:	4b21      	ldr	r3, [pc, #132]	; (8000718 <MX_ADC1_Init+0xbc>)
 8000692:	2204      	movs	r2, #4
 8000694:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000696:	4b20      	ldr	r3, [pc, #128]	; (8000718 <MX_ADC1_Init+0xbc>)
 8000698:	2200      	movs	r2, #0
 800069a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800069c:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <MX_ADC1_Init+0xbc>)
 800069e:	2200      	movs	r2, #0
 80006a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006a2:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <MX_ADC1_Init+0xbc>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <MX_ADC1_Init+0xbc>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <MX_ADC1_Init+0xbc>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b6:	4b18      	ldr	r3, [pc, #96]	; (8000718 <MX_ADC1_Init+0xbc>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <MX_ADC1_Init+0xbc>)
 80006be:	2200      	movs	r2, #0
 80006c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_ADC1_Init+0xbc>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_ADC1_Init+0xbc>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006d2:	4811      	ldr	r0, [pc, #68]	; (8000718 <MX_ADC1_Init+0xbc>)
 80006d4:	f001 fb4c 	bl	8001d70 <HAL_ADC_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80006de:	f000 fcb1 	bl	8001044 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_ADC1_Init+0xc4>)
 80006e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006e6:	2306      	movs	r3, #6
 80006e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ee:	237f      	movs	r3, #127	; 0x7f
 80006f0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006f2:	2304      	movs	r3, #4
 80006f4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fa:	463b      	mov	r3, r7
 80006fc:	4619      	mov	r1, r3
 80006fe:	4806      	ldr	r0, [pc, #24]	; (8000718 <MX_ADC1_Init+0xbc>)
 8000700:	f001 fc82 	bl	8002008 <HAL_ADC_ConfigChannel>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800070a:	f000 fc9b 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000034 	.word	0x20000034
 800071c:	50040000 	.word	0x50040000
 8000720:	36902000 	.word	0x36902000

08000724 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_DFSDM1_Init+0x68>)
 800072a:	4a19      	ldr	r2, [pc, #100]	; (8000790 <MX_DFSDM1_Init+0x6c>)
 800072c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_DFSDM1_Init+0x68>)
 8000730:	2201      	movs	r2, #1
 8000732:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_DFSDM1_Init+0x68>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_DFSDM1_Init+0x68>)
 800073c:	2202      	movs	r2, #2
 800073e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_DFSDM1_Init+0x68>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_DFSDM1_Init+0x68>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_DFSDM1_Init+0x68>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_DFSDM1_Init+0x68>)
 8000754:	2200      	movs	r2, #0
 8000756:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_DFSDM1_Init+0x68>)
 800075a:	2204      	movs	r2, #4
 800075c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_DFSDM1_Init+0x68>)
 8000760:	2200      	movs	r2, #0
 8000762:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_DFSDM1_Init+0x68>)
 8000766:	2201      	movs	r2, #1
 8000768:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_DFSDM1_Init+0x68>)
 800076c:	2200      	movs	r2, #0
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_DFSDM1_Init+0x68>)
 8000772:	2200      	movs	r2, #0
 8000774:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_DFSDM1_Init+0x68>)
 8000778:	f002 f952 	bl	8002a20 <HAL_DFSDM_ChannelInit>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000782:	f000 fc5f 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	2000009c 	.word	0x2000009c
 8000790:	40016040 	.word	0x40016040

08000794 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <MX_I2C1_Init+0x74>)
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <MX_I2C1_Init+0x78>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x007074AF;
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_I2C1_Init+0x74>)
 80007a0:	4a1b      	ldr	r2, [pc, #108]	; (8000810 <MX_I2C1_Init+0x7c>)
 80007a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_I2C1_Init+0x74>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_I2C1_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_I2C1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ce:	480e      	ldr	r0, [pc, #56]	; (8000808 <MX_I2C1_Init+0x74>)
 80007d0:	f002 fc5f 	bl	8003092 <HAL_I2C_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007da:	f000 fc33 	bl	8001044 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007de:	2100      	movs	r1, #0
 80007e0:	4809      	ldr	r0, [pc, #36]	; (8000808 <MX_I2C1_Init+0x74>)
 80007e2:	f002 fce5 	bl	80031b0 <HAL_I2CEx_ConfigAnalogFilter>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007ec:	f000 fc2a 	bl	8001044 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007f0:	2100      	movs	r1, #0
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_I2C1_Init+0x74>)
 80007f4:	f002 fd27 	bl	8003246 <HAL_I2CEx_ConfigDigitalFilter>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007fe:	f000 fc21 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000d4 	.word	0x200000d4
 800080c:	40005400 	.word	0x40005400
 8000810:	007074af 	.word	0x007074af

08000814 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_I2C2_Init+0x74>)
 800081a:	4a1c      	ldr	r2, [pc, #112]	; (800088c <MX_I2C2_Init+0x78>)
 800081c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x007074AF;
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_I2C2_Init+0x74>)
 8000820:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <MX_I2C2_Init+0x7c>)
 8000822:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_I2C2_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082a:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_I2C2_Init+0x74>)
 800082c:	2201      	movs	r2, #1
 800082e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000830:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_I2C2_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_I2C2_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_I2C2_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_I2C2_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_I2C2_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800084e:	480e      	ldr	r0, [pc, #56]	; (8000888 <MX_I2C2_Init+0x74>)
 8000850:	f002 fc1f 	bl	8003092 <HAL_I2C_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800085a:	f000 fbf3 	bl	8001044 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800085e:	2100      	movs	r1, #0
 8000860:	4809      	ldr	r0, [pc, #36]	; (8000888 <MX_I2C2_Init+0x74>)
 8000862:	f002 fca5 	bl	80031b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800086c:	f000 fbea 	bl	8001044 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000870:	2100      	movs	r1, #0
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_I2C2_Init+0x74>)
 8000874:	f002 fce7 	bl	8003246 <HAL_I2CEx_ConfigDigitalFilter>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800087e:	f000 fbe1 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000128 	.word	0x20000128
 800088c:	40005800 	.word	0x40005800
 8000890:	007074af 	.word	0x007074af

08000894 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80008a8:	4b23      	ldr	r3, [pc, #140]	; (8000938 <MX_OCTOSPI1_Init+0xa4>)
 80008aa:	4a24      	ldr	r2, [pc, #144]	; (800093c <MX_OCTOSPI1_Init+0xa8>)
 80008ac:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80008ae:	4b22      	ldr	r3, [pc, #136]	; (8000938 <MX_OCTOSPI1_Init+0xa4>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80008b4:	4b20      	ldr	r3, [pc, #128]	; (8000938 <MX_OCTOSPI1_Init+0xa4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80008ba:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <MX_OCTOSPI1_Init+0xa4>)
 80008bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008c0:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80008c2:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <MX_OCTOSPI1_Init+0xa4>)
 80008c4:	2220      	movs	r2, #32
 80008c6:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <MX_OCTOSPI1_Init+0xa4>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80008ce:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <MX_OCTOSPI1_Init+0xa4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80008d4:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_OCTOSPI1_Init+0xa4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 80008da:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_OCTOSPI1_Init+0xa4>)
 80008dc:	2201      	movs	r2, #1
 80008de:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80008e0:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_OCTOSPI1_Init+0xa4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_OCTOSPI1_Init+0xa4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_OCTOSPI1_Init+0xa4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_OCTOSPI1_Init+0xa4>)
 80008f4:	2208      	movs	r2, #8
 80008f6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80008f8:	480f      	ldr	r0, [pc, #60]	; (8000938 <MX_OCTOSPI1_Init+0xa4>)
 80008fa:	f002 fcf1 	bl	80032e0 <HAL_OSPI_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000904:	f000 fb9e 	bl	8001044 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000908:	2301      	movs	r3, #1
 800090a:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 800090c:	2301      	movs	r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000910:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000914:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	f241 3288 	movw	r2, #5000	; 0x1388
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_OCTOSPI1_Init+0xa4>)
 8000920:	f002 fd98 	bl	8003454 <HAL_OSPIM_Config>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 800092a:	f000 fb8b 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	2000017c 	.word	0x2000017c
 800093c:	a0001000 	.word	0xa0001000

08000940 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000946:	4a1c      	ldr	r2, [pc, #112]	; (80009b8 <MX_SPI1_Init+0x78>)
 8000948:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_SPI1_Init+0x74>)
 800094c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000950:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_SPI1_Init+0x74>)
 800095a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800095e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_SPI1_Init+0x74>)
 800096e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000972:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000976:	2208      	movs	r2, #8
 8000978:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_SPI1_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_SPI1_Init+0x74>)
 800098e:	2207      	movs	r2, #7
 8000990:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_SPI1_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_SPI1_Init+0x74>)
 800099a:	2208      	movs	r2, #8
 800099c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_SPI1_Init+0x74>)
 80009a0:	f004 fe48 	bl	8005634 <HAL_SPI_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009aa:	f000 fb4b 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200001cc 	.word	0x200001cc
 80009b8:	40013000 	.word	0x40013000

080009bc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009c2:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <MX_SPI3_Init+0x78>)
 80009c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009d6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009da:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_SPI3_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_SPI3_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_SPI3_Init+0x74>)
 8000a0a:	2207      	movs	r2, #7
 8000a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_SPI3_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_SPI3_Init+0x74>)
 8000a16:	2208      	movs	r2, #8
 8000a18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_SPI3_Init+0x74>)
 8000a1c:	f004 fe0a 	bl	8005634 <HAL_SPI_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a26:	f000 fb0d 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000230 	.word	0x20000230
 8000a34:	40003c00 	.word	0x40003c00

08000a38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08e      	sub	sp, #56	; 0x38
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a58:	463b      	mov	r3, r7
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]
 8000a66:	615a      	str	r2, [r3, #20]
 8000a68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a6a:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <MX_TIM3_Init+0xe4>)
 8000a6c:	4a2c      	ldr	r2, [pc, #176]	; (8000b20 <MX_TIM3_Init+0xe8>)
 8000a6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a70:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <MX_TIM3_Init+0xe4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a76:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <MX_TIM3_Init+0xe4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2;
 8000a7c:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <MX_TIM3_Init+0xe4>)
 8000a7e:	2202      	movs	r2, #2
 8000a80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a82:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <MX_TIM3_Init+0xe4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a88:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <MX_TIM3_Init+0xe4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a8e:	4823      	ldr	r0, [pc, #140]	; (8000b1c <MX_TIM3_Init+0xe4>)
 8000a90:	f005 fc78 	bl	8006384 <HAL_TIM_Base_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000a9a:	f000 fad3 	bl	8001044 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000aa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	481c      	ldr	r0, [pc, #112]	; (8000b1c <MX_TIM3_Init+0xe4>)
 8000aac:	f005 ffa6 	bl	80069fc <HAL_TIM_ConfigClockSource>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ab6:	f000 fac5 	bl	8001044 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000aba:	4818      	ldr	r0, [pc, #96]	; (8000b1c <MX_TIM3_Init+0xe4>)
 8000abc:	f005 fd22 	bl	8006504 <HAL_TIM_PWM_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ac6:	f000 fabd 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4810      	ldr	r0, [pc, #64]	; (8000b1c <MX_TIM3_Init+0xe4>)
 8000ada:	f006 fc89 	bl	80073f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ae4:	f000 faae 	bl	8001044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae8:	2360      	movs	r3, #96	; 0x60
 8000aea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000af4:	2304      	movs	r3, #4
 8000af6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000af8:	463b      	mov	r3, r7
 8000afa:	220c      	movs	r2, #12
 8000afc:	4619      	mov	r1, r3
 8000afe:	4807      	ldr	r0, [pc, #28]	; (8000b1c <MX_TIM3_Init+0xe4>)
 8000b00:	f005 fe68 	bl	80067d4 <HAL_TIM_PWM_ConfigChannel>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000b0a:	f000 fa9b 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b0e:	4803      	ldr	r0, [pc, #12]	; (8000b1c <MX_TIM3_Init+0xe4>)
 8000b10:	f000 fd12 	bl	8001538 <HAL_TIM_MspPostInit>

}
 8000b14:	bf00      	nop
 8000b16:	3738      	adds	r7, #56	; 0x38
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000294 	.word	0x20000294
 8000b20:	40000400 	.word	0x40000400

08000b24 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b28:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <MX_UART4_Init+0x90>)
 8000b2a:	4a23      	ldr	r2, [pc, #140]	; (8000bb8 <MX_UART4_Init+0x94>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b2e:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <MX_UART4_Init+0x90>)
 8000b30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b34:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <MX_UART4_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <MX_UART4_Init+0x90>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <MX_UART4_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <MX_UART4_Init+0x90>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <MX_UART4_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <MX_UART4_Init+0x90>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5a:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <MX_UART4_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_UART4_Init+0x90>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_UART4_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b6c:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <MX_UART4_Init+0x90>)
 8000b6e:	f006 fcc7 	bl	8007500 <HAL_UART_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000b78:	f000 fa64 	bl	8001044 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <MX_UART4_Init+0x90>)
 8000b80:	f007 f9f8 	bl	8007f74 <HAL_UARTEx_SetTxFifoThreshold>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000b8a:	f000 fa5b 	bl	8001044 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4808      	ldr	r0, [pc, #32]	; (8000bb4 <MX_UART4_Init+0x90>)
 8000b92:	f007 fa2d 	bl	8007ff0 <HAL_UARTEx_SetRxFifoThreshold>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000b9c:	f000 fa52 	bl	8001044 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_UART4_Init+0x90>)
 8000ba2:	f007 f9ae 	bl	8007f02 <HAL_UARTEx_DisableFifoMode>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000bac:	f000 fa4a 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200002e0 	.word	0x200002e0
 8000bb8:	40004c00 	.word	0x40004c00

08000bbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bc0:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bc2:	4a23      	ldr	r2, [pc, #140]	; (8000c50 <MX_USART1_UART_Init+0x94>)
 8000bc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bc6:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c04:	4811      	ldr	r0, [pc, #68]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000c06:	f006 fc7b 	bl	8007500 <HAL_UART_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c10:	f000 fa18 	bl	8001044 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c14:	2100      	movs	r1, #0
 8000c16:	480d      	ldr	r0, [pc, #52]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000c18:	f007 f9ac 	bl	8007f74 <HAL_UARTEx_SetTxFifoThreshold>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c22:	f000 fa0f 	bl	8001044 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c26:	2100      	movs	r1, #0
 8000c28:	4808      	ldr	r0, [pc, #32]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000c2a:	f007 f9e1 	bl	8007ff0 <HAL_UARTEx_SetRxFifoThreshold>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c34:	f000 fa06 	bl	8001044 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000c3a:	f007 f962 	bl	8007f02 <HAL_UARTEx_DisableFifoMode>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c44:	f000 f9fe 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000370 	.word	0x20000370
 8000c50:	40013800 	.word	0x40013800

08000c54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c58:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <MX_USART2_UART_Init+0x94>)
 8000c5a:	4a24      	ldr	r2, [pc, #144]	; (8000cec <MX_USART2_UART_Init+0x98>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c5e:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <MX_USART2_UART_Init+0x94>)
 8000c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <MX_USART2_UART_Init+0x94>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <MX_USART2_UART_Init+0x94>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <MX_USART2_UART_Init+0x94>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <MX_USART2_UART_Init+0x94>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <MX_USART2_UART_Init+0x94>)
 8000c80:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c84:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <MX_USART2_UART_Init+0x94>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_USART2_UART_Init+0x94>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <MX_USART2_UART_Init+0x94>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <MX_USART2_UART_Init+0x94>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c9e:	4812      	ldr	r0, [pc, #72]	; (8000ce8 <MX_USART2_UART_Init+0x94>)
 8000ca0:	f006 fc2e 	bl	8007500 <HAL_UART_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000caa:	f000 f9cb 	bl	8001044 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cae:	2100      	movs	r1, #0
 8000cb0:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <MX_USART2_UART_Init+0x94>)
 8000cb2:	f007 f95f 	bl	8007f74 <HAL_UARTEx_SetTxFifoThreshold>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000cbc:	f000 f9c2 	bl	8001044 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <MX_USART2_UART_Init+0x94>)
 8000cc4:	f007 f994 	bl	8007ff0 <HAL_UARTEx_SetRxFifoThreshold>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000cce:	f000 f9b9 	bl	8001044 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_USART2_UART_Init+0x94>)
 8000cd4:	f007 f915 	bl	8007f02 <HAL_UARTEx_DisableFifoMode>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000cde:	f000 f9b1 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000400 	.word	0x20000400
 8000cec:	40004400 	.word	0x40004400

08000cf0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cf4:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000cf6:	4a23      	ldr	r2, [pc, #140]	; (8000d84 <MX_USART3_UART_Init+0x94>)
 8000cf8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cfa:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000cfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d02:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d08:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d14:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d16:	220c      	movs	r2, #12
 8000d18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1a:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d38:	4811      	ldr	r0, [pc, #68]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d3a:	f006 fbe1 	bl	8007500 <HAL_UART_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d44:	f000 f97e 	bl	8001044 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d48:	2100      	movs	r1, #0
 8000d4a:	480d      	ldr	r0, [pc, #52]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d4c:	f007 f912 	bl	8007f74 <HAL_UARTEx_SetTxFifoThreshold>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d56:	f000 f975 	bl	8001044 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4808      	ldr	r0, [pc, #32]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d5e:	f007 f947 	bl	8007ff0 <HAL_UARTEx_SetRxFifoThreshold>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d68:	f000 f96c 	bl	8001044 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <MX_USART3_UART_Init+0x90>)
 8000d6e:	f007 f8c8 	bl	8007f02 <HAL_UARTEx_DisableFifoMode>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d78:	f000 f964 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000490 	.word	0x20000490
 8000d84:	40004800 	.word	0x40004800

08000d88 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08c      	sub	sp, #48	; 0x30
 8000d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dae:	4ba0      	ldr	r3, [pc, #640]	; (8001030 <MX_GPIO_Init+0x298>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	4a9f      	ldr	r2, [pc, #636]	; (8001030 <MX_GPIO_Init+0x298>)
 8000db4:	f043 0310 	orr.w	r3, r3, #16
 8000db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dba:	4b9d      	ldr	r3, [pc, #628]	; (8001030 <MX_GPIO_Init+0x298>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	f003 0310 	and.w	r3, r3, #16
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc6:	4b9a      	ldr	r3, [pc, #616]	; (8001030 <MX_GPIO_Init+0x298>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	4a99      	ldr	r2, [pc, #612]	; (8001030 <MX_GPIO_Init+0x298>)
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd2:	4b97      	ldr	r3, [pc, #604]	; (8001030 <MX_GPIO_Init+0x298>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dde:	4b94      	ldr	r3, [pc, #592]	; (8001030 <MX_GPIO_Init+0x298>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	4a93      	ldr	r2, [pc, #588]	; (8001030 <MX_GPIO_Init+0x298>)
 8000de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dea:	4b91      	ldr	r3, [pc, #580]	; (8001030 <MX_GPIO_Init+0x298>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	4b8e      	ldr	r3, [pc, #568]	; (8001030 <MX_GPIO_Init+0x298>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	4a8d      	ldr	r2, [pc, #564]	; (8001030 <MX_GPIO_Init+0x298>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e02:	4b8b      	ldr	r3, [pc, #556]	; (8001030 <MX_GPIO_Init+0x298>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	4b88      	ldr	r3, [pc, #544]	; (8001030 <MX_GPIO_Init+0x298>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	4a87      	ldr	r2, [pc, #540]	; (8001030 <MX_GPIO_Init+0x298>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1a:	4b85      	ldr	r3, [pc, #532]	; (8001030 <MX_GPIO_Init+0x298>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e26:	4b82      	ldr	r3, [pc, #520]	; (8001030 <MX_GPIO_Init+0x298>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	4a81      	ldr	r2, [pc, #516]	; (8001030 <MX_GPIO_Init+0x298>)
 8000e2c:	f043 0308 	orr.w	r3, r3, #8
 8000e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e32:	4b7f      	ldr	r3, [pc, #508]	; (8001030 <MX_GPIO_Init+0x298>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	f003 0308 	and.w	r3, r3, #8
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f240 1105 	movw	r1, #261	; 0x105
 8000e44:	487b      	ldr	r0, [pc, #492]	; (8001034 <MX_GPIO_Init+0x29c>)
 8000e46:	f002 f8e9 	bl	800301c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f240 214f 	movw	r1, #591	; 0x24f
 8000e50:	4879      	ldr	r0, [pc, #484]	; (8001038 <MX_GPIO_Init+0x2a0>)
 8000e52:	f002 f8e3 	bl	800301c <HAL_GPIO_WritePin>
                          |VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f248 110c 	movw	r1, #33036	; 0x810c
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e60:	f002 f8dc 	bl	800301c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e64:	2200      	movs	r2, #0
 8000e66:	f24f 0134 	movw	r1, #61492	; 0xf034
 8000e6a:	4874      	ldr	r0, [pc, #464]	; (800103c <MX_GPIO_Init+0x2a4>)
 8000e6c:	f002 f8d6 	bl	800301c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	f242 0183 	movw	r1, #8323	; 0x2083
 8000e76:	4872      	ldr	r0, [pc, #456]	; (8001040 <MX_GPIO_Init+0x2a8>)
 8000e78:	f002 f8d0 	bl	800301c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000e7c:	f240 1305 	movw	r3, #261	; 0x105
 8000e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e82:	2301      	movs	r3, #1
 8000e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e8e:	f107 031c 	add.w	r3, r7, #28
 8000e92:	4619      	mov	r1, r3
 8000e94:	4867      	ldr	r0, [pc, #412]	; (8001034 <MX_GPIO_Init+0x29c>)
 8000e96:	f001 ff2f 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000e9a:	236a      	movs	r3, #106	; 0x6a
 8000e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ea2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4619      	mov	r1, r3
 8000eae:	4861      	ldr	r0, [pc, #388]	; (8001034 <MX_GPIO_Init+0x29c>)
 8000eb0:	f001 ff22 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000eb4:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ebe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	4619      	mov	r1, r3
 8000eca:	485b      	ldr	r0, [pc, #364]	; (8001038 <MX_GPIO_Init+0x2a0>)
 8000ecc:	f001 ff14 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ed0:	230f      	movs	r3, #15
 8000ed2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000edc:	2303      	movs	r3, #3
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4854      	ldr	r0, [pc, #336]	; (8001038 <MX_GPIO_Init+0x2a0>)
 8000ee8:	f001 ff06 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000eec:	f248 130c 	movw	r3, #33036	; 0x810c
 8000ef0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	4619      	mov	r1, r3
 8000f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f08:	f001 fef6 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : D7_Pin */
  GPIO_InitStruct.Pin = D7_Pin;
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f10:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f24:	f001 fee8 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	483f      	ldr	r0, [pc, #252]	; (800103c <MX_GPIO_Init+0x2a4>)
 8000f3e:	f001 fedb 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f42:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000f46:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4838      	ldr	r0, [pc, #224]	; (800103c <MX_GPIO_Init+0x2a4>)
 8000f5c:	f001 fecc 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8000f60:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8000f64:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	4619      	mov	r1, r3
 8000f76:	4832      	ldr	r0, [pc, #200]	; (8001040 <MX_GPIO_Init+0x2a8>)
 8000f78:	f001 febe 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000f7c:	f242 0383 	movw	r3, #8323	; 0x2083
 8000f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4619      	mov	r1, r3
 8000f94:	482a      	ldr	r0, [pc, #168]	; (8001040 <MX_GPIO_Init+0x2a8>)
 8000f96:	f001 feaf 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000f9a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4821      	ldr	r0, [pc, #132]	; (8001038 <MX_GPIO_Init+0x2a0>)
 8000fb4:	f001 fea0 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd0:	f001 fe92 	bl	8002cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000fd4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fe6:	230a      	movs	r3, #10
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff4:	f001 fe80 	bl	8002cf8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	200a      	movs	r0, #10
 8000ffe:	f001 fcd8 	bl	80029b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001002:	200a      	movs	r0, #10
 8001004:	f001 fcf1 	bl	80029ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2100      	movs	r1, #0
 800100c:	2017      	movs	r0, #23
 800100e:	f001 fcd0 	bl	80029b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001012:	2017      	movs	r0, #23
 8001014:	f001 fce9 	bl	80029ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	2028      	movs	r0, #40	; 0x28
 800101e:	f001 fcc8 	bl	80029b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001022:	2028      	movs	r0, #40	; 0x28
 8001024:	f001 fce1 	bl	80029ea <HAL_NVIC_EnableIRQ>

}
 8001028:	bf00      	nop
 800102a:	3730      	adds	r7, #48	; 0x30
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40021000 	.word	0x40021000
 8001034:	48001000 	.word	0x48001000
 8001038:	48000800 	.word	0x48000800
 800103c:	48000400 	.word	0x48000400
 8001040:	48000c00 	.word	0x48000c00

08001044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001048:	b672      	cpsid	i
}
 800104a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800104c:	e7fe      	b.n	800104c <Error_Handler+0x8>
	...

08001050 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <HAL_MspInit+0x44>)
 8001058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105a:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <HAL_MspInit+0x44>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6613      	str	r3, [r2, #96]	; 0x60
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <HAL_MspInit+0x44>)
 8001064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <HAL_MspInit+0x44>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	4a08      	ldr	r2, [pc, #32]	; (8001094 <HAL_MspInit+0x44>)
 8001074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001078:	6593      	str	r3, [r2, #88]	; 0x58
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_MspInit+0x44>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000

08001098 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a15      	ldr	r2, [pc, #84]	; (800110c <HAL_ADC_MspInit+0x74>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d123      	bne.n	8001102 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <HAL_ADC_MspInit+0x78>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4a14      	ldr	r2, [pc, #80]	; (8001110 <HAL_ADC_MspInit+0x78>)
 80010c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_ADC_MspInit+0x78>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <HAL_ADC_MspInit+0x78>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <HAL_ADC_MspInit+0x78>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <HAL_ADC_MspInit+0x78>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 80010ea:	2330      	movs	r3, #48	; 0x30
 80010ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010ee:	230b      	movs	r3, #11
 80010f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <HAL_ADC_MspInit+0x7c>)
 80010fe:	f001 fdfb 	bl	8002cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001102:	bf00      	nop
 8001104:	3728      	adds	r7, #40	; 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	50040000 	.word	0x50040000
 8001110:	40021000 	.word	0x40021000
 8001114:	48000800 	.word	0x48000800

08001118 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b0ae      	sub	sp, #184	; 0xb8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	2294      	movs	r2, #148	; 0x94
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f007 f809 	bl	8008150 <memset>
  if(DFSDM1_Init == 0)
 800113e:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d142      	bne.n	80011cc <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001146:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800114a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800114c:	2300      	movs	r3, #0
 800114e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	4618      	mov	r0, r3
 8001158:	f003 fd44 	bl	8004be4 <HAL_RCCEx_PeriphCLKConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001162:	f7ff ff6f 	bl	8001044 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800116a:	4a1b      	ldr	r2, [pc, #108]	; (80011d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800116c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001170:	6613      	str	r3, [r2, #96]	; 0x60
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001176:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	4a15      	ldr	r2, [pc, #84]	; (80011d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001184:	f043 0310 	orr.w	r3, r3, #16
 8001188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001196:	f44f 7320 	mov.w	r3, #640	; 0x280
 800119a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80011b0:	2306      	movs	r3, #6
 80011b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011ba:	4619      	mov	r1, r3
 80011bc:	4807      	ldr	r0, [pc, #28]	; (80011dc <HAL_DFSDM_ChannelMspInit+0xc4>)
 80011be:	f001 fd9b 	bl	8002cf8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80011c2:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	4a02      	ldr	r2, [pc, #8]	; (80011d4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80011ca:	6013      	str	r3, [r2, #0]
  }

}
 80011cc:	bf00      	nop
 80011ce:	37b8      	adds	r7, #184	; 0xb8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000540 	.word	0x20000540
 80011d8:	40021000 	.word	0x40021000
 80011dc:	48001000 	.word	0x48001000

080011e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b0b0      	sub	sp, #192	; 0xc0
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f8:	f107 0318 	add.w	r3, r7, #24
 80011fc:	2294      	movs	r2, #148	; 0x94
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f006 ffa5 	bl	8008150 <memset>
  if(hi2c->Instance==I2C1)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a42      	ldr	r2, [pc, #264]	; (8001314 <HAL_I2C_MspInit+0x134>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d13c      	bne.n	800128a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001210:	2340      	movs	r3, #64	; 0x40
 8001212:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001214:	2300      	movs	r3, #0
 8001216:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001218:	f107 0318 	add.w	r3, r7, #24
 800121c:	4618      	mov	r0, r3
 800121e:	f003 fce1 	bl	8004be4 <HAL_RCCEx_PeriphCLKConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001228:	f7ff ff0c 	bl	8001044 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122c:	4b3a      	ldr	r3, [pc, #232]	; (8001318 <HAL_I2C_MspInit+0x138>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001230:	4a39      	ldr	r2, [pc, #228]	; (8001318 <HAL_I2C_MspInit+0x138>)
 8001232:	f043 0302 	orr.w	r3, r3, #2
 8001236:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001238:	4b37      	ldr	r3, [pc, #220]	; (8001318 <HAL_I2C_MspInit+0x138>)
 800123a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001244:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001248:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800124c:	2312      	movs	r3, #18
 800124e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001252:	2301      	movs	r3, #1
 8001254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800125e:	2304      	movs	r3, #4
 8001260:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001264:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001268:	4619      	mov	r1, r3
 800126a:	482c      	ldr	r0, [pc, #176]	; (800131c <HAL_I2C_MspInit+0x13c>)
 800126c:	f001 fd44 	bl	8002cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001270:	4b29      	ldr	r3, [pc, #164]	; (8001318 <HAL_I2C_MspInit+0x138>)
 8001272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001274:	4a28      	ldr	r2, [pc, #160]	; (8001318 <HAL_I2C_MspInit+0x138>)
 8001276:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800127a:	6593      	str	r3, [r2, #88]	; 0x58
 800127c:	4b26      	ldr	r3, [pc, #152]	; (8001318 <HAL_I2C_MspInit+0x138>)
 800127e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001288:	e040      	b.n	800130c <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a24      	ldr	r2, [pc, #144]	; (8001320 <HAL_I2C_MspInit+0x140>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d13b      	bne.n	800130c <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001294:	2380      	movs	r3, #128	; 0x80
 8001296:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001298:	2300      	movs	r3, #0
 800129a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800129c:	f107 0318 	add.w	r3, r7, #24
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 fc9f 	bl	8004be4 <HAL_RCCEx_PeriphCLKConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80012ac:	f7ff feca 	bl	8001044 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_I2C_MspInit+0x138>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b4:	4a18      	ldr	r2, [pc, #96]	; (8001318 <HAL_I2C_MspInit+0x138>)
 80012b6:	f043 0302 	orr.w	r3, r3, #2
 80012ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_I2C_MspInit+0x138>)
 80012be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80012c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d0:	2312      	movs	r3, #18
 80012d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012e2:	2304      	movs	r3, #4
 80012e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012ec:	4619      	mov	r1, r3
 80012ee:	480b      	ldr	r0, [pc, #44]	; (800131c <HAL_I2C_MspInit+0x13c>)
 80012f0:	f001 fd02 	bl	8002cf8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_I2C_MspInit+0x138>)
 80012f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f8:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_I2C_MspInit+0x138>)
 80012fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_I2C_MspInit+0x138>)
 8001302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
}
 800130c:	bf00      	nop
 800130e:	37c0      	adds	r7, #192	; 0xc0
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40005400 	.word	0x40005400
 8001318:	40021000 	.word	0x40021000
 800131c:	48000400 	.word	0x48000400
 8001320:	40005800 	.word	0x40005800

08001324 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b0b0      	sub	sp, #192	; 0xc0
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800133c:	f107 0318 	add.w	r3, r7, #24
 8001340:	2294      	movs	r2, #148	; 0x94
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f006 ff03 	bl	8008150 <memset>
  if(hospi->Instance==OCTOSPI1)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a28      	ldr	r2, [pc, #160]	; (80013f0 <HAL_OSPI_MspInit+0xcc>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d149      	bne.n	80013e8 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001354:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001358:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001360:	f107 0318 	add.w	r3, r7, #24
 8001364:	4618      	mov	r0, r3
 8001366:	f003 fc3d 	bl	8004be4 <HAL_RCCEx_PeriphCLKConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001370:	f7ff fe68 	bl	8001044 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001374:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <HAL_OSPI_MspInit+0xd0>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001378:	4a1e      	ldr	r2, [pc, #120]	; (80013f4 <HAL_OSPI_MspInit+0xd0>)
 800137a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800137e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <HAL_OSPI_MspInit+0xd0>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <HAL_OSPI_MspInit+0xd0>)
 800138e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001390:	4a18      	ldr	r2, [pc, #96]	; (80013f4 <HAL_OSPI_MspInit+0xd0>)
 8001392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001396:	6513      	str	r3, [r2, #80]	; 0x50
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <HAL_OSPI_MspInit+0xd0>)
 800139a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800139c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013a4:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <HAL_OSPI_MspInit+0xd0>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a8:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <HAL_OSPI_MspInit+0xd0>)
 80013aa:	f043 0310 	orr.w	r3, r3, #16
 80013ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b0:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <HAL_OSPI_MspInit+0xd0>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b4:	f003 0310 	and.w	r3, r3, #16
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80013bc:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80013c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80013d6:	230a      	movs	r3, #10
 80013d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013e0:	4619      	mov	r1, r3
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <HAL_OSPI_MspInit+0xd4>)
 80013e4:	f001 fc88 	bl	8002cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80013e8:	bf00      	nop
 80013ea:	37c0      	adds	r7, #192	; 0xc0
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	a0001000 	.word	0xa0001000
 80013f4:	40021000 	.word	0x40021000
 80013f8:	48001000 	.word	0x48001000

080013fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08c      	sub	sp, #48	; 0x30
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a33      	ldr	r2, [pc, #204]	; (80014e8 <HAL_SPI_MspInit+0xec>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d131      	bne.n	8001482 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800141e:	4b33      	ldr	r3, [pc, #204]	; (80014ec <HAL_SPI_MspInit+0xf0>)
 8001420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001422:	4a32      	ldr	r2, [pc, #200]	; (80014ec <HAL_SPI_MspInit+0xf0>)
 8001424:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001428:	6613      	str	r3, [r2, #96]	; 0x60
 800142a:	4b30      	ldr	r3, [pc, #192]	; (80014ec <HAL_SPI_MspInit+0xf0>)
 800142c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001432:	61bb      	str	r3, [r7, #24]
 8001434:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <HAL_SPI_MspInit+0xf0>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	4a2c      	ldr	r2, [pc, #176]	; (80014ec <HAL_SPI_MspInit+0xf0>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001442:	4b2a      	ldr	r3, [pc, #168]	; (80014ec <HAL_SPI_MspInit+0xf0>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800144e:	23e0      	movs	r3, #224	; 0xe0
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800145e:	2305      	movs	r3, #5
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4619      	mov	r1, r3
 8001468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146c:	f001 fc44 	bl	8002cf8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2100      	movs	r1, #0
 8001474:	2023      	movs	r0, #35	; 0x23
 8001476:	f001 fa9c 	bl	80029b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800147a:	2023      	movs	r0, #35	; 0x23
 800147c:	f001 fab5 	bl	80029ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001480:	e02d      	b.n	80014de <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI3)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a1a      	ldr	r2, [pc, #104]	; (80014f0 <HAL_SPI_MspInit+0xf4>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d128      	bne.n	80014de <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <HAL_SPI_MspInit+0xf0>)
 800148e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001490:	4a16      	ldr	r2, [pc, #88]	; (80014ec <HAL_SPI_MspInit+0xf0>)
 8001492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001496:	6593      	str	r3, [r2, #88]	; 0x58
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <HAL_SPI_MspInit+0xf0>)
 800149a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <HAL_SPI_MspInit+0xf0>)
 80014a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a8:	4a10      	ldr	r2, [pc, #64]	; (80014ec <HAL_SPI_MspInit+0xf0>)
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <HAL_SPI_MspInit+0xf0>)
 80014b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80014bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014ce:	2306      	movs	r3, #6
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4619      	mov	r1, r3
 80014d8:	4806      	ldr	r0, [pc, #24]	; (80014f4 <HAL_SPI_MspInit+0xf8>)
 80014da:	f001 fc0d 	bl	8002cf8 <HAL_GPIO_Init>
}
 80014de:	bf00      	nop
 80014e0:	3730      	adds	r7, #48	; 0x30
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40013000 	.word	0x40013000
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40003c00 	.word	0x40003c00
 80014f4:	48000800 	.word	0x48000800

080014f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <HAL_TIM_Base_MspInit+0x38>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d10b      	bne.n	8001522 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <HAL_TIM_Base_MspInit+0x3c>)
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	4a09      	ldr	r2, [pc, #36]	; (8001534 <HAL_TIM_Base_MspInit+0x3c>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	6593      	str	r3, [r2, #88]	; 0x58
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <HAL_TIM_Base_MspInit+0x3c>)
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40000400 	.word	0x40000400
 8001534:	40021000 	.word	0x40021000

08001538 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a11      	ldr	r2, [pc, #68]	; (800159c <HAL_TIM_MspPostInit+0x64>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d11b      	bne.n	8001592 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_TIM_MspPostInit+0x68>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	4a10      	ldr	r2, [pc, #64]	; (80015a0 <HAL_TIM_MspPostInit+0x68>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_TIM_MspPostInit+0x68>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001572:	2302      	movs	r3, #2
 8001574:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157e:	2303      	movs	r3, #3
 8001580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001582:	2302      	movs	r3, #2
 8001584:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	; (80015a4 <HAL_TIM_MspPostInit+0x6c>)
 800158e:	f001 fbb3 	bl	8002cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	3720      	adds	r7, #32
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40000400 	.word	0x40000400
 80015a0:	40021000 	.word	0x40021000
 80015a4:	48000400 	.word	0x48000400

080015a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b0b4      	sub	sp, #208	; 0xd0
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c4:	2294      	movs	r2, #148	; 0x94
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f006 fdc1 	bl	8008150 <memset>
  if(huart->Instance==UART4)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a83      	ldr	r2, [pc, #524]	; (80017e0 <HAL_UART_MspInit+0x238>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d13c      	bne.n	8001652 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80015d8:	2308      	movs	r3, #8
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80015dc:	2300      	movs	r3, #0
 80015de:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e4:	4618      	mov	r0, r3
 80015e6:	f003 fafd 	bl	8004be4 <HAL_RCCEx_PeriphCLKConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015f0:	f7ff fd28 	bl	8001044 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015f4:	4b7b      	ldr	r3, [pc, #492]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 80015f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f8:	4a7a      	ldr	r2, [pc, #488]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 80015fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001600:	4b78      	ldr	r3, [pc, #480]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 8001602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160c:	4b75      	ldr	r3, [pc, #468]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 800160e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001610:	4a74      	ldr	r2, [pc, #464]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001618:	4b72      	ldr	r3, [pc, #456]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 800161a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	623b      	str	r3, [r7, #32]
 8001622:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001624:	2303      	movs	r3, #3
 8001626:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800163c:	2308      	movs	r3, #8
 800163e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001646:	4619      	mov	r1, r3
 8001648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164c:	f001 fb54 	bl	8002cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001650:	e0c2      	b.n	80017d8 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a64      	ldr	r2, [pc, #400]	; (80017e8 <HAL_UART_MspInit+0x240>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d13b      	bne.n	80016d4 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800165c:	2301      	movs	r3, #1
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001660:	2300      	movs	r3, #0
 8001662:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001664:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001668:	4618      	mov	r0, r3
 800166a:	f003 fabb 	bl	8004be4 <HAL_RCCEx_PeriphCLKConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001674:	f7ff fce6 	bl	8001044 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001678:	4b5a      	ldr	r3, [pc, #360]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 800167a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167c:	4a59      	ldr	r2, [pc, #356]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 800167e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001682:	6613      	str	r3, [r2, #96]	; 0x60
 8001684:	4b57      	ldr	r3, [pc, #348]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 8001686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001690:	4b54      	ldr	r3, [pc, #336]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 8001692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001694:	4a53      	ldr	r2, [pc, #332]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 8001696:	f043 0302 	orr.w	r3, r3, #2
 800169a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169c:	4b51      	ldr	r3, [pc, #324]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 800169e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80016a8:	23c0      	movs	r3, #192	; 0xc0
 80016aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016c0:	2307      	movs	r3, #7
 80016c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016ca:	4619      	mov	r1, r3
 80016cc:	4847      	ldr	r0, [pc, #284]	; (80017ec <HAL_UART_MspInit+0x244>)
 80016ce:	f001 fb13 	bl	8002cf8 <HAL_GPIO_Init>
}
 80016d2:	e081      	b.n	80017d8 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a45      	ldr	r2, [pc, #276]	; (80017f0 <HAL_UART_MspInit+0x248>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d13b      	bne.n	8001756 <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016de:	2302      	movs	r3, #2
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ea:	4618      	mov	r0, r3
 80016ec:	f003 fa7a 	bl	8004be4 <HAL_RCCEx_PeriphCLKConfig>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_UART_MspInit+0x152>
      Error_Handler();
 80016f6:	f7ff fca5 	bl	8001044 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016fa:	4b3a      	ldr	r3, [pc, #232]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	4a39      	ldr	r2, [pc, #228]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	6593      	str	r3, [r2, #88]	; 0x58
 8001706:	4b37      	ldr	r3, [pc, #220]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001712:	4b34      	ldr	r3, [pc, #208]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	4a33      	ldr	r2, [pc, #204]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171e:	4b31      	ldr	r3, [pc, #196]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800172a:	2378      	movs	r3, #120	; 0x78
 800172c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001742:	2307      	movs	r3, #7
 8001744:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001748:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800174c:	4619      	mov	r1, r3
 800174e:	4829      	ldr	r0, [pc, #164]	; (80017f4 <HAL_UART_MspInit+0x24c>)
 8001750:	f001 fad2 	bl	8002cf8 <HAL_GPIO_Init>
}
 8001754:	e040      	b.n	80017d8 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a27      	ldr	r2, [pc, #156]	; (80017f8 <HAL_UART_MspInit+0x250>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d13b      	bne.n	80017d8 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001760:	2304      	movs	r3, #4
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001764:	2300      	movs	r3, #0
 8001766:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001768:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800176c:	4618      	mov	r0, r3
 800176e:	f003 fa39 	bl	8004be4 <HAL_RCCEx_PeriphCLKConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8001778:	f7ff fc64 	bl	8001044 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 800177e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001780:	4a18      	ldr	r2, [pc, #96]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 8001782:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001786:	6593      	str	r3, [r2, #88]	; 0x58
 8001788:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 800178a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 8001796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001798:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 800179a:	f043 0308 	orr.w	r3, r3, #8
 800179e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a0:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <HAL_UART_MspInit+0x23c>)
 80017a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80017ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c0:	2303      	movs	r3, #3
 80017c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017c6:	2307      	movs	r3, #7
 80017c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017cc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017d0:	4619      	mov	r1, r3
 80017d2:	4808      	ldr	r0, [pc, #32]	; (80017f4 <HAL_UART_MspInit+0x24c>)
 80017d4:	f001 fa90 	bl	8002cf8 <HAL_GPIO_Init>
}
 80017d8:	bf00      	nop
 80017da:	37d0      	adds	r7, #208	; 0xd0
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40004c00 	.word	0x40004c00
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40013800 	.word	0x40013800
 80017ec:	48000400 	.word	0x48000400
 80017f0:	40004400 	.word	0x40004400
 80017f4:	48000c00 	.word	0x48000c00
 80017f8:	40004800 	.word	0x40004800

080017fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <NMI_Handler+0x4>

08001802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <HardFault_Handler+0x4>

08001808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <MemManage_Handler+0x4>

0800180e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <BusFault_Handler+0x4>

08001814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <UsageFault_Handler+0x4>

0800181a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001848:	f000 f8d2 	bl	80019f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}

08001850 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	setDataReady();
 8001854:	f7fe fd12 	bl	800027c <setDataReady>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(D7_Pin);
 8001858:	2010      	movs	r0, #16
 800185a:	f001 fbf7 	bl	800304c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}

08001862 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001866:	2020      	movs	r0, #32
 8001868:	f001 fbf0 	bl	800304c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800186c:	2040      	movs	r0, #64	; 0x40
 800186e:	f001 fbed 	bl	800304c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001872:	2080      	movs	r0, #128	; 0x80
 8001874:	f001 fbea 	bl	800304c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001878:	f44f 7080 	mov.w	r0, #256	; 0x100
 800187c:	f001 fbe6 	bl	800304c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}

08001884 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001888:	4802      	ldr	r0, [pc, #8]	; (8001894 <SPI1_IRQHandler+0x10>)
 800188a:	f004 f8d7 	bl	8005a3c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200001cc 	.word	0x200001cc

08001898 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 800189c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018a0:	f001 fbd4 	bl	800304c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80018a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80018a8:	f001 fbd0 	bl	800304c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 80018ac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80018b0:	f001 fbcc 	bl	800304c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80018b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018b8:	f001 fbc8 	bl	800304c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80018bc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80018c0:	f001 fbc4 	bl	800304c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80018c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80018c8:	f001 fbc0 	bl	800304c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <SystemInit+0x20>)
 80018d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018da:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <SystemInit+0x20>)
 80018dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800192c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018f8:	f7ff ffea 	bl	80018d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018fc:	480c      	ldr	r0, [pc, #48]	; (8001930 <LoopForever+0x6>)
  ldr r1, =_edata
 80018fe:	490d      	ldr	r1, [pc, #52]	; (8001934 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001900:	4a0d      	ldr	r2, [pc, #52]	; (8001938 <LoopForever+0xe>)
  movs r3, #0
 8001902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001904:	e002      	b.n	800190c <LoopCopyDataInit>

08001906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190a:	3304      	adds	r3, #4

0800190c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800190c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001910:	d3f9      	bcc.n	8001906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001914:	4c0a      	ldr	r4, [pc, #40]	; (8001940 <LoopForever+0x16>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001918:	e001      	b.n	800191e <LoopFillZerobss>

0800191a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800191c:	3204      	adds	r2, #4

0800191e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001920:	d3fb      	bcc.n	800191a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001922:	f006 fbf1 	bl	8008108 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001926:	f7fe fd39 	bl	800039c <main>

0800192a <LoopForever>:

LoopForever:
    b LoopForever
 800192a:	e7fe      	b.n	800192a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800192c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001934:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001938:	080084c0 	.word	0x080084c0
  ldr r2, =_sbss
 800193c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001940:	2000056c 	.word	0x2000056c

08001944 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001944:	e7fe      	b.n	8001944 <ADC1_IRQHandler>

08001946 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001950:	2003      	movs	r0, #3
 8001952:	f001 f823 	bl	800299c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001956:	2000      	movs	r0, #0
 8001958:	f000 f80e 	bl	8001978 <HAL_InitTick>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d002      	beq.n	8001968 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	71fb      	strb	r3, [r7, #7]
 8001966:	e001      	b.n	800196c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001968:	f7ff fb72 	bl	8001050 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800196c:	79fb      	ldrb	r3, [r7, #7]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001984:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <HAL_InitTick+0x6c>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d023      	beq.n	80019d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800198c:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <HAL_InitTick+0x70>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <HAL_InitTick+0x6c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4619      	mov	r1, r3
 8001996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199a:	fbb3 f3f1 	udiv	r3, r3, r1
 800199e:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f001 f82f 	bl	8002a06 <HAL_SYSTICK_Config>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10f      	bne.n	80019ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d809      	bhi.n	80019c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b4:	2200      	movs	r2, #0
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019bc:	f000 fff9 	bl	80029b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019c0:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <HAL_InitTick+0x74>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	e007      	b.n	80019d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	73fb      	strb	r3, [r7, #15]
 80019cc:	e004      	b.n	80019d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	73fb      	strb	r3, [r7, #15]
 80019d2:	e001      	b.n	80019d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000014 	.word	0x20000014
 80019e8:	2000000c 	.word	0x2000000c
 80019ec:	20000010 	.word	0x20000010

080019f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_IncTick+0x20>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_IncTick+0x24>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4413      	add	r3, r2
 8001a00:	4a04      	ldr	r2, [pc, #16]	; (8001a14 <HAL_IncTick+0x24>)
 8001a02:	6013      	str	r3, [r2, #0]
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000014 	.word	0x20000014
 8001a14:	20000544 	.word	0x20000544

08001a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <HAL_GetTick+0x14>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000544 	.word	0x20000544

08001a30 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	609a      	str	r2, [r3, #8]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b087      	sub	sp, #28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	3360      	adds	r3, #96	; 0x60
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <LL_ADC_SetOffset+0x44>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ad0:	bf00      	nop
 8001ad2:	371c      	adds	r7, #28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	03fff000 	.word	0x03fff000

08001ae0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3360      	adds	r3, #96	; 0x60
 8001aee:	461a      	mov	r2, r3
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	3360      	adds	r3, #96	; 0x60
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	431a      	orrs	r2, r3
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b36:	bf00      	nop
 8001b38:	371c      	adds	r7, #28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	615a      	str	r2, [r3, #20]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	3330      	adds	r3, #48	; 0x30
 8001b78:	461a      	mov	r2, r3
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	4413      	add	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	f003 031f 	and.w	r3, r3, #31
 8001b92:	211f      	movs	r1, #31
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	0e9b      	lsrs	r3, r3, #26
 8001ba0:	f003 011f 	and.w	r1, r3, #31
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bb4:	bf00      	nop
 8001bb6:	371c      	adds	r7, #28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	3314      	adds	r3, #20
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	0e5b      	lsrs	r3, r3, #25
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	4413      	add	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	0d1b      	lsrs	r3, r3, #20
 8001be8:	f003 031f 	and.w	r3, r3, #31
 8001bec:	2107      	movs	r1, #7
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	401a      	ands	r2, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	0d1b      	lsrs	r3, r3, #20
 8001bfa:	f003 031f 	and.w	r3, r3, #31
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	fa01 f303 	lsl.w	r3, r1, r3
 8001c04:	431a      	orrs	r2, r3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c0a:	bf00      	nop
 8001c0c:	371c      	adds	r7, #28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c30:	43db      	mvns	r3, r3
 8001c32:	401a      	ands	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f003 0318 	and.w	r3, r3, #24
 8001c3a:	4908      	ldr	r1, [pc, #32]	; (8001c5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c3c:	40d9      	lsrs	r1, r3
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	400b      	ands	r3, r1
 8001c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c46:	431a      	orrs	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c4e:	bf00      	nop
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	0007ffff 	.word	0x0007ffff

08001c60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001c70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6093      	str	r3, [r2, #8]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c98:	d101      	bne.n	8001c9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001cbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cc0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ce8:	d101      	bne.n	8001cee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d101      	bne.n	8001d14 <LL_ADC_IsEnabled+0x18>
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <LL_ADC_IsEnabled+0x1a>
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d101      	bne.n	8001d3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d101      	bne.n	8001d60 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e12f      	b.n	8001fea <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d109      	bne.n	8001dac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff f97d 	bl	8001098 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff67 	bl	8001c84 <LL_ADC_IsDeepPowerDownEnabled>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d004      	beq.n	8001dc6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff4d 	bl	8001c60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ff82 	bl	8001cd4 <LL_ADC_IsInternalRegulatorEnabled>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d115      	bne.n	8001e02 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ff66 	bl	8001cac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001de0:	4b84      	ldr	r3, [pc, #528]	; (8001ff4 <HAL_ADC_Init+0x284>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	099b      	lsrs	r3, r3, #6
 8001de6:	4a84      	ldr	r2, [pc, #528]	; (8001ff8 <HAL_ADC_Init+0x288>)
 8001de8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dec:	099b      	lsrs	r3, r3, #6
 8001dee:	3301      	adds	r3, #1
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001df4:	e002      	b.n	8001dfc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f9      	bne.n	8001df6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ff64 	bl	8001cd4 <LL_ADC_IsInternalRegulatorEnabled>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10d      	bne.n	8001e2e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e16:	f043 0210 	orr.w	r2, r3, #16
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e22:	f043 0201 	orr.w	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ff75 	bl	8001d22 <LL_ADC_REG_IsConversionOngoing>
 8001e38:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f040 80c8 	bne.w	8001fd8 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f040 80c4 	bne.w	8001fd8 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e54:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e58:	f043 0202 	orr.w	r2, r3, #2
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff49 	bl	8001cfc <LL_ADC_IsEnabled>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10b      	bne.n	8001e88 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e70:	4862      	ldr	r0, [pc, #392]	; (8001ffc <HAL_ADC_Init+0x28c>)
 8001e72:	f7ff ff43 	bl	8001cfc <LL_ADC_IsEnabled>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d105      	bne.n	8001e88 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	4619      	mov	r1, r3
 8001e82:	485f      	ldr	r0, [pc, #380]	; (8002000 <HAL_ADC_Init+0x290>)
 8001e84:	f7ff fdd4 	bl	8001a30 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7e5b      	ldrb	r3, [r3, #25]
 8001e8c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e92:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001e98:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001e9e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d106      	bne.n	8001ec4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	045b      	lsls	r3, r3, #17
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d009      	beq.n	8001ee0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	4b47      	ldr	r3, [pc, #284]	; (8002004 <HAL_ADC_Init+0x294>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	69b9      	ldr	r1, [r7, #24]
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff12 	bl	8001d22 <LL_ADC_REG_IsConversionOngoing>
 8001efe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff1f 	bl	8001d48 <LL_ADC_INJ_IsConversionOngoing>
 8001f0a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d140      	bne.n	8001f94 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d13d      	bne.n	8001f94 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	7e1b      	ldrb	r3, [r3, #24]
 8001f20:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f22:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f2a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f3a:	f023 0306 	bic.w	r3, r3, #6
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	69b9      	ldr	r1, [r7, #24]
 8001f44:	430b      	orrs	r3, r1
 8001f46:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d118      	bne.n	8001f84 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f5c:	f023 0304 	bic.w	r3, r3, #4
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f68:	4311      	orrs	r1, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f6e:	4311      	orrs	r1, r2
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f74:	430a      	orrs	r2, r1
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0201 	orr.w	r2, r2, #1
 8001f80:	611a      	str	r2, [r3, #16]
 8001f82:	e007      	b.n	8001f94 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0201 	bic.w	r2, r2, #1
 8001f92:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d10c      	bne.n	8001fb6 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f023 010f 	bic.w	r1, r3, #15
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	1e5a      	subs	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	631a      	str	r2, [r3, #48]	; 0x30
 8001fb4:	e007      	b.n	8001fc6 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 020f 	bic.w	r2, r2, #15
 8001fc4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	f023 0303 	bic.w	r3, r3, #3
 8001fce:	f043 0201 	orr.w	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	659a      	str	r2, [r3, #88]	; 0x58
 8001fd6:	e007      	b.n	8001fe8 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fdc:	f043 0210 	orr.w	r2, r3, #16
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fe8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3720      	adds	r7, #32
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000000c 	.word	0x2000000c
 8001ff8:	053e2d63 	.word	0x053e2d63
 8001ffc:	50040000 	.word	0x50040000
 8002000:	50040300 	.word	0x50040300
 8002004:	fff0c007 	.word	0xfff0c007

08002008 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b0b6      	sub	sp, #216	; 0xd8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_ADC_ConfigChannel+0x22>
 8002026:	2302      	movs	r3, #2
 8002028:	e3d3      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x7ca>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fe73 	bl	8001d22 <LL_ADC_REG_IsConversionOngoing>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	f040 83b8 	bne.w	80027b4 <HAL_ADC_ConfigChannel+0x7ac>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b05      	cmp	r3, #5
 800204a:	d824      	bhi.n	8002096 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	3b02      	subs	r3, #2
 8002052:	2b03      	cmp	r3, #3
 8002054:	d81b      	bhi.n	800208e <HAL_ADC_ConfigChannel+0x86>
 8002056:	a201      	add	r2, pc, #4	; (adr r2, 800205c <HAL_ADC_ConfigChannel+0x54>)
 8002058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205c:	0800206d 	.word	0x0800206d
 8002060:	08002075 	.word	0x08002075
 8002064:	0800207d 	.word	0x0800207d
 8002068:	08002085 	.word	0x08002085
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	220c      	movs	r2, #12
 8002070:	605a      	str	r2, [r3, #4]
          break;
 8002072:	e010      	b.n	8002096 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	2212      	movs	r2, #18
 8002078:	605a      	str	r2, [r3, #4]
          break;
 800207a:	e00c      	b.n	8002096 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	2218      	movs	r2, #24
 8002080:	605a      	str	r2, [r3, #4]
          break;
 8002082:	e008      	b.n	8002096 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	f44f 7280 	mov.w	r2, #256	; 0x100
 800208a:	605a      	str	r2, [r3, #4]
          break;
 800208c:	e003      	b.n	8002096 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2206      	movs	r2, #6
 8002092:	605a      	str	r2, [r3, #4]
          break;
 8002094:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6818      	ldr	r0, [r3, #0]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6859      	ldr	r1, [r3, #4]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	f7ff fd60 	bl	8001b68 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff fe38 	bl	8001d22 <LL_ADC_REG_IsConversionOngoing>
 80020b2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fe44 	bl	8001d48 <LL_ADC_INJ_IsConversionOngoing>
 80020c0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f040 81c1 	bne.w	8002450 <HAL_ADC_ConfigChannel+0x448>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f040 81bc 	bne.w	8002450 <HAL_ADC_ConfigChannel+0x448>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020e0:	d10f      	bne.n	8002102 <HAL_ADC_ConfigChannel+0xfa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2200      	movs	r2, #0
 80020ec:	4619      	mov	r1, r3
 80020ee:	f7ff fd67 	bl	8001bc0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fd21 	bl	8001b42 <LL_ADC_SetSamplingTimeCommonConfig>
 8002100:	e00e      	b.n	8002120 <HAL_ADC_ConfigChannel+0x118>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6818      	ldr	r0, [r3, #0]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	6819      	ldr	r1, [r3, #0]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	461a      	mov	r2, r3
 8002110:	f7ff fd56 	bl	8001bc0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2100      	movs	r1, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fd11 	bl	8001b42 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	08db      	lsrs	r3, r3, #3
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	2b04      	cmp	r3, #4
 8002140:	d00a      	beq.n	8002158 <HAL_ADC_ConfigChannel+0x150>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	6919      	ldr	r1, [r3, #16]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002152:	f7ff fca1 	bl	8001a98 <LL_ADC_SetOffset>
 8002156:	e17b      	b.n	8002450 <HAL_ADC_ConfigChannel+0x448>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fcbe 	bl	8001ae0 <LL_ADC_GetOffsetChannel>
 8002164:	4603      	mov	r3, r0
 8002166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10a      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x17c>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fcb3 	bl	8001ae0 <LL_ADC_GetOffsetChannel>
 800217a:	4603      	mov	r3, r0
 800217c:	0e9b      	lsrs	r3, r3, #26
 800217e:	f003 021f 	and.w	r2, r3, #31
 8002182:	e01e      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x1ba>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fca8 	bl	8001ae0 <LL_ADC_GetOffsetChannel>
 8002190:	4603      	mov	r3, r0
 8002192:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x1ae>
  {
    return 32U;
 80021b2:	2320      	movs	r3, #32
 80021b4:	e004      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x1b8>
  }
  return __builtin_clz(value);
 80021b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d105      	bne.n	80021da <HAL_ADC_ConfigChannel+0x1d2>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	0e9b      	lsrs	r3, r3, #26
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	e018      	b.n	800220c <HAL_ADC_ConfigChannel+0x204>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80021ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80021f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 80021fe:	2320      	movs	r3, #32
 8002200:	e004      	b.n	800220c <HAL_ADC_ConfigChannel+0x204>
  return __builtin_clz(value);
 8002202:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800220c:	429a      	cmp	r2, r3
 800220e:	d106      	bne.n	800221e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2200      	movs	r2, #0
 8002216:	2100      	movs	r1, #0
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fc77 	bl	8001b0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2101      	movs	r1, #1
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fc5b 	bl	8001ae0 <LL_ADC_GetOffsetChannel>
 800222a:	4603      	mov	r3, r0
 800222c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10a      	bne.n	800224a <HAL_ADC_ConfigChannel+0x242>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2101      	movs	r1, #1
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff fc50 	bl	8001ae0 <LL_ADC_GetOffsetChannel>
 8002240:	4603      	mov	r3, r0
 8002242:	0e9b      	lsrs	r3, r3, #26
 8002244:	f003 021f 	and.w	r2, r3, #31
 8002248:	e01e      	b.n	8002288 <HAL_ADC_ConfigChannel+0x280>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2101      	movs	r1, #1
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fc45 	bl	8001ae0 <LL_ADC_GetOffsetChannel>
 8002256:	4603      	mov	r3, r0
 8002258:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002268:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800226c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002270:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_ADC_ConfigChannel+0x274>
    return 32U;
 8002278:	2320      	movs	r3, #32
 800227a:	e004      	b.n	8002286 <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 800227c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002290:	2b00      	cmp	r3, #0
 8002292:	d105      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x298>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	0e9b      	lsrs	r3, r3, #26
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	e018      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x2ca>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80022b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80022bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 80022c4:	2320      	movs	r3, #32
 80022c6:	e004      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 80022c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d106      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2200      	movs	r2, #0
 80022dc:	2101      	movs	r1, #1
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fc14 	bl	8001b0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2102      	movs	r1, #2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fbf8 	bl	8001ae0 <LL_ADC_GetOffsetChannel>
 80022f0:	4603      	mov	r3, r0
 80022f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10a      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x308>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2102      	movs	r1, #2
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fbed 	bl	8001ae0 <LL_ADC_GetOffsetChannel>
 8002306:	4603      	mov	r3, r0
 8002308:	0e9b      	lsrs	r3, r3, #26
 800230a:	f003 021f 	and.w	r2, r3, #31
 800230e:	e01e      	b.n	800234e <HAL_ADC_ConfigChannel+0x346>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2102      	movs	r1, #2
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fbe2 	bl	8001ae0 <LL_ADC_GetOffsetChannel>
 800231c:	4603      	mov	r3, r0
 800231e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800232e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002336:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 800233e:	2320      	movs	r3, #32
 8002340:	e004      	b.n	800234c <HAL_ADC_ConfigChannel+0x344>
  return __builtin_clz(value);
 8002342:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x35e>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	0e9b      	lsrs	r3, r3, #26
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	e016      	b.n	8002394 <HAL_ADC_ConfigChannel+0x38c>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002378:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800237a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800237e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_ADC_ConfigChannel+0x382>
    return 32U;
 8002386:	2320      	movs	r3, #32
 8002388:	e004      	b.n	8002394 <HAL_ADC_ConfigChannel+0x38c>
  return __builtin_clz(value);
 800238a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002394:	429a      	cmp	r2, r3
 8002396:	d106      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x39e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2200      	movs	r2, #0
 800239e:	2102      	movs	r1, #2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fbb3 	bl	8001b0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2103      	movs	r1, #3
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fb97 	bl	8001ae0 <LL_ADC_GetOffsetChannel>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10a      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x3ca>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2103      	movs	r1, #3
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fb8c 	bl	8001ae0 <LL_ADC_GetOffsetChannel>
 80023c8:	4603      	mov	r3, r0
 80023ca:	0e9b      	lsrs	r3, r3, #26
 80023cc:	f003 021f 	and.w	r2, r3, #31
 80023d0:	e017      	b.n	8002402 <HAL_ADC_ConfigChannel+0x3fa>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2103      	movs	r1, #3
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fb81 	bl	8001ae0 <LL_ADC_GetOffsetChannel>
 80023de:	4603      	mov	r3, r0
 80023e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023e4:	fa93 f3a3 	rbit	r3, r3
 80023e8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80023ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023ec:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80023ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x3f0>
    return 32U;
 80023f4:	2320      	movs	r3, #32
 80023f6:	e003      	b.n	8002400 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 80023f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240a:	2b00      	cmp	r3, #0
 800240c:	d105      	bne.n	800241a <HAL_ADC_ConfigChannel+0x412>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	0e9b      	lsrs	r3, r3, #26
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	e011      	b.n	800243e <HAL_ADC_ConfigChannel+0x436>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800242a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800242c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x42e>
    return 32U;
 8002432:	2320      	movs	r3, #32
 8002434:	e003      	b.n	800243e <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8002436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800243e:	429a      	cmp	r2, r3
 8002440:	d106      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x448>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2200      	movs	r2, #0
 8002448:	2103      	movs	r1, #3
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fb5e 	bl	8001b0c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fc51 	bl	8001cfc <LL_ADC_IsEnabled>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	f040 813f 	bne.w	80026e0 <HAL_ADC_ConfigChannel+0x6d8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6819      	ldr	r1, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	461a      	mov	r2, r3
 8002470:	f7ff fbd2 	bl	8001c18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4a8e      	ldr	r2, [pc, #568]	; (80026b4 <HAL_ADC_ConfigChannel+0x6ac>)
 800247a:	4293      	cmp	r3, r2
 800247c:	f040 8130 	bne.w	80026e0 <HAL_ADC_ConfigChannel+0x6d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10b      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x4a0>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	0e9b      	lsrs	r3, r3, #26
 8002496:	3301      	adds	r3, #1
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	2b09      	cmp	r3, #9
 800249e:	bf94      	ite	ls
 80024a0:	2301      	movls	r3, #1
 80024a2:	2300      	movhi	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	e019      	b.n	80024dc <HAL_ADC_ConfigChannel+0x4d4>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80024b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024b8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80024ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x4bc>
    return 32U;
 80024c0:	2320      	movs	r3, #32
 80024c2:	e003      	b.n	80024cc <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 80024c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024c6:	fab3 f383 	clz	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	3301      	adds	r3, #1
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	2b09      	cmp	r3, #9
 80024d4:	bf94      	ite	ls
 80024d6:	2301      	movls	r3, #1
 80024d8:	2300      	movhi	r3, #0
 80024da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d079      	beq.n	80025d4 <HAL_ADC_ConfigChannel+0x5cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d107      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x4f4>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	0e9b      	lsrs	r3, r3, #26
 80024f2:	3301      	adds	r3, #1
 80024f4:	069b      	lsls	r3, r3, #26
 80024f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024fa:	e015      	b.n	8002528 <HAL_ADC_ConfigChannel+0x520>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800250a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800250c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800250e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x510>
    return 32U;
 8002514:	2320      	movs	r3, #32
 8002516:	e003      	b.n	8002520 <HAL_ADC_ConfigChannel+0x518>
  return __builtin_clz(value);
 8002518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	3301      	adds	r3, #1
 8002522:	069b      	lsls	r3, r3, #26
 8002524:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002530:	2b00      	cmp	r3, #0
 8002532:	d109      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x540>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	0e9b      	lsrs	r3, r3, #26
 800253a:	3301      	adds	r3, #1
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	2101      	movs	r1, #1
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	e017      	b.n	8002578 <HAL_ADC_ConfigChannel+0x570>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002558:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800255a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x55c>
    return 32U;
 8002560:	2320      	movs	r3, #32
 8002562:	e003      	b.n	800256c <HAL_ADC_ConfigChannel+0x564>
  return __builtin_clz(value);
 8002564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	3301      	adds	r3, #1
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	2101      	movs	r1, #1
 8002574:	fa01 f303 	lsl.w	r3, r1, r3
 8002578:	ea42 0103 	orr.w	r1, r2, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <HAL_ADC_ConfigChannel+0x596>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	0e9b      	lsrs	r3, r3, #26
 800258e:	3301      	adds	r3, #1
 8002590:	f003 021f 	and.w	r2, r3, #31
 8002594:	4613      	mov	r3, r2
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	4413      	add	r3, r2
 800259a:	051b      	lsls	r3, r3, #20
 800259c:	e018      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x5c8>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80025b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80025b6:	2320      	movs	r3, #32
 80025b8:	e003      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80025ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025bc:	fab3 f383 	clz	r3, r3
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	4613      	mov	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4413      	add	r3, r2
 80025ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025d0:	430b      	orrs	r3, r1
 80025d2:	e080      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x6ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d107      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x5e8>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	3301      	adds	r3, #1
 80025e8:	069b      	lsls	r3, r3, #26
 80025ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025ee:	e015      	b.n	800261c <HAL_ADC_ConfigChannel+0x614>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80025fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002600:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_ADC_ConfigChannel+0x604>
    return 32U;
 8002608:	2320      	movs	r3, #32
 800260a:	e003      	b.n	8002614 <HAL_ADC_ConfigChannel+0x60c>
  return __builtin_clz(value);
 800260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260e:	fab3 f383 	clz	r3, r3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	3301      	adds	r3, #1
 8002616:	069b      	lsls	r3, r3, #26
 8002618:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002624:	2b00      	cmp	r3, #0
 8002626:	d109      	bne.n	800263c <HAL_ADC_ConfigChannel+0x634>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	0e9b      	lsrs	r3, r3, #26
 800262e:	3301      	adds	r3, #1
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	2101      	movs	r1, #1
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	e017      	b.n	800266c <HAL_ADC_ConfigChannel+0x664>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	61fb      	str	r3, [r7, #28]
  return result;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x650>
    return 32U;
 8002654:	2320      	movs	r3, #32
 8002656:	e003      	b.n	8002660 <HAL_ADC_ConfigChannel+0x658>
  return __builtin_clz(value);
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	3301      	adds	r3, #1
 8002662:	f003 031f 	and.w	r3, r3, #31
 8002666:	2101      	movs	r1, #1
 8002668:	fa01 f303 	lsl.w	r3, r1, r3
 800266c:	ea42 0103 	orr.w	r1, r2, r3
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10d      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x690>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0e9b      	lsrs	r3, r3, #26
 8002682:	3301      	adds	r3, #1
 8002684:	f003 021f 	and.w	r2, r3, #31
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	3b1e      	subs	r3, #30
 8002690:	051b      	lsls	r3, r3, #20
 8002692:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002696:	e01d      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x6cc>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	fa93 f3a3 	rbit	r3, r3
 80026a4:	613b      	str	r3, [r7, #16]
  return result;
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d103      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x6b0>
    return 32U;
 80026b0:	2320      	movs	r3, #32
 80026b2:	e005      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x6b8>
 80026b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	3301      	adds	r3, #1
 80026c2:	f003 021f 	and.w	r2, r3, #31
 80026c6:	4613      	mov	r3, r2
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	4413      	add	r3, r2
 80026cc:	3b1e      	subs	r3, #30
 80026ce:	051b      	lsls	r3, r3, #20
 80026d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026d4:	430b      	orrs	r3, r1
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	6892      	ldr	r2, [r2, #8]
 80026da:	4619      	mov	r1, r3
 80026dc:	f7ff fa70 	bl	8001bc0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b3d      	ldr	r3, [pc, #244]	; (80027dc <HAL_ADC_ConfigChannel+0x7d4>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d06c      	beq.n	80027c6 <HAL_ADC_ConfigChannel+0x7be>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026ec:	483c      	ldr	r0, [pc, #240]	; (80027e0 <HAL_ADC_ConfigChannel+0x7d8>)
 80026ee:	f7ff f9c5 	bl	8001a7c <LL_ADC_GetCommonPathInternalCh>
 80026f2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a3a      	ldr	r2, [pc, #232]	; (80027e4 <HAL_ADC_ConfigChannel+0x7dc>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d127      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x748>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002700:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002704:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d121      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x748>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a35      	ldr	r2, [pc, #212]	; (80027e8 <HAL_ADC_ConfigChannel+0x7e0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d157      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002716:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800271a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800271e:	4619      	mov	r1, r3
 8002720:	482f      	ldr	r0, [pc, #188]	; (80027e0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002722:	f7ff f998 	bl	8001a56 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002726:	4b31      	ldr	r3, [pc, #196]	; (80027ec <HAL_ADC_ConfigChannel+0x7e4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	099b      	lsrs	r3, r3, #6
 800272c:	4a30      	ldr	r2, [pc, #192]	; (80027f0 <HAL_ADC_ConfigChannel+0x7e8>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	099b      	lsrs	r3, r3, #6
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002740:	e002      	b.n	8002748 <HAL_ADC_ConfigChannel+0x740>
          {
            wait_loop_index--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	3b01      	subs	r3, #1
 8002746:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f9      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x73a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800274e:	e03a      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x7be>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a27      	ldr	r2, [pc, #156]	; (80027f4 <HAL_ADC_ConfigChannel+0x7ec>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d113      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x77a>
 800275a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800275e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10d      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x77a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a1f      	ldr	r2, [pc, #124]	; (80027e8 <HAL_ADC_ConfigChannel+0x7e0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d12a      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002770:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002774:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002778:	4619      	mov	r1, r3
 800277a:	4819      	ldr	r0, [pc, #100]	; (80027e0 <HAL_ADC_ConfigChannel+0x7d8>)
 800277c:	f7ff f96b 	bl	8001a56 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002780:	e021      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x7be>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a1c      	ldr	r2, [pc, #112]	; (80027f8 <HAL_ADC_ConfigChannel+0x7f0>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d11c      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x7be>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800278c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002790:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d116      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x7be>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a12      	ldr	r2, [pc, #72]	; (80027e8 <HAL_ADC_ConfigChannel+0x7e0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d111      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027aa:	4619      	mov	r1, r3
 80027ac:	480c      	ldr	r0, [pc, #48]	; (80027e0 <HAL_ADC_ConfigChannel+0x7d8>)
 80027ae:	f7ff f952 	bl	8001a56 <LL_ADC_SetCommonPathInternalCh>
 80027b2:	e008      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x7be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b8:	f043 0220 	orr.w	r2, r3, #32
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80027ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	37d8      	adds	r7, #216	; 0xd8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	80080000 	.word	0x80080000
 80027e0:	50040300 	.word	0x50040300
 80027e4:	c7520000 	.word	0xc7520000
 80027e8:	50040000 	.word	0x50040000
 80027ec:	2000000c 	.word	0x2000000c
 80027f0:	053e2d63 	.word	0x053e2d63
 80027f4:	cb840000 	.word	0xcb840000
 80027f8:	80000001 	.word	0x80000001

080027fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002818:	4013      	ands	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800282c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282e:	4a04      	ldr	r2, [pc, #16]	; (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	60d3      	str	r3, [r2, #12]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002848:	4b04      	ldr	r3, [pc, #16]	; (800285c <__NVIC_GetPriorityGrouping+0x18>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	f003 0307 	and.w	r3, r3, #7
}
 8002852:	4618      	mov	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	2b00      	cmp	r3, #0
 8002870:	db0b      	blt.n	800288a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	f003 021f 	and.w	r2, r3, #31
 8002878:	4907      	ldr	r1, [pc, #28]	; (8002898 <__NVIC_EnableIRQ+0x38>)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	2001      	movs	r0, #1
 8002882:	fa00 f202 	lsl.w	r2, r0, r2
 8002886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	e000e100 	.word	0xe000e100

0800289c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	6039      	str	r1, [r7, #0]
 80028a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	db0a      	blt.n	80028c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	490c      	ldr	r1, [pc, #48]	; (80028e8 <__NVIC_SetPriority+0x4c>)
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	0112      	lsls	r2, r2, #4
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	440b      	add	r3, r1
 80028c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c4:	e00a      	b.n	80028dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	4908      	ldr	r1, [pc, #32]	; (80028ec <__NVIC_SetPriority+0x50>)
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	3b04      	subs	r3, #4
 80028d4:	0112      	lsls	r2, r2, #4
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	440b      	add	r3, r1
 80028da:	761a      	strb	r2, [r3, #24]
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000e100 	.word	0xe000e100
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b089      	sub	sp, #36	; 0x24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f1c3 0307 	rsb	r3, r3, #7
 800290a:	2b04      	cmp	r3, #4
 800290c:	bf28      	it	cs
 800290e:	2304      	movcs	r3, #4
 8002910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3304      	adds	r3, #4
 8002916:	2b06      	cmp	r3, #6
 8002918:	d902      	bls.n	8002920 <NVIC_EncodePriority+0x30>
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3b03      	subs	r3, #3
 800291e:	e000      	b.n	8002922 <NVIC_EncodePriority+0x32>
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43da      	mvns	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	401a      	ands	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002938:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	fa01 f303 	lsl.w	r3, r1, r3
 8002942:	43d9      	mvns	r1, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002948:	4313      	orrs	r3, r2
         );
}
 800294a:	4618      	mov	r0, r3
 800294c:	3724      	adds	r7, #36	; 0x24
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3b01      	subs	r3, #1
 8002964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002968:	d301      	bcc.n	800296e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800296a:	2301      	movs	r3, #1
 800296c:	e00f      	b.n	800298e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800296e:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <SysTick_Config+0x40>)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3b01      	subs	r3, #1
 8002974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002976:	210f      	movs	r1, #15
 8002978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800297c:	f7ff ff8e 	bl	800289c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <SysTick_Config+0x40>)
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002986:	4b04      	ldr	r3, [pc, #16]	; (8002998 <SysTick_Config+0x40>)
 8002988:	2207      	movs	r2, #7
 800298a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	e000e010 	.word	0xe000e010

0800299c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff ff29 	bl	80027fc <__NVIC_SetPriorityGrouping>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b086      	sub	sp, #24
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	4603      	mov	r3, r0
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029c4:	f7ff ff3e 	bl	8002844 <__NVIC_GetPriorityGrouping>
 80029c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	6978      	ldr	r0, [r7, #20]
 80029d0:	f7ff ff8e 	bl	80028f0 <NVIC_EncodePriority>
 80029d4:	4602      	mov	r2, r0
 80029d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff ff5d 	bl	800289c <__NVIC_SetPriority>
}
 80029e2:	bf00      	nop
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4603      	mov	r3, r0
 80029f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff31 	bl	8002860 <__NVIC_EnableIRQ>
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff ffa2 	bl	8002958 <SysTick_Config>
 8002a14:	4603      	mov	r3, r0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e0ac      	b.n	8002b8c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 f8b2 	bl	8002ba0 <DFSDM_GetChannelFromInstance>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	4a55      	ldr	r2, [pc, #340]	; (8002b94 <HAL_DFSDM_ChannelInit+0x174>)
 8002a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e09f      	b.n	8002b8c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7fe fb63 	bl	8001118 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002a52:	4b51      	ldr	r3, [pc, #324]	; (8002b98 <HAL_DFSDM_ChannelInit+0x178>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	3301      	adds	r3, #1
 8002a58:	4a4f      	ldr	r2, [pc, #316]	; (8002b98 <HAL_DFSDM_ChannelInit+0x178>)
 8002a5a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002a5c:	4b4e      	ldr	r3, [pc, #312]	; (8002b98 <HAL_DFSDM_ChannelInit+0x178>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d125      	bne.n	8002ab0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002a64:	4b4d      	ldr	r3, [pc, #308]	; (8002b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a4c      	ldr	r2, [pc, #304]	; (8002b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8002a6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a6e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002a70:	4b4a      	ldr	r3, [pc, #296]	; (8002b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	4948      	ldr	r1, [pc, #288]	; (8002b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002a7e:	4b47      	ldr	r3, [pc, #284]	; (8002b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a46      	ldr	r2, [pc, #280]	; (8002b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8002a84:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002a88:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	791b      	ldrb	r3, [r3, #4]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d108      	bne.n	8002aa4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002a92:	4b42      	ldr	r3, [pc, #264]	; (8002b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	041b      	lsls	r3, r3, #16
 8002a9e:	493f      	ldr	r1, [pc, #252]	; (8002b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002aa4:	4b3d      	ldr	r3, [pc, #244]	; (8002b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a3c      	ldr	r2, [pc, #240]	; (8002b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8002aaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002aae:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002abe:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6819      	ldr	r1, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002ace:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002ad4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 020f 	bic.w	r2, r2, #15
 8002aec:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6819      	ldr	r1, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002b14:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6899      	ldr	r1, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b24:	3b01      	subs	r3, #1
 8002b26:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f002 0207 	and.w	r2, r2, #7
 8002b40:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6859      	ldr	r1, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b6c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f810 	bl	8002ba0 <DFSDM_GetChannelFromInstance>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4904      	ldr	r1, [pc, #16]	; (8002b94 <HAL_DFSDM_ChannelInit+0x174>)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	2000054c 	.word	0x2000054c
 8002b98:	20000548 	.word	0x20000548
 8002b9c:	40016000 	.word	0x40016000

08002ba0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a1c      	ldr	r2, [pc, #112]	; (8002c1c <DFSDM_GetChannelFromInstance+0x7c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d102      	bne.n	8002bb6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	e02b      	b.n	8002c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a19      	ldr	r2, [pc, #100]	; (8002c20 <DFSDM_GetChannelFromInstance+0x80>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d102      	bne.n	8002bc4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	e024      	b.n	8002c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <DFSDM_GetChannelFromInstance+0x84>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d102      	bne.n	8002bd2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	e01d      	b.n	8002c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a14      	ldr	r2, [pc, #80]	; (8002c28 <DFSDM_GetChannelFromInstance+0x88>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d102      	bne.n	8002be0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002bda:	2304      	movs	r3, #4
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	e016      	b.n	8002c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a12      	ldr	r2, [pc, #72]	; (8002c2c <DFSDM_GetChannelFromInstance+0x8c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d102      	bne.n	8002bee <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002be8:	2305      	movs	r3, #5
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	e00f      	b.n	8002c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a0f      	ldr	r2, [pc, #60]	; (8002c30 <DFSDM_GetChannelFromInstance+0x90>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d102      	bne.n	8002bfc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002bf6:	2306      	movs	r3, #6
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	e008      	b.n	8002c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a0d      	ldr	r2, [pc, #52]	; (8002c34 <DFSDM_GetChannelFromInstance+0x94>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d102      	bne.n	8002c0a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002c04:	2307      	movs	r3, #7
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	e001      	b.n	8002c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	40016000 	.word	0x40016000
 8002c20:	40016020 	.word	0x40016020
 8002c24:	40016040 	.word	0x40016040
 8002c28:	40016080 	.word	0x40016080
 8002c2c:	400160a0 	.word	0x400160a0
 8002c30:	400160c0 	.word	0x400160c0
 8002c34:	400160e0 	.word	0x400160e0

08002c38 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d005      	beq.n	8002c5c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2204      	movs	r2, #4
 8002c54:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	73fb      	strb	r3, [r7, #15]
 8002c5a:	e047      	b.n	8002cec <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 020e 	bic.w	r2, r2, #14
 8002c6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	f003 021c 	and.w	r2, r3, #28
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	2101      	movs	r1, #1
 8002c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ca8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00c      	beq.n	8002ccc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cc0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002cca:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	4798      	blx	r3
    }
  }
  return status;
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d06:	e166      	b.n	8002fd6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	fa01 f303 	lsl.w	r3, r1, r3
 8002d14:	4013      	ands	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 8158 	beq.w	8002fd0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d005      	beq.n	8002d38 <HAL_GPIO_Init+0x40>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d130      	bne.n	8002d9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	2203      	movs	r2, #3
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d6e:	2201      	movs	r2, #1
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	091b      	lsrs	r3, r3, #4
 8002d84:	f003 0201 	and.w	r2, r3, #1
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d017      	beq.n	8002dd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	2203      	movs	r2, #3
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d123      	bne.n	8002e2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	08da      	lsrs	r2, r3, #3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3208      	adds	r2, #8
 8002dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	220f      	movs	r2, #15
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4013      	ands	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	08da      	lsrs	r2, r3, #3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3208      	adds	r2, #8
 8002e24:	6939      	ldr	r1, [r7, #16]
 8002e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	2203      	movs	r2, #3
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 0203 	and.w	r2, r3, #3
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 80b2 	beq.w	8002fd0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e6c:	4b61      	ldr	r3, [pc, #388]	; (8002ff4 <HAL_GPIO_Init+0x2fc>)
 8002e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e70:	4a60      	ldr	r2, [pc, #384]	; (8002ff4 <HAL_GPIO_Init+0x2fc>)
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	6613      	str	r3, [r2, #96]	; 0x60
 8002e78:	4b5e      	ldr	r3, [pc, #376]	; (8002ff4 <HAL_GPIO_Init+0x2fc>)
 8002e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e84:	4a5c      	ldr	r2, [pc, #368]	; (8002ff8 <HAL_GPIO_Init+0x300>)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	089b      	lsrs	r3, r3, #2
 8002e8a:	3302      	adds	r3, #2
 8002e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	220f      	movs	r2, #15
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002eae:	d02b      	beq.n	8002f08 <HAL_GPIO_Init+0x210>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a52      	ldr	r2, [pc, #328]	; (8002ffc <HAL_GPIO_Init+0x304>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d025      	beq.n	8002f04 <HAL_GPIO_Init+0x20c>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a51      	ldr	r2, [pc, #324]	; (8003000 <HAL_GPIO_Init+0x308>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d01f      	beq.n	8002f00 <HAL_GPIO_Init+0x208>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a50      	ldr	r2, [pc, #320]	; (8003004 <HAL_GPIO_Init+0x30c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d019      	beq.n	8002efc <HAL_GPIO_Init+0x204>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a4f      	ldr	r2, [pc, #316]	; (8003008 <HAL_GPIO_Init+0x310>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d013      	beq.n	8002ef8 <HAL_GPIO_Init+0x200>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a4e      	ldr	r2, [pc, #312]	; (800300c <HAL_GPIO_Init+0x314>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00d      	beq.n	8002ef4 <HAL_GPIO_Init+0x1fc>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a4d      	ldr	r2, [pc, #308]	; (8003010 <HAL_GPIO_Init+0x318>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d007      	beq.n	8002ef0 <HAL_GPIO_Init+0x1f8>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a4c      	ldr	r2, [pc, #304]	; (8003014 <HAL_GPIO_Init+0x31c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d101      	bne.n	8002eec <HAL_GPIO_Init+0x1f4>
 8002ee8:	2307      	movs	r3, #7
 8002eea:	e00e      	b.n	8002f0a <HAL_GPIO_Init+0x212>
 8002eec:	2308      	movs	r3, #8
 8002eee:	e00c      	b.n	8002f0a <HAL_GPIO_Init+0x212>
 8002ef0:	2306      	movs	r3, #6
 8002ef2:	e00a      	b.n	8002f0a <HAL_GPIO_Init+0x212>
 8002ef4:	2305      	movs	r3, #5
 8002ef6:	e008      	b.n	8002f0a <HAL_GPIO_Init+0x212>
 8002ef8:	2304      	movs	r3, #4
 8002efa:	e006      	b.n	8002f0a <HAL_GPIO_Init+0x212>
 8002efc:	2303      	movs	r3, #3
 8002efe:	e004      	b.n	8002f0a <HAL_GPIO_Init+0x212>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e002      	b.n	8002f0a <HAL_GPIO_Init+0x212>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_GPIO_Init+0x212>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	f002 0203 	and.w	r2, r2, #3
 8002f10:	0092      	lsls	r2, r2, #2
 8002f12:	4093      	lsls	r3, r2
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f1a:	4937      	ldr	r1, [pc, #220]	; (8002ff8 <HAL_GPIO_Init+0x300>)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	089b      	lsrs	r3, r3, #2
 8002f20:	3302      	adds	r3, #2
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f28:	4b3b      	ldr	r3, [pc, #236]	; (8003018 <HAL_GPIO_Init+0x320>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4013      	ands	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f4c:	4a32      	ldr	r2, [pc, #200]	; (8003018 <HAL_GPIO_Init+0x320>)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f52:	4b31      	ldr	r3, [pc, #196]	; (8003018 <HAL_GPIO_Init+0x320>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f76:	4a28      	ldr	r2, [pc, #160]	; (8003018 <HAL_GPIO_Init+0x320>)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f7c:	4b26      	ldr	r3, [pc, #152]	; (8003018 <HAL_GPIO_Init+0x320>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fa0:	4a1d      	ldr	r2, [pc, #116]	; (8003018 <HAL_GPIO_Init+0x320>)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002fa6:	4b1c      	ldr	r3, [pc, #112]	; (8003018 <HAL_GPIO_Init+0x320>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fca:	4a13      	ldr	r2, [pc, #76]	; (8003018 <HAL_GPIO_Init+0x320>)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f47f ae91 	bne.w	8002d08 <HAL_GPIO_Init+0x10>
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	bf00      	nop
 8002fea:	371c      	adds	r7, #28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40010000 	.word	0x40010000
 8002ffc:	48000400 	.word	0x48000400
 8003000:	48000800 	.word	0x48000800
 8003004:	48000c00 	.word	0x48000c00
 8003008:	48001000 	.word	0x48001000
 800300c:	48001400 	.word	0x48001400
 8003010:	48001800 	.word	0x48001800
 8003014:	48001c00 	.word	0x48001c00
 8003018:	40010400 	.word	0x40010400

0800301c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	807b      	strh	r3, [r7, #2]
 8003028:	4613      	mov	r3, r2
 800302a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800302c:	787b      	ldrb	r3, [r7, #1]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003032:	887a      	ldrh	r2, [r7, #2]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003038:	e002      	b.n	8003040 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800303a:	887a      	ldrh	r2, [r7, #2]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003056:	4b08      	ldr	r3, [pc, #32]	; (8003078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003058:	695a      	ldr	r2, [r3, #20]
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	4013      	ands	r3, r2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d006      	beq.n	8003070 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003062:	4a05      	ldr	r2, [pc, #20]	; (8003078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003064:	88fb      	ldrh	r3, [r7, #6]
 8003066:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	4618      	mov	r0, r3
 800306c:	f000 f806 	bl	800307c <HAL_GPIO_EXTI_Callback>
  }
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40010400 	.word	0x40010400

0800307c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e081      	b.n	80031a8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d106      	bne.n	80030be <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7fe f891 	bl	80011e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2224      	movs	r2, #36	; 0x24
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0201 	bic.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d107      	bne.n	800310c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003108:	609a      	str	r2, [r3, #8]
 800310a:	e006      	b.n	800311a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003118:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d104      	bne.n	800312c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800312a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800313a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800313e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800314e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69d9      	ldr	r1, [r3, #28]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1a      	ldr	r2, [r3, #32]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 0201 	orr.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	d138      	bne.n	8003238 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e032      	b.n	800323a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2224      	movs	r2, #36	; 0x24
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0201 	bic.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003202:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6819      	ldr	r1, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	e000      	b.n	800323a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003238:	2302      	movs	r3, #2
  }
}
 800323a:	4618      	mov	r0, r3
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003246:	b480      	push	{r7}
 8003248:	b085      	sub	sp, #20
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b20      	cmp	r3, #32
 800325a:	d139      	bne.n	80032d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003266:	2302      	movs	r3, #2
 8003268:	e033      	b.n	80032d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2224      	movs	r2, #36	; 0x24
 8003276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0201 	bic.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003298:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	021b      	lsls	r3, r3, #8
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	e000      	b.n	80032d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032d0:	2302      	movs	r3, #2
  }
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
	...

080032e0 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80032ec:	f7fe fb94 	bl	8001a18 <HAL_GetTick>
 80032f0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d102      	bne.n	80032fe <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
 80032fc:	e092      	b.n	8003424 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003308:	2b00      	cmp	r3, #0
 800330a:	f040 808b 	bne.w	8003424 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fe f808 	bl	8001324 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003314:	f241 3188 	movw	r1, #5000	; 0x1388
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f88b 	bl	8003434 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	4b42      	ldr	r3, [pc, #264]	; (8003430 <HAL_OSPI_Init+0x150>)
 8003326:	4013      	ands	r3, r2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	68d1      	ldr	r1, [r2, #12]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6912      	ldr	r2, [r2, #16]
 8003330:	3a01      	subs	r2, #1
 8003332:	0412      	lsls	r2, r2, #16
 8003334:	4311      	orrs	r1, r2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6952      	ldr	r2, [r2, #20]
 800333a:	3a01      	subs	r2, #1
 800333c:	0212      	lsls	r2, r2, #8
 800333e:	4311      	orrs	r1, r2
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003344:	4311      	orrs	r1, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	69d2      	ldr	r2, [r2, #28]
 800334a:	4311      	orrs	r1, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6812      	ldr	r2, [r2, #0]
 8003350:	430b      	orrs	r3, r1
 8003352:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	0412      	lsls	r2, r2, #16
 800335e:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	3b01      	subs	r3, #1
 8003370:	021a      	lsls	r2, r3, #8
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2200      	movs	r2, #0
 8003384:	2120      	movs	r1, #32
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 fb98 	bl	8003abc <OSPI_WaitFlagStateUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003390:	7bfb      	ldrb	r3, [r7, #15]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d146      	bne.n	8003424 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	1e5a      	subs	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80033cc:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d107      	bne.n	800340c <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0202 	orr.w	r2, r2, #2
 800340a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003414:	d103      	bne.n	800341e <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	645a      	str	r2, [r3, #68]	; 0x44
 800341c:	e002      	b.n	8003424 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2202      	movs	r2, #2
 8003422:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003424:	7bfb      	ldrb	r3, [r7, #15]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	f8e0f8f4 	.word	0xf8e0f8f4

08003434 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
	...

08003454 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b092      	sub	sp, #72	; 0x48
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a08      	ldr	r2, [pc, #32]	; (8003494 <HAL_OSPIM_Config+0x40>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d105      	bne.n	8003482 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 800347a:	2301      	movs	r3, #1
 800347c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003480:	e004      	b.n	800348c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003482:	2301      	movs	r3, #1
 8003484:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800348c:	2300      	movs	r3, #0
 800348e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003492:	e01f      	b.n	80034d4 <HAL_OSPIM_Config+0x80>
 8003494:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8003498:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800349c:	3301      	adds	r3, #1
 800349e:	b2d8      	uxtb	r0, r3
 80034a0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80034a4:	f107 0114 	add.w	r1, r7, #20
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	4619      	mov	r1, r3
 80034b4:	f000 fb3a 	bl	8003b2c <OSPIM_GetConfig>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2208      	movs	r2, #8
 80034c8:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80034ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80034ce:	3301      	adds	r3, #1
 80034d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80034d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d9dd      	bls.n	8003498 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80034dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f040 82de 	bne.w	8003aa2 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80034e6:	4bc6      	ldr	r3, [pc, #792]	; (8003800 <HAL_OSPIM_Config+0x3ac>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80034f2:	4bc3      	ldr	r3, [pc, #780]	; (8003800 <HAL_OSPIM_Config+0x3ac>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4ac2      	ldr	r2, [pc, #776]	; (8003800 <HAL_OSPIM_Config+0x3ac>)
 80034f8:	f023 0301 	bic.w	r3, r3, #1
 80034fc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80034fe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003502:	f043 0301 	orr.w	r3, r3, #1
 8003506:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800350a:	4bbe      	ldr	r3, [pc, #760]	; (8003804 <HAL_OSPIM_Config+0x3b0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00b      	beq.n	800352e <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003516:	4bbb      	ldr	r3, [pc, #748]	; (8003804 <HAL_OSPIM_Config+0x3b0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4aba      	ldr	r2, [pc, #744]	; (8003804 <HAL_OSPIM_Config+0x3b0>)
 800351c:	f023 0301 	bic.w	r3, r3, #1
 8003520:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003522:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003526:	f043 0302 	orr.w	r3, r3, #2
 800352a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800352e:	49b6      	ldr	r1, [pc, #728]	; (8003808 <HAL_OSPIM_Config+0x3b4>)
 8003530:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	3348      	adds	r3, #72	; 0x48
 800353c:	443b      	add	r3, r7
 800353e:	3b2c      	subs	r3, #44	; 0x2c
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3b01      	subs	r3, #1
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	6859      	ldr	r1, [r3, #4]
 800354a:	48af      	ldr	r0, [pc, #700]	; (8003808 <HAL_OSPIM_Config+0x3b4>)
 800354c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	3348      	adds	r3, #72	; 0x48
 8003558:	443b      	add	r3, r7
 800355a:	3b2c      	subs	r3, #44	; 0x2c
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3b01      	subs	r3, #1
 8003560:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4403      	add	r3, r0
 8003568:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 800356a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	3348      	adds	r3, #72	; 0x48
 8003576:	443b      	add	r3, r7
 8003578:	3b34      	subs	r3, #52	; 0x34
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 80a1 	beq.w	80036c4 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003582:	49a1      	ldr	r1, [pc, #644]	; (8003808 <HAL_OSPIM_Config+0x3b4>)
 8003584:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	3348      	adds	r3, #72	; 0x48
 8003590:	443b      	add	r3, r7
 8003592:	3b34      	subs	r3, #52	; 0x34
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3b01      	subs	r3, #1
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	6859      	ldr	r1, [r3, #4]
 800359e:	489a      	ldr	r0, [pc, #616]	; (8003808 <HAL_OSPIM_Config+0x3b4>)
 80035a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	3348      	adds	r3, #72	; 0x48
 80035ac:	443b      	add	r3, r7
 80035ae:	3b34      	subs	r3, #52	; 0x34
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	f021 0201 	bic.w	r2, r1, #1
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4403      	add	r3, r0
 80035bc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80035be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	3348      	adds	r3, #72	; 0x48
 80035ca:	443b      	add	r3, r7
 80035cc:	3b30      	subs	r3, #48	; 0x30
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d01d      	beq.n	8003610 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80035d4:	498c      	ldr	r1, [pc, #560]	; (8003808 <HAL_OSPIM_Config+0x3b4>)
 80035d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	3348      	adds	r3, #72	; 0x48
 80035e2:	443b      	add	r3, r7
 80035e4:	3b30      	subs	r3, #48	; 0x30
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	6859      	ldr	r1, [r3, #4]
 80035f0:	4885      	ldr	r0, [pc, #532]	; (8003808 <HAL_OSPIM_Config+0x3b4>)
 80035f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	3348      	adds	r3, #72	; 0x48
 80035fe:	443b      	add	r3, r7
 8003600:	3b30      	subs	r3, #48	; 0x30
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3b01      	subs	r3, #1
 8003606:	f021 0210 	bic.w	r2, r1, #16
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4403      	add	r3, r0
 800360e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003610:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	3348      	adds	r3, #72	; 0x48
 800361c:	443b      	add	r3, r7
 800361e:	3b28      	subs	r3, #40	; 0x28
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d021      	beq.n	800366a <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003626:	4978      	ldr	r1, [pc, #480]	; (8003808 <HAL_OSPIM_Config+0x3b4>)
 8003628:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	3348      	adds	r3, #72	; 0x48
 8003634:	443b      	add	r3, r7
 8003636:	3b28      	subs	r3, #40	; 0x28
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3b01      	subs	r3, #1
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	6859      	ldr	r1, [r3, #4]
 8003646:	4870      	ldr	r0, [pc, #448]	; (8003808 <HAL_OSPIM_Config+0x3b4>)
 8003648:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	3348      	adds	r3, #72	; 0x48
 8003654:	443b      	add	r3, r7
 8003656:	3b28      	subs	r3, #40	; 0x28
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3b01      	subs	r3, #1
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4403      	add	r3, r0
 8003668:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800366a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	3348      	adds	r3, #72	; 0x48
 8003676:	443b      	add	r3, r7
 8003678:	3b24      	subs	r3, #36	; 0x24
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d021      	beq.n	80036c4 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003680:	4961      	ldr	r1, [pc, #388]	; (8003808 <HAL_OSPIM_Config+0x3b4>)
 8003682:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	3348      	adds	r3, #72	; 0x48
 800368e:	443b      	add	r3, r7
 8003690:	3b24      	subs	r3, #36	; 0x24
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3b01      	subs	r3, #1
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	6859      	ldr	r1, [r3, #4]
 80036a0:	4859      	ldr	r0, [pc, #356]	; (8003808 <HAL_OSPIM_Config+0x3b4>)
 80036a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	3348      	adds	r3, #72	; 0x48
 80036ae:	443b      	add	r3, r7
 80036b0:	3b24      	subs	r3, #36	; 0x24
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3b01      	subs	r3, #1
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4403      	add	r3, r0
 80036c2:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	6819      	ldr	r1, [r3, #0]
 80036c8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	3348      	adds	r3, #72	; 0x48
 80036d6:	443b      	add	r3, r7
 80036d8:	3b34      	subs	r3, #52	; 0x34
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4299      	cmp	r1, r3
 80036de:	d038      	beq.n	8003752 <HAL_OSPIM_Config+0x2fe>
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	6859      	ldr	r1, [r3, #4]
 80036e4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	3348      	adds	r3, #72	; 0x48
 80036f2:	443b      	add	r3, r7
 80036f4:	3b30      	subs	r3, #48	; 0x30
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4299      	cmp	r1, r3
 80036fa:	d02a      	beq.n	8003752 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	6899      	ldr	r1, [r3, #8]
 8003700:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	3348      	adds	r3, #72	; 0x48
 800370e:	443b      	add	r3, r7
 8003710:	3b2c      	subs	r3, #44	; 0x2c
 8003712:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003714:	4299      	cmp	r1, r3
 8003716:	d01c      	beq.n	8003752 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	68d9      	ldr	r1, [r3, #12]
 800371c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	3348      	adds	r3, #72	; 0x48
 800372a:	443b      	add	r3, r7
 800372c:	3b28      	subs	r3, #40	; 0x28
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4299      	cmp	r1, r3
 8003732:	d00e      	beq.n	8003752 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	6919      	ldr	r1, [r3, #16]
 8003738:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	3348      	adds	r3, #72	; 0x48
 8003746:	443b      	add	r3, r7
 8003748:	3b24      	subs	r3, #36	; 0x24
 800374a:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800374c:	4299      	cmp	r1, r3
 800374e:	f040 80d3 	bne.w	80038f8 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003752:	492d      	ldr	r1, [pc, #180]	; (8003808 <HAL_OSPIM_Config+0x3b4>)
 8003754:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	3348      	adds	r3, #72	; 0x48
 8003762:	443b      	add	r3, r7
 8003764:	3b34      	subs	r3, #52	; 0x34
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3b01      	subs	r3, #1
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	6859      	ldr	r1, [r3, #4]
 8003770:	4825      	ldr	r0, [pc, #148]	; (8003808 <HAL_OSPIM_Config+0x3b4>)
 8003772:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	3348      	adds	r3, #72	; 0x48
 8003780:	443b      	add	r3, r7
 8003782:	3b34      	subs	r3, #52	; 0x34
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3b01      	subs	r3, #1
 8003788:	f021 0201 	bic.w	r2, r1, #1
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4403      	add	r3, r0
 8003790:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003792:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	3348      	adds	r3, #72	; 0x48
 80037a0:	443b      	add	r3, r7
 80037a2:	3b30      	subs	r3, #48	; 0x30
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d01f      	beq.n	80037ea <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80037aa:	4917      	ldr	r1, [pc, #92]	; (8003808 <HAL_OSPIM_Config+0x3b4>)
 80037ac:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	3348      	adds	r3, #72	; 0x48
 80037ba:	443b      	add	r3, r7
 80037bc:	3b30      	subs	r3, #48	; 0x30
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	6859      	ldr	r1, [r3, #4]
 80037c8:	480f      	ldr	r0, [pc, #60]	; (8003808 <HAL_OSPIM_Config+0x3b4>)
 80037ca:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037ce:	4613      	mov	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	3348      	adds	r3, #72	; 0x48
 80037d8:	443b      	add	r3, r7
 80037da:	3b30      	subs	r3, #48	; 0x30
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	3b01      	subs	r3, #1
 80037e0:	f021 0210 	bic.w	r2, r1, #16
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4403      	add	r3, r0
 80037e8:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80037ea:	4907      	ldr	r1, [pc, #28]	; (8003808 <HAL_OSPIM_Config+0x3b4>)
 80037ec:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	3348      	adds	r3, #72	; 0x48
 80037fa:	443b      	add	r3, r7
 80037fc:	3b2c      	subs	r3, #44	; 0x2c
 80037fe:	e005      	b.n	800380c <HAL_OSPIM_Config+0x3b8>
 8003800:	a0001000 	.word	0xa0001000
 8003804:	a0001400 	.word	0xa0001400
 8003808:	50061c00 	.word	0x50061c00
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3b01      	subs	r3, #1
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	6859      	ldr	r1, [r3, #4]
 8003816:	48a6      	ldr	r0, [pc, #664]	; (8003ab0 <HAL_OSPIM_Config+0x65c>)
 8003818:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	3348      	adds	r3, #72	; 0x48
 8003826:	443b      	add	r3, r7
 8003828:	3b2c      	subs	r3, #44	; 0x2c
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3b01      	subs	r3, #1
 800382e:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4403      	add	r3, r0
 8003836:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003838:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	3348      	adds	r3, #72	; 0x48
 8003846:	443b      	add	r3, r7
 8003848:	3b28      	subs	r3, #40	; 0x28
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d023      	beq.n	8003898 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003850:	4997      	ldr	r1, [pc, #604]	; (8003ab0 <HAL_OSPIM_Config+0x65c>)
 8003852:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	3348      	adds	r3, #72	; 0x48
 8003860:	443b      	add	r3, r7
 8003862:	3b28      	subs	r3, #40	; 0x28
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3b01      	subs	r3, #1
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	6859      	ldr	r1, [r3, #4]
 8003872:	488f      	ldr	r0, [pc, #572]	; (8003ab0 <HAL_OSPIM_Config+0x65c>)
 8003874:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	3348      	adds	r3, #72	; 0x48
 8003882:	443b      	add	r3, r7
 8003884:	3b28      	subs	r3, #40	; 0x28
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3b01      	subs	r3, #1
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4403      	add	r3, r0
 8003896:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003898:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	3348      	adds	r3, #72	; 0x48
 80038a6:	443b      	add	r3, r7
 80038a8:	3b24      	subs	r3, #36	; 0x24
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d023      	beq.n	80038f8 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80038b0:	497f      	ldr	r1, [pc, #508]	; (8003ab0 <HAL_OSPIM_Config+0x65c>)
 80038b2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	3348      	adds	r3, #72	; 0x48
 80038c0:	443b      	add	r3, r7
 80038c2:	3b24      	subs	r3, #36	; 0x24
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	6859      	ldr	r1, [r3, #4]
 80038d2:	4877      	ldr	r0, [pc, #476]	; (8003ab0 <HAL_OSPIM_Config+0x65c>)
 80038d4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	3348      	adds	r3, #72	; 0x48
 80038e2:	443b      	add	r3, r7
 80038e4:	3b24      	subs	r3, #36	; 0x24
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3b01      	subs	r3, #1
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4403      	add	r3, r0
 80038f6:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80038f8:	4a6d      	ldr	r2, [pc, #436]	; (8003ab0 <HAL_OSPIM_Config+0x65c>)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	3b01      	subs	r3, #1
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800390a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800390c:	025b      	lsls	r3, r3, #9
 800390e:	431a      	orrs	r2, r3
 8003910:	4967      	ldr	r1, [pc, #412]	; (8003ab0 <HAL_OSPIM_Config+0x65c>)
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	3b01      	subs	r3, #1
 8003918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003922:	4a63      	ldr	r2, [pc, #396]	; (8003ab0 <HAL_OSPIM_Config+0x65c>)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3b01      	subs	r3, #1
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f023 0203 	bic.w	r2, r3, #3
 8003934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	431a      	orrs	r2, r3
 800393a:	495d      	ldr	r1, [pc, #372]	; (8003ab0 <HAL_OSPIM_Config+0x65c>)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3b01      	subs	r3, #1
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d014      	beq.n	800397e <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003954:	4a56      	ldr	r2, [pc, #344]	; (8003ab0 <HAL_OSPIM_Config+0x65c>)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	3b01      	subs	r3, #1
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003968:	015b      	lsls	r3, r3, #5
 800396a:	431a      	orrs	r2, r3
 800396c:	4950      	ldr	r1, [pc, #320]	; (8003ab0 <HAL_OSPIM_Config+0x65c>)
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	3b01      	subs	r3, #1
 8003974:	f042 0210 	orr.w	r2, r2, #16
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d019      	beq.n	80039be <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800398a:	4a49      	ldr	r2, [pc, #292]	; (8003ab0 <HAL_OSPIM_Config+0x65c>)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	3b01      	subs	r3, #1
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80039a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039a2:	049b      	lsls	r3, r3, #18
 80039a4:	431a      	orrs	r2, r3
 80039a6:	4942      	ldr	r1, [pc, #264]	; (8003ab0 <HAL_OSPIM_Config+0x65c>)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	605a      	str	r2, [r3, #4]
 80039bc:	e01c      	b.n	80039f8 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d018      	beq.n	80039f8 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80039c6:	4a3a      	ldr	r2, [pc, #232]	; (8003ab0 <HAL_OSPIM_Config+0x65c>)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80039dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039de:	069b      	lsls	r3, r3, #26
 80039e0:	431a      	orrs	r2, r3
 80039e2:	4933      	ldr	r1, [pc, #204]	; (8003ab0 <HAL_OSPIM_Config+0x65c>)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d019      	beq.n	8003a38 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003a04:	4a2a      	ldr	r2, [pc, #168]	; (8003ab0 <HAL_OSPIM_Config+0x65c>)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a1c:	049b      	lsls	r3, r3, #18
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	4923      	ldr	r1, [pc, #140]	; (8003ab0 <HAL_OSPIM_Config+0x65c>)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	e01c      	b.n	8003a72 <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d018      	beq.n	8003a72 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003a40:	4a1b      	ldr	r2, [pc, #108]	; (8003ab0 <HAL_OSPIM_Config+0x65c>)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a58:	069b      	lsls	r3, r3, #26
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	4914      	ldr	r1, [pc, #80]	; (8003ab0 <HAL_OSPIM_Config+0x65c>)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003a72:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d005      	beq.n	8003a8a <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003a7e:	4b0d      	ldr	r3, [pc, #52]	; (8003ab4 <HAL_OSPIM_Config+0x660>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a0c      	ldr	r2, [pc, #48]	; (8003ab4 <HAL_OSPIM_Config+0x660>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003a8a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d005      	beq.n	8003aa2 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003a96:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <HAL_OSPIM_Config+0x664>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a07      	ldr	r2, [pc, #28]	; (8003ab8 <HAL_OSPIM_Config+0x664>)
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003aa2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3748      	adds	r7, #72	; 0x48
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	50061c00 	.word	0x50061c00
 8003ab4:	a0001000 	.word	0xa0001000
 8003ab8:	a0001400 	.word	0xa0001400

08003abc <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003acc:	e01a      	b.n	8003b04 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ad4:	d016      	beq.n	8003b04 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad6:	f7fd ff9f 	bl	8001a18 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d302      	bcc.n	8003aec <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10b      	bne.n	8003b04 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003af2:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af8:	f043 0201 	orr.w	r2, r3, #1
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e00e      	b.n	8003b22 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6a1a      	ldr	r2, [r3, #32]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	bf14      	ite	ne
 8003b12:	2301      	movne	r3, #1
 8003b14:	2300      	moveq	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d1d6      	bne.n	8003ace <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	6039      	str	r1, [r7, #0]
 8003b36:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003b40:	79fb      	ldrb	r3, [r7, #7]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <OSPIM_GetConfig+0x26>
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d802      	bhi.n	8003b52 <OSPIM_GetConfig+0x26>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d102      	bne.n	8003b58 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	75fb      	strb	r3, [r7, #23]
 8003b56:	e08e      	b.n	8003c76 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2200      	movs	r2, #0
 8003b62:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2200      	movs	r2, #0
 8003b68:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2200      	movs	r2, #0
 8003b74:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003b76:	79fb      	ldrb	r3, [r7, #7]
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d101      	bne.n	8003b80 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003b7c:	4b41      	ldr	r3, [pc, #260]	; (8003c84 <OSPIM_GetConfig+0x158>)
 8003b7e:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	e074      	b.n	8003c70 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8003b86:	4a40      	ldr	r2, [pc, #256]	; (8003c88 <OSPIM_GetConfig+0x15c>)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00a      	beq.n	8003bb2 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4053      	eors	r3, r2
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d103      	bne.n	8003bb2 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4053      	eors	r3, r2
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d103      	bne.n	8003bd2 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4053      	eors	r3, r2
 8003be2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d103      	bne.n	8003bf2 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d018      	beq.n	8003c2e <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4053      	eors	r3, r2
 8003c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d111      	bne.n	8003c2e <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d106      	bne.n	8003c22 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	3301      	adds	r3, #1
 8003c18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	60da      	str	r2, [r3, #12]
 8003c20:	e005      	b.n	8003c2e <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	3301      	adds	r3, #1
 8003c26:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d018      	beq.n	8003c6a <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	4053      	eors	r3, r2
 8003c3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d111      	bne.n	8003c6a <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d106      	bne.n	8003c5e <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	3301      	adds	r3, #1
 8003c54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	611a      	str	r2, [r3, #16]
 8003c5c:	e005      	b.n	8003c6a <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	3301      	adds	r3, #1
 8003c62:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d987      	bls.n	8003b86 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8003c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	371c      	adds	r7, #28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	04040222 	.word	0x04040222
 8003c88:	50061c00 	.word	0x50061c00

08003c8c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c90:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a04      	ldr	r2, [pc, #16]	; (8003ca8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c9a:	6013      	str	r3, [r2, #0]
}
 8003c9c:	bf00      	nop
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40007000 	.word	0x40007000

08003cac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cb0:	4b0d      	ldr	r3, [pc, #52]	; (8003ce8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cbc:	d102      	bne.n	8003cc4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cc2:	e00b      	b.n	8003cdc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003cc4:	4b08      	ldr	r3, [pc, #32]	; (8003ce8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd2:	d102      	bne.n	8003cda <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cd8:	e000      	b.n	8003cdc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003cda:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40007000 	.word	0x40007000

08003cec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d141      	bne.n	8003d7e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cfa:	4b4b      	ldr	r3, [pc, #300]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d06:	d131      	bne.n	8003d6c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d08:	4b47      	ldr	r3, [pc, #284]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d0e:	4a46      	ldr	r2, [pc, #280]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d18:	4b43      	ldr	r3, [pc, #268]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d20:	4a41      	ldr	r2, [pc, #260]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d28:	4b40      	ldr	r3, [pc, #256]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2232      	movs	r2, #50	; 0x32
 8003d2e:	fb02 f303 	mul.w	r3, r2, r3
 8003d32:	4a3f      	ldr	r2, [pc, #252]	; (8003e30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d34:	fba2 2303 	umull	r2, r3, r2, r3
 8003d38:	0c9b      	lsrs	r3, r3, #18
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d3e:	e002      	b.n	8003d46 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d46:	4b38      	ldr	r3, [pc, #224]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d52:	d102      	bne.n	8003d5a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f2      	bne.n	8003d40 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d5a:	4b33      	ldr	r3, [pc, #204]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d66:	d158      	bne.n	8003e1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e057      	b.n	8003e1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d6c:	4b2e      	ldr	r3, [pc, #184]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d72:	4a2d      	ldr	r2, [pc, #180]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d7c:	e04d      	b.n	8003e1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d84:	d141      	bne.n	8003e0a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d86:	4b28      	ldr	r3, [pc, #160]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d92:	d131      	bne.n	8003df8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d94:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d9a:	4a23      	ldr	r2, [pc, #140]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003da4:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dac:	4a1e      	ldr	r2, [pc, #120]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003db2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003db4:	4b1d      	ldr	r3, [pc, #116]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2232      	movs	r2, #50	; 0x32
 8003dba:	fb02 f303 	mul.w	r3, r2, r3
 8003dbe:	4a1c      	ldr	r2, [pc, #112]	; (8003e30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc4:	0c9b      	lsrs	r3, r3, #18
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dca:	e002      	b.n	8003dd2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd2:	4b15      	ldr	r3, [pc, #84]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dde:	d102      	bne.n	8003de6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f2      	bne.n	8003dcc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003de6:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df2:	d112      	bne.n	8003e1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e011      	b.n	8003e1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003df8:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dfe:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e08:	e007      	b.n	8003e1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e0a:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e12:	4a05      	ldr	r2, [pc, #20]	; (8003e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e18:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	40007000 	.word	0x40007000
 8003e2c:	2000000c 	.word	0x2000000c
 8003e30:	431bde83 	.word	0x431bde83

08003e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d102      	bne.n	8003e48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f000 bc08 	b.w	8004658 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e48:	4b96      	ldr	r3, [pc, #600]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 030c 	and.w	r3, r3, #12
 8003e50:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e52:	4b94      	ldr	r3, [pc, #592]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80e4 	beq.w	8004032 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d007      	beq.n	8003e80 <HAL_RCC_OscConfig+0x4c>
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b0c      	cmp	r3, #12
 8003e74:	f040 808b 	bne.w	8003f8e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	f040 8087 	bne.w	8003f8e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e80:	4b88      	ldr	r3, [pc, #544]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_RCC_OscConfig+0x64>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e3df      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1a      	ldr	r2, [r3, #32]
 8003e9c:	4b81      	ldr	r3, [pc, #516]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0308 	and.w	r3, r3, #8
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d004      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x7e>
 8003ea8:	4b7e      	ldr	r3, [pc, #504]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb0:	e005      	b.n	8003ebe <HAL_RCC_OscConfig+0x8a>
 8003eb2:	4b7c      	ldr	r3, [pc, #496]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb8:	091b      	lsrs	r3, r3, #4
 8003eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d223      	bcs.n	8003f0a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fdcc 	bl	8004a64 <RCC_SetFlashLatencyFromMSIRange>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e3c0      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ed6:	4b73      	ldr	r3, [pc, #460]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a72      	ldr	r2, [pc, #456]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003edc:	f043 0308 	orr.w	r3, r3, #8
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	4b70      	ldr	r3, [pc, #448]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	496d      	ldr	r1, [pc, #436]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ef4:	4b6b      	ldr	r3, [pc, #428]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	4968      	ldr	r1, [pc, #416]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	604b      	str	r3, [r1, #4]
 8003f08:	e025      	b.n	8003f56 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f0a:	4b66      	ldr	r3, [pc, #408]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a65      	ldr	r2, [pc, #404]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f10:	f043 0308 	orr.w	r3, r3, #8
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	4b63      	ldr	r3, [pc, #396]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	4960      	ldr	r1, [pc, #384]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f28:	4b5e      	ldr	r3, [pc, #376]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	021b      	lsls	r3, r3, #8
 8003f36:	495b      	ldr	r1, [pc, #364]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fd8c 	bl	8004a64 <RCC_SetFlashLatencyFromMSIRange>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e380      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f56:	f000 fcc1 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	4b51      	ldr	r3, [pc, #324]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	091b      	lsrs	r3, r3, #4
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	4950      	ldr	r1, [pc, #320]	; (80040a8 <HAL_RCC_OscConfig+0x274>)
 8003f68:	5ccb      	ldrb	r3, [r1, r3]
 8003f6a:	f003 031f 	and.w	r3, r3, #31
 8003f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f72:	4a4e      	ldr	r2, [pc, #312]	; (80040ac <HAL_RCC_OscConfig+0x278>)
 8003f74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f76:	4b4e      	ldr	r3, [pc, #312]	; (80040b0 <HAL_RCC_OscConfig+0x27c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fd fcfc 	bl	8001978 <HAL_InitTick>
 8003f80:	4603      	mov	r3, r0
 8003f82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d052      	beq.n	8004030 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	e364      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d032      	beq.n	8003ffc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f96:	4b43      	ldr	r3, [pc, #268]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a42      	ldr	r2, [pc, #264]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003f9c:	f043 0301 	orr.w	r3, r3, #1
 8003fa0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fa2:	f7fd fd39 	bl	8001a18 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003faa:	f7fd fd35 	bl	8001a18 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e34d      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fbc:	4b39      	ldr	r3, [pc, #228]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fc8:	4b36      	ldr	r3, [pc, #216]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a35      	ldr	r2, [pc, #212]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003fce:	f043 0308 	orr.w	r3, r3, #8
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	4b33      	ldr	r3, [pc, #204]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	4930      	ldr	r1, [pc, #192]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fe6:	4b2f      	ldr	r3, [pc, #188]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	492b      	ldr	r1, [pc, #172]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	604b      	str	r3, [r1, #4]
 8003ffa:	e01a      	b.n	8004032 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ffc:	4b29      	ldr	r3, [pc, #164]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a28      	ldr	r2, [pc, #160]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8004002:	f023 0301 	bic.w	r3, r3, #1
 8004006:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004008:	f7fd fd06 	bl	8001a18 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004010:	f7fd fd02 	bl	8001a18 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e31a      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004022:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x1dc>
 800402e:	e000      	b.n	8004032 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004030:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d073      	beq.n	8004126 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2b08      	cmp	r3, #8
 8004042:	d005      	beq.n	8004050 <HAL_RCC_OscConfig+0x21c>
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b0c      	cmp	r3, #12
 8004048:	d10e      	bne.n	8004068 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2b03      	cmp	r3, #3
 800404e:	d10b      	bne.n	8004068 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004050:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d063      	beq.n	8004124 <HAL_RCC_OscConfig+0x2f0>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d15f      	bne.n	8004124 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e2f7      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004070:	d106      	bne.n	8004080 <HAL_RCC_OscConfig+0x24c>
 8004072:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a0b      	ldr	r2, [pc, #44]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8004078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	e025      	b.n	80040cc <HAL_RCC_OscConfig+0x298>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004088:	d114      	bne.n	80040b4 <HAL_RCC_OscConfig+0x280>
 800408a:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a05      	ldr	r2, [pc, #20]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8004090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	4b03      	ldr	r3, [pc, #12]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a02      	ldr	r2, [pc, #8]	; (80040a4 <HAL_RCC_OscConfig+0x270>)
 800409c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	e013      	b.n	80040cc <HAL_RCC_OscConfig+0x298>
 80040a4:	40021000 	.word	0x40021000
 80040a8:	08008440 	.word	0x08008440
 80040ac:	2000000c 	.word	0x2000000c
 80040b0:	20000010 	.word	0x20000010
 80040b4:	4ba0      	ldr	r3, [pc, #640]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a9f      	ldr	r2, [pc, #636]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80040ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	4b9d      	ldr	r3, [pc, #628]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a9c      	ldr	r2, [pc, #624]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80040c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d013      	beq.n	80040fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fd fca0 	bl	8001a18 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040dc:	f7fd fc9c 	bl	8001a18 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b64      	cmp	r3, #100	; 0x64
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e2b4      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ee:	4b92      	ldr	r3, [pc, #584]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0x2a8>
 80040fa:	e014      	b.n	8004126 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fc:	f7fd fc8c 	bl	8001a18 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004104:	f7fd fc88 	bl	8001a18 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b64      	cmp	r3, #100	; 0x64
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e2a0      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004116:	4b88      	ldr	r3, [pc, #544]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x2d0>
 8004122:	e000      	b.n	8004126 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d060      	beq.n	80041f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	2b04      	cmp	r3, #4
 8004136:	d005      	beq.n	8004144 <HAL_RCC_OscConfig+0x310>
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	2b0c      	cmp	r3, #12
 800413c:	d119      	bne.n	8004172 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b02      	cmp	r3, #2
 8004142:	d116      	bne.n	8004172 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004144:	4b7c      	ldr	r3, [pc, #496]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_RCC_OscConfig+0x328>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e27d      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800415c:	4b76      	ldr	r3, [pc, #472]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	061b      	lsls	r3, r3, #24
 800416a:	4973      	ldr	r1, [pc, #460]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800416c:	4313      	orrs	r3, r2
 800416e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004170:	e040      	b.n	80041f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d023      	beq.n	80041c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800417a:	4b6f      	ldr	r3, [pc, #444]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a6e      	ldr	r2, [pc, #440]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004186:	f7fd fc47 	bl	8001a18 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800418e:	f7fd fc43 	bl	8001a18 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e25b      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041a0:	4b65      	ldr	r3, [pc, #404]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ac:	4b62      	ldr	r3, [pc, #392]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	061b      	lsls	r3, r3, #24
 80041ba:	495f      	ldr	r1, [pc, #380]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	604b      	str	r3, [r1, #4]
 80041c0:	e018      	b.n	80041f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c2:	4b5d      	ldr	r3, [pc, #372]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a5c      	ldr	r2, [pc, #368]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80041c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ce:	f7fd fc23 	bl	8001a18 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d6:	f7fd fc1f 	bl	8001a18 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e237      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041e8:	4b53      	ldr	r3, [pc, #332]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f0      	bne.n	80041d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d03c      	beq.n	800427a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01c      	beq.n	8004242 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004208:	4b4b      	ldr	r3, [pc, #300]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800420a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800420e:	4a4a      	ldr	r2, [pc, #296]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004218:	f7fd fbfe 	bl	8001a18 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004220:	f7fd fbfa 	bl	8001a18 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e212      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004232:	4b41      	ldr	r3, [pc, #260]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0ef      	beq.n	8004220 <HAL_RCC_OscConfig+0x3ec>
 8004240:	e01b      	b.n	800427a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004242:	4b3d      	ldr	r3, [pc, #244]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004248:	4a3b      	ldr	r2, [pc, #236]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800424a:	f023 0301 	bic.w	r3, r3, #1
 800424e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004252:	f7fd fbe1 	bl	8001a18 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800425a:	f7fd fbdd 	bl	8001a18 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e1f5      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800426c:	4b32      	ldr	r3, [pc, #200]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800426e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1ef      	bne.n	800425a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80a6 	beq.w	80043d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004288:	2300      	movs	r3, #0
 800428a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800428c:	4b2a      	ldr	r3, [pc, #168]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800428e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10d      	bne.n	80042b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004298:	4b27      	ldr	r3, [pc, #156]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800429a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429c:	4a26      	ldr	r2, [pc, #152]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800429e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a2:	6593      	str	r3, [r2, #88]	; 0x58
 80042a4:	4b24      	ldr	r3, [pc, #144]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80042a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042b0:	2301      	movs	r3, #1
 80042b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b4:	4b21      	ldr	r3, [pc, #132]	; (800433c <HAL_RCC_OscConfig+0x508>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d118      	bne.n	80042f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042c0:	4b1e      	ldr	r3, [pc, #120]	; (800433c <HAL_RCC_OscConfig+0x508>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1d      	ldr	r2, [pc, #116]	; (800433c <HAL_RCC_OscConfig+0x508>)
 80042c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042cc:	f7fd fba4 	bl	8001a18 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d4:	f7fd fba0 	bl	8001a18 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e1b8      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e6:	4b15      	ldr	r3, [pc, #84]	; (800433c <HAL_RCC_OscConfig+0x508>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0f0      	beq.n	80042d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d108      	bne.n	800430c <HAL_RCC_OscConfig+0x4d8>
 80042fa:	4b0f      	ldr	r3, [pc, #60]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 80042fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004300:	4a0d      	ldr	r2, [pc, #52]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800430a:	e029      	b.n	8004360 <HAL_RCC_OscConfig+0x52c>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b05      	cmp	r3, #5
 8004312:	d115      	bne.n	8004340 <HAL_RCC_OscConfig+0x50c>
 8004314:	4b08      	ldr	r3, [pc, #32]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431a:	4a07      	ldr	r2, [pc, #28]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800431c:	f043 0304 	orr.w	r3, r3, #4
 8004320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004324:	4b04      	ldr	r3, [pc, #16]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432a:	4a03      	ldr	r2, [pc, #12]	; (8004338 <HAL_RCC_OscConfig+0x504>)
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004334:	e014      	b.n	8004360 <HAL_RCC_OscConfig+0x52c>
 8004336:	bf00      	nop
 8004338:	40021000 	.word	0x40021000
 800433c:	40007000 	.word	0x40007000
 8004340:	4b9d      	ldr	r3, [pc, #628]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	4a9c      	ldr	r2, [pc, #624]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 8004348:	f023 0301 	bic.w	r3, r3, #1
 800434c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004350:	4b99      	ldr	r3, [pc, #612]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004356:	4a98      	ldr	r2, [pc, #608]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 8004358:	f023 0304 	bic.w	r3, r3, #4
 800435c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d016      	beq.n	8004396 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004368:	f7fd fb56 	bl	8001a18 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800436e:	e00a      	b.n	8004386 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004370:	f7fd fb52 	bl	8001a18 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	f241 3288 	movw	r2, #5000	; 0x1388
 800437e:	4293      	cmp	r3, r2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e168      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004386:	4b8c      	ldr	r3, [pc, #560]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 8004388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0ed      	beq.n	8004370 <HAL_RCC_OscConfig+0x53c>
 8004394:	e015      	b.n	80043c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004396:	f7fd fb3f 	bl	8001a18 <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800439c:	e00a      	b.n	80043b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800439e:	f7fd fb3b 	bl	8001a18 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e151      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043b4:	4b80      	ldr	r3, [pc, #512]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1ed      	bne.n	800439e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043c2:	7ffb      	ldrb	r3, [r7, #31]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d105      	bne.n	80043d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c8:	4b7b      	ldr	r3, [pc, #492]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 80043ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043cc:	4a7a      	ldr	r2, [pc, #488]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 80043ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d03c      	beq.n	800445a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d01c      	beq.n	8004422 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043e8:	4b73      	ldr	r3, [pc, #460]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 80043ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043ee:	4a72      	ldr	r2, [pc, #456]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f8:	f7fd fb0e 	bl	8001a18 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004400:	f7fd fb0a 	bl	8001a18 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e122      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004412:	4b69      	ldr	r3, [pc, #420]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 8004414:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0ef      	beq.n	8004400 <HAL_RCC_OscConfig+0x5cc>
 8004420:	e01b      	b.n	800445a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004422:	4b65      	ldr	r3, [pc, #404]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 8004424:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004428:	4a63      	ldr	r2, [pc, #396]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 800442a:	f023 0301 	bic.w	r3, r3, #1
 800442e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004432:	f7fd faf1 	bl	8001a18 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800443a:	f7fd faed 	bl	8001a18 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e105      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800444c:	4b5a      	ldr	r3, [pc, #360]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 800444e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1ef      	bne.n	800443a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 80f9 	beq.w	8004656 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	2b02      	cmp	r3, #2
 800446a:	f040 80cf 	bne.w	800460c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800446e:	4b52      	ldr	r3, [pc, #328]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f003 0203 	and.w	r2, r3, #3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	429a      	cmp	r2, r3
 8004480:	d12c      	bne.n	80044dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	3b01      	subs	r3, #1
 800448e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004490:	429a      	cmp	r2, r3
 8004492:	d123      	bne.n	80044dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d11b      	bne.n	80044dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d113      	bne.n	80044dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	085b      	lsrs	r3, r3, #1
 80044c0:	3b01      	subs	r3, #1
 80044c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d109      	bne.n	80044dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	085b      	lsrs	r3, r3, #1
 80044d4:	3b01      	subs	r3, #1
 80044d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044d8:	429a      	cmp	r2, r3
 80044da:	d071      	beq.n	80045c0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b0c      	cmp	r3, #12
 80044e0:	d068      	beq.n	80045b4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044e2:	4b35      	ldr	r3, [pc, #212]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d105      	bne.n	80044fa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80044ee:	4b32      	ldr	r3, [pc, #200]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e0ac      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044fe:	4b2e      	ldr	r3, [pc, #184]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a2d      	ldr	r2, [pc, #180]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 8004504:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004508:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800450a:	f7fd fa85 	bl	8001a18 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004512:	f7fd fa81 	bl	8001a18 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e099      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004524:	4b24      	ldr	r3, [pc, #144]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1f0      	bne.n	8004512 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004530:	4b21      	ldr	r3, [pc, #132]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	4b21      	ldr	r3, [pc, #132]	; (80045bc <HAL_RCC_OscConfig+0x788>)
 8004536:	4013      	ands	r3, r2
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004540:	3a01      	subs	r2, #1
 8004542:	0112      	lsls	r2, r2, #4
 8004544:	4311      	orrs	r1, r2
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800454a:	0212      	lsls	r2, r2, #8
 800454c:	4311      	orrs	r1, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004552:	0852      	lsrs	r2, r2, #1
 8004554:	3a01      	subs	r2, #1
 8004556:	0552      	lsls	r2, r2, #21
 8004558:	4311      	orrs	r1, r2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800455e:	0852      	lsrs	r2, r2, #1
 8004560:	3a01      	subs	r2, #1
 8004562:	0652      	lsls	r2, r2, #25
 8004564:	4311      	orrs	r1, r2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800456a:	06d2      	lsls	r2, r2, #27
 800456c:	430a      	orrs	r2, r1
 800456e:	4912      	ldr	r1, [pc, #72]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 8004570:	4313      	orrs	r3, r2
 8004572:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004574:	4b10      	ldr	r3, [pc, #64]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a0f      	ldr	r2, [pc, #60]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 800457a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800457e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004580:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	4a0c      	ldr	r2, [pc, #48]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 8004586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800458a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800458c:	f7fd fa44 	bl	8001a18 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004594:	f7fd fa40 	bl	8001a18 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e058      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a6:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <HAL_RCC_OscConfig+0x784>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045b2:	e050      	b.n	8004656 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e04f      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
 80045b8:	40021000 	.word	0x40021000
 80045bc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045c0:	4b27      	ldr	r3, [pc, #156]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d144      	bne.n	8004656 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045cc:	4b24      	ldr	r3, [pc, #144]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a23      	ldr	r2, [pc, #140]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 80045d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045d8:	4b21      	ldr	r3, [pc, #132]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4a20      	ldr	r2, [pc, #128]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 80045de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045e4:	f7fd fa18 	bl	8001a18 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fd fa14 	bl	8001a18 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e02c      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045fe:	4b18      	ldr	r3, [pc, #96]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f0      	beq.n	80045ec <HAL_RCC_OscConfig+0x7b8>
 800460a:	e024      	b.n	8004656 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	2b0c      	cmp	r3, #12
 8004610:	d01f      	beq.n	8004652 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004612:	4b13      	ldr	r3, [pc, #76]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a12      	ldr	r2, [pc, #72]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 8004618:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800461c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461e:	f7fd f9fb 	bl	8001a18 <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004626:	f7fd f9f7 	bl	8001a18 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e00f      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004638:	4b09      	ldr	r3, [pc, #36]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1f0      	bne.n	8004626 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004644:	4b06      	ldr	r3, [pc, #24]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	4905      	ldr	r1, [pc, #20]	; (8004660 <HAL_RCC_OscConfig+0x82c>)
 800464a:	4b06      	ldr	r3, [pc, #24]	; (8004664 <HAL_RCC_OscConfig+0x830>)
 800464c:	4013      	ands	r3, r2
 800464e:	60cb      	str	r3, [r1, #12]
 8004650:	e001      	b.n	8004656 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3720      	adds	r7, #32
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40021000 	.word	0x40021000
 8004664:	feeefffc 	.word	0xfeeefffc

08004668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e11d      	b.n	80048bc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004680:	4b90      	ldr	r3, [pc, #576]	; (80048c4 <HAL_RCC_ClockConfig+0x25c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d910      	bls.n	80046b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468e:	4b8d      	ldr	r3, [pc, #564]	; (80048c4 <HAL_RCC_ClockConfig+0x25c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f023 020f 	bic.w	r2, r3, #15
 8004696:	498b      	ldr	r1, [pc, #556]	; (80048c4 <HAL_RCC_ClockConfig+0x25c>)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	4313      	orrs	r3, r2
 800469c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800469e:	4b89      	ldr	r3, [pc, #548]	; (80048c4 <HAL_RCC_ClockConfig+0x25c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d001      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e105      	b.n	80048bc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d010      	beq.n	80046de <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	4b81      	ldr	r3, [pc, #516]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d908      	bls.n	80046de <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046cc:	4b7e      	ldr	r3, [pc, #504]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	497b      	ldr	r1, [pc, #492]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d079      	beq.n	80047de <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d11e      	bne.n	8004730 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046f2:	4b75      	ldr	r3, [pc, #468]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e0dc      	b.n	80048bc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004702:	f000 fa09 	bl	8004b18 <RCC_GetSysClockFreqFromPLLSource>
 8004706:	4603      	mov	r3, r0
 8004708:	4a70      	ldr	r2, [pc, #448]	; (80048cc <HAL_RCC_ClockConfig+0x264>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d946      	bls.n	800479c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800470e:	4b6e      	ldr	r3, [pc, #440]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d140      	bne.n	800479c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800471a:	4b6b      	ldr	r3, [pc, #428]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004722:	4a69      	ldr	r2, [pc, #420]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 8004724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004728:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800472a:	2380      	movs	r3, #128	; 0x80
 800472c:	617b      	str	r3, [r7, #20]
 800472e:	e035      	b.n	800479c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b02      	cmp	r3, #2
 8004736:	d107      	bne.n	8004748 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004738:	4b63      	ldr	r3, [pc, #396]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d115      	bne.n	8004770 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e0b9      	b.n	80048bc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d107      	bne.n	8004760 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004750:	4b5d      	ldr	r3, [pc, #372]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d109      	bne.n	8004770 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0ad      	b.n	80048bc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004760:	4b59      	ldr	r3, [pc, #356]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e0a5      	b.n	80048bc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004770:	f000 f8b4 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8004774:	4603      	mov	r3, r0
 8004776:	4a55      	ldr	r2, [pc, #340]	; (80048cc <HAL_RCC_ClockConfig+0x264>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d90f      	bls.n	800479c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800477c:	4b52      	ldr	r3, [pc, #328]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d109      	bne.n	800479c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004788:	4b4f      	ldr	r3, [pc, #316]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004790:	4a4d      	ldr	r2, [pc, #308]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 8004792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004796:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004798:	2380      	movs	r3, #128	; 0x80
 800479a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800479c:	4b4a      	ldr	r3, [pc, #296]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f023 0203 	bic.w	r2, r3, #3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	4947      	ldr	r1, [pc, #284]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ae:	f7fd f933 	bl	8001a18 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b4:	e00a      	b.n	80047cc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b6:	f7fd f92f 	bl	8001a18 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e077      	b.n	80048bc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047cc:	4b3e      	ldr	r3, [pc, #248]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 020c 	and.w	r2, r3, #12
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	429a      	cmp	r2, r3
 80047dc:	d1eb      	bne.n	80047b6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2b80      	cmp	r3, #128	; 0x80
 80047e2:	d105      	bne.n	80047f0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80047e4:	4b38      	ldr	r3, [pc, #224]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	4a37      	ldr	r2, [pc, #220]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 80047ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047ee:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d010      	beq.n	800481e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	4b31      	ldr	r3, [pc, #196]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004808:	429a      	cmp	r2, r3
 800480a:	d208      	bcs.n	800481e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800480c:	4b2e      	ldr	r3, [pc, #184]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	492b      	ldr	r1, [pc, #172]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800481e:	4b29      	ldr	r3, [pc, #164]	; (80048c4 <HAL_RCC_ClockConfig+0x25c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	429a      	cmp	r2, r3
 800482a:	d210      	bcs.n	800484e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482c:	4b25      	ldr	r3, [pc, #148]	; (80048c4 <HAL_RCC_ClockConfig+0x25c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f023 020f 	bic.w	r2, r3, #15
 8004834:	4923      	ldr	r1, [pc, #140]	; (80048c4 <HAL_RCC_ClockConfig+0x25c>)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	4313      	orrs	r3, r2
 800483a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800483c:	4b21      	ldr	r3, [pc, #132]	; (80048c4 <HAL_RCC_ClockConfig+0x25c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 030f 	and.w	r3, r3, #15
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d001      	beq.n	800484e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e036      	b.n	80048bc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b00      	cmp	r3, #0
 8004858:	d008      	beq.n	800486c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800485a:	4b1b      	ldr	r3, [pc, #108]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	4918      	ldr	r1, [pc, #96]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 8004868:	4313      	orrs	r3, r2
 800486a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d009      	beq.n	800488c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004878:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	4910      	ldr	r1, [pc, #64]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 8004888:	4313      	orrs	r3, r2
 800488a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800488c:	f000 f826 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8004890:	4602      	mov	r2, r0
 8004892:	4b0d      	ldr	r3, [pc, #52]	; (80048c8 <HAL_RCC_ClockConfig+0x260>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	091b      	lsrs	r3, r3, #4
 8004898:	f003 030f 	and.w	r3, r3, #15
 800489c:	490c      	ldr	r1, [pc, #48]	; (80048d0 <HAL_RCC_ClockConfig+0x268>)
 800489e:	5ccb      	ldrb	r3, [r1, r3]
 80048a0:	f003 031f 	and.w	r3, r3, #31
 80048a4:	fa22 f303 	lsr.w	r3, r2, r3
 80048a8:	4a0a      	ldr	r2, [pc, #40]	; (80048d4 <HAL_RCC_ClockConfig+0x26c>)
 80048aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048ac:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <HAL_RCC_ClockConfig+0x270>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7fd f861 	bl	8001978 <HAL_InitTick>
 80048b6:	4603      	mov	r3, r0
 80048b8:	73fb      	strb	r3, [r7, #15]

  return status;
 80048ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40022000 	.word	0x40022000
 80048c8:	40021000 	.word	0x40021000
 80048cc:	04c4b400 	.word	0x04c4b400
 80048d0:	08008440 	.word	0x08008440
 80048d4:	2000000c 	.word	0x2000000c
 80048d8:	20000010 	.word	0x20000010

080048dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	b089      	sub	sp, #36	; 0x24
 80048e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	61fb      	str	r3, [r7, #28]
 80048e6:	2300      	movs	r3, #0
 80048e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ea:	4b3e      	ldr	r3, [pc, #248]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 030c 	and.w	r3, r3, #12
 80048f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048f4:	4b3b      	ldr	r3, [pc, #236]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f003 0303 	and.w	r3, r3, #3
 80048fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <HAL_RCC_GetSysClockFreq+0x34>
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	2b0c      	cmp	r3, #12
 8004908:	d121      	bne.n	800494e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d11e      	bne.n	800494e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004910:	4b34      	ldr	r3, [pc, #208]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0308 	and.w	r3, r3, #8
 8004918:	2b00      	cmp	r3, #0
 800491a:	d107      	bne.n	800492c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800491c:	4b31      	ldr	r3, [pc, #196]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800491e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004922:	0a1b      	lsrs	r3, r3, #8
 8004924:	f003 030f 	and.w	r3, r3, #15
 8004928:	61fb      	str	r3, [r7, #28]
 800492a:	e005      	b.n	8004938 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800492c:	4b2d      	ldr	r3, [pc, #180]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	091b      	lsrs	r3, r3, #4
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004938:	4a2b      	ldr	r2, [pc, #172]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004940:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10d      	bne.n	8004964 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800494c:	e00a      	b.n	8004964 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	2b04      	cmp	r3, #4
 8004952:	d102      	bne.n	800495a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004954:	4b25      	ldr	r3, [pc, #148]	; (80049ec <HAL_RCC_GetSysClockFreq+0x110>)
 8004956:	61bb      	str	r3, [r7, #24]
 8004958:	e004      	b.n	8004964 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	2b08      	cmp	r3, #8
 800495e:	d101      	bne.n	8004964 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004960:	4b23      	ldr	r3, [pc, #140]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004962:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	2b0c      	cmp	r3, #12
 8004968:	d134      	bne.n	80049d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800496a:	4b1e      	ldr	r3, [pc, #120]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d003      	beq.n	8004982 <HAL_RCC_GetSysClockFreq+0xa6>
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b03      	cmp	r3, #3
 800497e:	d003      	beq.n	8004988 <HAL_RCC_GetSysClockFreq+0xac>
 8004980:	e005      	b.n	800498e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004982:	4b1a      	ldr	r3, [pc, #104]	; (80049ec <HAL_RCC_GetSysClockFreq+0x110>)
 8004984:	617b      	str	r3, [r7, #20]
      break;
 8004986:	e005      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004988:	4b19      	ldr	r3, [pc, #100]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800498a:	617b      	str	r3, [r7, #20]
      break;
 800498c:	e002      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	617b      	str	r3, [r7, #20]
      break;
 8004992:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004994:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	091b      	lsrs	r3, r3, #4
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	3301      	adds	r3, #1
 80049a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049a2:	4b10      	ldr	r3, [pc, #64]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	0a1b      	lsrs	r3, r3, #8
 80049a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	fb03 f202 	mul.w	r2, r3, r2
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049ba:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	0e5b      	lsrs	r3, r3, #25
 80049c0:	f003 0303 	and.w	r3, r3, #3
 80049c4:	3301      	adds	r3, #1
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80049d4:	69bb      	ldr	r3, [r7, #24]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3724      	adds	r7, #36	; 0x24
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40021000 	.word	0x40021000
 80049e8:	08008458 	.word	0x08008458
 80049ec:	00f42400 	.word	0x00f42400
 80049f0:	007a1200 	.word	0x007a1200

080049f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049f8:	4b03      	ldr	r3, [pc, #12]	; (8004a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80049fa:	681b      	ldr	r3, [r3, #0]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	2000000c 	.word	0x2000000c

08004a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a10:	f7ff fff0 	bl	80049f4 <HAL_RCC_GetHCLKFreq>
 8004a14:	4602      	mov	r2, r0
 8004a16:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	0a1b      	lsrs	r3, r3, #8
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	4904      	ldr	r1, [pc, #16]	; (8004a34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a22:	5ccb      	ldrb	r3, [r1, r3]
 8004a24:	f003 031f 	and.w	r3, r3, #31
 8004a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40021000 	.word	0x40021000
 8004a34:	08008450 	.word	0x08008450

08004a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a3c:	f7ff ffda 	bl	80049f4 <HAL_RCC_GetHCLKFreq>
 8004a40:	4602      	mov	r2, r0
 8004a42:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	0adb      	lsrs	r3, r3, #11
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	4904      	ldr	r1, [pc, #16]	; (8004a60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a4e:	5ccb      	ldrb	r3, [r1, r3]
 8004a50:	f003 031f 	and.w	r3, r3, #31
 8004a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	08008450 	.word	0x08008450

08004a64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a70:	4b27      	ldr	r3, [pc, #156]	; (8004b10 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a7c:	f7ff f916 	bl	8003cac <HAL_PWREx_GetVoltageRange>
 8004a80:	6178      	str	r0, [r7, #20]
 8004a82:	e014      	b.n	8004aae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a84:	4b22      	ldr	r3, [pc, #136]	; (8004b10 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a88:	4a21      	ldr	r2, [pc, #132]	; (8004b10 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a90:	4b1f      	ldr	r3, [pc, #124]	; (8004b10 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a9c:	f7ff f906 	bl	8003cac <HAL_PWREx_GetVoltageRange>
 8004aa0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004aa2:	4b1b      	ldr	r3, [pc, #108]	; (8004b10 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa6:	4a1a      	ldr	r2, [pc, #104]	; (8004b10 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ab4:	d10b      	bne.n	8004ace <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b80      	cmp	r3, #128	; 0x80
 8004aba:	d913      	bls.n	8004ae4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2ba0      	cmp	r3, #160	; 0xa0
 8004ac0:	d902      	bls.n	8004ac8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	613b      	str	r3, [r7, #16]
 8004ac6:	e00d      	b.n	8004ae4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ac8:	2301      	movs	r3, #1
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	e00a      	b.n	8004ae4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ad2:	d902      	bls.n	8004ada <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	613b      	str	r3, [r7, #16]
 8004ad8:	e004      	b.n	8004ae4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b70      	cmp	r3, #112	; 0x70
 8004ade:	d101      	bne.n	8004ae4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f023 020f 	bic.w	r2, r3, #15
 8004aec:	4909      	ldr	r1, [pc, #36]	; (8004b14 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004af4:	4b07      	ldr	r3, [pc, #28]	; (8004b14 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 030f 	and.w	r3, r3, #15
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d001      	beq.n	8004b06 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40021000 	.word	0x40021000
 8004b14:	40022000 	.word	0x40022000

08004b18 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b1e:	4b2d      	ldr	r3, [pc, #180]	; (8004bd4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d00b      	beq.n	8004b46 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	d825      	bhi.n	8004b80 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d008      	beq.n	8004b4c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d11f      	bne.n	8004b80 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004b40:	4b25      	ldr	r3, [pc, #148]	; (8004bd8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004b42:	613b      	str	r3, [r7, #16]
    break;
 8004b44:	e01f      	b.n	8004b86 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004b46:	4b25      	ldr	r3, [pc, #148]	; (8004bdc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004b48:	613b      	str	r3, [r7, #16]
    break;
 8004b4a:	e01c      	b.n	8004b86 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b4c:	4b21      	ldr	r3, [pc, #132]	; (8004bd4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d107      	bne.n	8004b68 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b58:	4b1e      	ldr	r3, [pc, #120]	; (8004bd4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b5e:	0a1b      	lsrs	r3, r3, #8
 8004b60:	f003 030f 	and.w	r3, r3, #15
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	e005      	b.n	8004b74 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b68:	4b1a      	ldr	r3, [pc, #104]	; (8004bd4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	091b      	lsrs	r3, r3, #4
 8004b6e:	f003 030f 	and.w	r3, r3, #15
 8004b72:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004b74:	4a1a      	ldr	r2, [pc, #104]	; (8004be0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b7c:	613b      	str	r3, [r7, #16]
    break;
 8004b7e:	e002      	b.n	8004b86 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	613b      	str	r3, [r7, #16]
    break;
 8004b84:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b86:	4b13      	ldr	r3, [pc, #76]	; (8004bd4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	091b      	lsrs	r3, r3, #4
 8004b8c:	f003 030f 	and.w	r3, r3, #15
 8004b90:	3301      	adds	r3, #1
 8004b92:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b94:	4b0f      	ldr	r3, [pc, #60]	; (8004bd4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	0a1b      	lsrs	r3, r3, #8
 8004b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	fb03 f202 	mul.w	r2, r3, r2
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004baa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bac:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	0e5b      	lsrs	r3, r3, #25
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004bc6:	683b      	ldr	r3, [r7, #0]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	00f42400 	.word	0x00f42400
 8004bdc:	007a1200 	.word	0x007a1200
 8004be0:	08008458 	.word	0x08008458

08004be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bec:	2300      	movs	r3, #0
 8004bee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d040      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c04:	2b80      	cmp	r3, #128	; 0x80
 8004c06:	d02a      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004c08:	2b80      	cmp	r3, #128	; 0x80
 8004c0a:	d825      	bhi.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c0c:	2b60      	cmp	r3, #96	; 0x60
 8004c0e:	d026      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004c10:	2b60      	cmp	r3, #96	; 0x60
 8004c12:	d821      	bhi.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d006      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004c18:	2b40      	cmp	r3, #64	; 0x40
 8004c1a:	d81d      	bhi.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d009      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d010      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004c24:	e018      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c26:	4b89      	ldr	r3, [pc, #548]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	4a88      	ldr	r2, [pc, #544]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c30:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c32:	e015      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3304      	adds	r3, #4
 8004c38:	2100      	movs	r1, #0
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fb12 	bl	8005264 <RCCEx_PLLSAI1_Config>
 8004c40:	4603      	mov	r3, r0
 8004c42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c44:	e00c      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3320      	adds	r3, #32
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 fbfd 	bl	800544c <RCCEx_PLLSAI2_Config>
 8004c52:	4603      	mov	r3, r0
 8004c54:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c56:	e003      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	74fb      	strb	r3, [r7, #19]
      break;
 8004c5c:	e000      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004c5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c60:	7cfb      	ldrb	r3, [r7, #19]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10b      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c66:	4b79      	ldr	r3, [pc, #484]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c6c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c74:	4975      	ldr	r1, [pc, #468]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004c7c:	e001      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c7e:	7cfb      	ldrb	r3, [r7, #19]
 8004c80:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d047      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c96:	d030      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c9c:	d82a      	bhi.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ca2:	d02a      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004ca4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ca8:	d824      	bhi.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cae:	d008      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cb4:	d81e      	bhi.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cbe:	d010      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004cc0:	e018      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004cc2:	4b62      	ldr	r3, [pc, #392]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	4a61      	ldr	r2, [pc, #388]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ccc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cce:	e015      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fac4 	bl	8005264 <RCCEx_PLLSAI1_Config>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ce0:	e00c      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	3320      	adds	r3, #32
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fbaf 	bl	800544c <RCCEx_PLLSAI2_Config>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cf2:	e003      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	74fb      	strb	r3, [r7, #19]
      break;
 8004cf8:	e000      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004cfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cfc:	7cfb      	ldrb	r3, [r7, #19]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10b      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d02:	4b52      	ldr	r3, [pc, #328]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d10:	494e      	ldr	r1, [pc, #312]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004d18:	e001      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d1a:	7cfb      	ldrb	r3, [r7, #19]
 8004d1c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 809f 	beq.w	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d30:	4b46      	ldr	r3, [pc, #280]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004d40:	2300      	movs	r3, #0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00d      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d46:	4b41      	ldr	r3, [pc, #260]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4a:	4a40      	ldr	r2, [pc, #256]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d50:	6593      	str	r3, [r2, #88]	; 0x58
 8004d52:	4b3e      	ldr	r3, [pc, #248]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d62:	4b3b      	ldr	r3, [pc, #236]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a3a      	ldr	r2, [pc, #232]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d6e:	f7fc fe53 	bl	8001a18 <HAL_GetTick>
 8004d72:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d74:	e009      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d76:	f7fc fe4f 	bl	8001a18 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d902      	bls.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	74fb      	strb	r3, [r7, #19]
        break;
 8004d88:	e005      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d8a:	4b31      	ldr	r3, [pc, #196]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0ef      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004d96:	7cfb      	ldrb	r3, [r7, #19]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d15b      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d9c:	4b2b      	ldr	r3, [pc, #172]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d01f      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d019      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004dba:	4b24      	ldr	r3, [pc, #144]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dc6:	4b21      	ldr	r3, [pc, #132]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dcc:	4a1f      	ldr	r2, [pc, #124]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dd6:	4b1d      	ldr	r3, [pc, #116]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ddc:	4a1b      	ldr	r2, [pc, #108]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004de6:	4a19      	ldr	r2, [pc, #100]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d016      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df8:	f7fc fe0e 	bl	8001a18 <HAL_GetTick>
 8004dfc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dfe:	e00b      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e00:	f7fc fe0a 	bl	8001a18 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d902      	bls.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	74fb      	strb	r3, [r7, #19]
            break;
 8004e16:	e006      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e18:	4b0c      	ldr	r3, [pc, #48]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0ec      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004e26:	7cfb      	ldrb	r3, [r7, #19]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10c      	bne.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e2c:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3c:	4903      	ldr	r1, [pc, #12]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e44:	e008      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e46:	7cfb      	ldrb	r3, [r7, #19]
 8004e48:	74bb      	strb	r3, [r7, #18]
 8004e4a:	e005      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e54:	7cfb      	ldrb	r3, [r7, #19]
 8004e56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e58:	7c7b      	ldrb	r3, [r7, #17]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d105      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e5e:	4ba0      	ldr	r3, [pc, #640]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e62:	4a9f      	ldr	r2, [pc, #636]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00a      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e76:	4b9a      	ldr	r3, [pc, #616]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7c:	f023 0203 	bic.w	r2, r3, #3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e84:	4996      	ldr	r1, [pc, #600]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00a      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e98:	4b91      	ldr	r3, [pc, #580]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9e:	f023 020c 	bic.w	r2, r3, #12
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	498e      	ldr	r1, [pc, #568]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0304 	and.w	r3, r3, #4
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004eba:	4b89      	ldr	r3, [pc, #548]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec8:	4985      	ldr	r1, [pc, #532]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00a      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004edc:	4b80      	ldr	r3, [pc, #512]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eea:	497d      	ldr	r1, [pc, #500]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0310 	and.w	r3, r3, #16
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004efe:	4b78      	ldr	r3, [pc, #480]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0c:	4974      	ldr	r1, [pc, #464]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0320 	and.w	r3, r3, #32
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f20:	4b6f      	ldr	r3, [pc, #444]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2e:	496c      	ldr	r1, [pc, #432]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f42:	4b67      	ldr	r3, [pc, #412]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f50:	4963      	ldr	r1, [pc, #396]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f64:	4b5e      	ldr	r3, [pc, #376]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f72:	495b      	ldr	r1, [pc, #364]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f86:	4b56      	ldr	r3, [pc, #344]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f94:	4952      	ldr	r1, [pc, #328]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fa8:	4b4d      	ldr	r3, [pc, #308]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb6:	494a      	ldr	r1, [pc, #296]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fca:	4b45      	ldr	r3, [pc, #276]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd8:	4941      	ldr	r1, [pc, #260]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fec:	4b3c      	ldr	r3, [pc, #240]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ff2:	f023 0203 	bic.w	r2, r3, #3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ffa:	4939      	ldr	r1, [pc, #228]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d028      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800500e:	4b34      	ldr	r3, [pc, #208]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005014:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800501c:	4930      	ldr	r1, [pc, #192]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005028:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800502c:	d106      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800502e:	4b2c      	ldr	r3, [pc, #176]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	4a2b      	ldr	r2, [pc, #172]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005034:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005038:	60d3      	str	r3, [r2, #12]
 800503a:	e011      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005040:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005044:	d10c      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3304      	adds	r3, #4
 800504a:	2101      	movs	r1, #1
 800504c:	4618      	mov	r0, r3
 800504e:	f000 f909 	bl	8005264 <RCCEx_PLLSAI1_Config>
 8005052:	4603      	mov	r3, r0
 8005054:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005056:	7cfb      	ldrb	r3, [r7, #19]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d001      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800505c:	7cfb      	ldrb	r3, [r7, #19]
 800505e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d04d      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005070:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005074:	d108      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005076:	4b1a      	ldr	r3, [pc, #104]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005078:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800507c:	4a18      	ldr	r2, [pc, #96]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800507e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005082:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005086:	e012      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005088:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800508a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800508e:	4a14      	ldr	r2, [pc, #80]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005090:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005094:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005098:	4b11      	ldr	r3, [pc, #68]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800509a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050a6:	490e      	ldr	r1, [pc, #56]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050b6:	d106      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050b8:	4b09      	ldr	r3, [pc, #36]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	4a08      	ldr	r2, [pc, #32]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050c2:	60d3      	str	r3, [r2, #12]
 80050c4:	e020      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050ce:	d109      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050d0:	4b03      	ldr	r3, [pc, #12]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	4a02      	ldr	r2, [pc, #8]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050da:	60d3      	str	r3, [r2, #12]
 80050dc:	e014      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80050de:	bf00      	nop
 80050e0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050ec:	d10c      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3304      	adds	r3, #4
 80050f2:	2101      	movs	r1, #1
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 f8b5 	bl	8005264 <RCCEx_PLLSAI1_Config>
 80050fa:	4603      	mov	r3, r0
 80050fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050fe:	7cfb      	ldrb	r3, [r7, #19]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005104:	7cfb      	ldrb	r3, [r7, #19]
 8005106:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d028      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005114:	4b4a      	ldr	r3, [pc, #296]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005122:	4947      	ldr	r1, [pc, #284]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800512e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005132:	d106      	bne.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005134:	4b42      	ldr	r3, [pc, #264]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	4a41      	ldr	r2, [pc, #260]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800513a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800513e:	60d3      	str	r3, [r2, #12]
 8005140:	e011      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005146:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800514a:	d10c      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3304      	adds	r3, #4
 8005150:	2101      	movs	r1, #1
 8005152:	4618      	mov	r0, r3
 8005154:	f000 f886 	bl	8005264 <RCCEx_PLLSAI1_Config>
 8005158:	4603      	mov	r3, r0
 800515a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800515c:	7cfb      	ldrb	r3, [r7, #19]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005162:	7cfb      	ldrb	r3, [r7, #19]
 8005164:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d01e      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005172:	4b33      	ldr	r3, [pc, #204]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005178:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005182:	492f      	ldr	r1, [pc, #188]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005190:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005194:	d10c      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3304      	adds	r3, #4
 800519a:	2102      	movs	r1, #2
 800519c:	4618      	mov	r0, r3
 800519e:	f000 f861 	bl	8005264 <RCCEx_PLLSAI1_Config>
 80051a2:	4603      	mov	r3, r0
 80051a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051a6:	7cfb      	ldrb	r3, [r7, #19]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80051ac:	7cfb      	ldrb	r3, [r7, #19]
 80051ae:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00b      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051bc:	4b20      	ldr	r3, [pc, #128]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051c2:	f023 0204 	bic.w	r2, r3, #4
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051cc:	491c      	ldr	r1, [pc, #112]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00b      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80051e0:	4b17      	ldr	r3, [pc, #92]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051e6:	f023 0218 	bic.w	r2, r3, #24
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f0:	4913      	ldr	r1, [pc, #76]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d017      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005204:	4b0e      	ldr	r3, [pc, #56]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005206:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800520a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005214:	490a      	ldr	r1, [pc, #40]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005222:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005226:	d105      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005228:	4b05      	ldr	r3, [pc, #20]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	4a04      	ldr	r2, [pc, #16]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800522e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005232:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005234:	7cbb      	ldrb	r3, [r7, #18]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	40021000 	.word	0x40021000

08005244 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005248:	4b05      	ldr	r3, [pc, #20]	; (8005260 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a04      	ldr	r2, [pc, #16]	; (8005260 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800524e:	f043 0304 	orr.w	r3, r3, #4
 8005252:	6013      	str	r3, [r2, #0]
}
 8005254:	bf00      	nop
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40021000 	.word	0x40021000

08005264 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005272:	4b72      	ldr	r3, [pc, #456]	; (800543c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00e      	beq.n	800529c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800527e:	4b6f      	ldr	r3, [pc, #444]	; (800543c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f003 0203 	and.w	r2, r3, #3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d103      	bne.n	8005296 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
       ||
 8005292:	2b00      	cmp	r3, #0
 8005294:	d142      	bne.n	800531c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	73fb      	strb	r3, [r7, #15]
 800529a:	e03f      	b.n	800531c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d018      	beq.n	80052d6 <RCCEx_PLLSAI1_Config+0x72>
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	d825      	bhi.n	80052f4 <RCCEx_PLLSAI1_Config+0x90>
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d002      	beq.n	80052b2 <RCCEx_PLLSAI1_Config+0x4e>
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d009      	beq.n	80052c4 <RCCEx_PLLSAI1_Config+0x60>
 80052b0:	e020      	b.n	80052f4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052b2:	4b62      	ldr	r3, [pc, #392]	; (800543c <RCCEx_PLLSAI1_Config+0x1d8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d11d      	bne.n	80052fa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052c2:	e01a      	b.n	80052fa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052c4:	4b5d      	ldr	r3, [pc, #372]	; (800543c <RCCEx_PLLSAI1_Config+0x1d8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d116      	bne.n	80052fe <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052d4:	e013      	b.n	80052fe <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052d6:	4b59      	ldr	r3, [pc, #356]	; (800543c <RCCEx_PLLSAI1_Config+0x1d8>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10f      	bne.n	8005302 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052e2:	4b56      	ldr	r3, [pc, #344]	; (800543c <RCCEx_PLLSAI1_Config+0x1d8>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d109      	bne.n	8005302 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052f2:	e006      	b.n	8005302 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]
      break;
 80052f8:	e004      	b.n	8005304 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80052fa:	bf00      	nop
 80052fc:	e002      	b.n	8005304 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80052fe:	bf00      	nop
 8005300:	e000      	b.n	8005304 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005302:	bf00      	nop
    }

    if(status == HAL_OK)
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d108      	bne.n	800531c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800530a:	4b4c      	ldr	r3, [pc, #304]	; (800543c <RCCEx_PLLSAI1_Config+0x1d8>)
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f023 0203 	bic.w	r2, r3, #3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4949      	ldr	r1, [pc, #292]	; (800543c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005318:	4313      	orrs	r3, r2
 800531a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800531c:	7bfb      	ldrb	r3, [r7, #15]
 800531e:	2b00      	cmp	r3, #0
 8005320:	f040 8086 	bne.w	8005430 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005324:	4b45      	ldr	r3, [pc, #276]	; (800543c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a44      	ldr	r2, [pc, #272]	; (800543c <RCCEx_PLLSAI1_Config+0x1d8>)
 800532a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800532e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005330:	f7fc fb72 	bl	8001a18 <HAL_GetTick>
 8005334:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005336:	e009      	b.n	800534c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005338:	f7fc fb6e 	bl	8001a18 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d902      	bls.n	800534c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	73fb      	strb	r3, [r7, #15]
        break;
 800534a:	e005      	b.n	8005358 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800534c:	4b3b      	ldr	r3, [pc, #236]	; (800543c <RCCEx_PLLSAI1_Config+0x1d8>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1ef      	bne.n	8005338 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005358:	7bfb      	ldrb	r3, [r7, #15]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d168      	bne.n	8005430 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d113      	bne.n	800538c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005364:	4b35      	ldr	r3, [pc, #212]	; (800543c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005366:	691a      	ldr	r2, [r3, #16]
 8005368:	4b35      	ldr	r3, [pc, #212]	; (8005440 <RCCEx_PLLSAI1_Config+0x1dc>)
 800536a:	4013      	ands	r3, r2
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6892      	ldr	r2, [r2, #8]
 8005370:	0211      	lsls	r1, r2, #8
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	68d2      	ldr	r2, [r2, #12]
 8005376:	06d2      	lsls	r2, r2, #27
 8005378:	4311      	orrs	r1, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6852      	ldr	r2, [r2, #4]
 800537e:	3a01      	subs	r2, #1
 8005380:	0112      	lsls	r2, r2, #4
 8005382:	430a      	orrs	r2, r1
 8005384:	492d      	ldr	r1, [pc, #180]	; (800543c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005386:	4313      	orrs	r3, r2
 8005388:	610b      	str	r3, [r1, #16]
 800538a:	e02d      	b.n	80053e8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d115      	bne.n	80053be <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005392:	4b2a      	ldr	r3, [pc, #168]	; (800543c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005394:	691a      	ldr	r2, [r3, #16]
 8005396:	4b2b      	ldr	r3, [pc, #172]	; (8005444 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005398:	4013      	ands	r3, r2
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6892      	ldr	r2, [r2, #8]
 800539e:	0211      	lsls	r1, r2, #8
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	6912      	ldr	r2, [r2, #16]
 80053a4:	0852      	lsrs	r2, r2, #1
 80053a6:	3a01      	subs	r2, #1
 80053a8:	0552      	lsls	r2, r2, #21
 80053aa:	4311      	orrs	r1, r2
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6852      	ldr	r2, [r2, #4]
 80053b0:	3a01      	subs	r2, #1
 80053b2:	0112      	lsls	r2, r2, #4
 80053b4:	430a      	orrs	r2, r1
 80053b6:	4921      	ldr	r1, [pc, #132]	; (800543c <RCCEx_PLLSAI1_Config+0x1d8>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	610b      	str	r3, [r1, #16]
 80053bc:	e014      	b.n	80053e8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053be:	4b1f      	ldr	r3, [pc, #124]	; (800543c <RCCEx_PLLSAI1_Config+0x1d8>)
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	4b21      	ldr	r3, [pc, #132]	; (8005448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6892      	ldr	r2, [r2, #8]
 80053ca:	0211      	lsls	r1, r2, #8
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6952      	ldr	r2, [r2, #20]
 80053d0:	0852      	lsrs	r2, r2, #1
 80053d2:	3a01      	subs	r2, #1
 80053d4:	0652      	lsls	r2, r2, #25
 80053d6:	4311      	orrs	r1, r2
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	6852      	ldr	r2, [r2, #4]
 80053dc:	3a01      	subs	r2, #1
 80053de:	0112      	lsls	r2, r2, #4
 80053e0:	430a      	orrs	r2, r1
 80053e2:	4916      	ldr	r1, [pc, #88]	; (800543c <RCCEx_PLLSAI1_Config+0x1d8>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80053e8:	4b14      	ldr	r3, [pc, #80]	; (800543c <RCCEx_PLLSAI1_Config+0x1d8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a13      	ldr	r2, [pc, #76]	; (800543c <RCCEx_PLLSAI1_Config+0x1d8>)
 80053ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f4:	f7fc fb10 	bl	8001a18 <HAL_GetTick>
 80053f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053fa:	e009      	b.n	8005410 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053fc:	f7fc fb0c 	bl	8001a18 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d902      	bls.n	8005410 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	73fb      	strb	r3, [r7, #15]
          break;
 800540e:	e005      	b.n	800541c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005410:	4b0a      	ldr	r3, [pc, #40]	; (800543c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0ef      	beq.n	80053fc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800541c:	7bfb      	ldrb	r3, [r7, #15]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005422:	4b06      	ldr	r3, [pc, #24]	; (800543c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005424:	691a      	ldr	r2, [r3, #16]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	4904      	ldr	r1, [pc, #16]	; (800543c <RCCEx_PLLSAI1_Config+0x1d8>)
 800542c:	4313      	orrs	r3, r2
 800542e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005430:	7bfb      	ldrb	r3, [r7, #15]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40021000 	.word	0x40021000
 8005440:	07ff800f 	.word	0x07ff800f
 8005444:	ff9f800f 	.word	0xff9f800f
 8005448:	f9ff800f 	.word	0xf9ff800f

0800544c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800545a:	4b72      	ldr	r3, [pc, #456]	; (8005624 <RCCEx_PLLSAI2_Config+0x1d8>)
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00e      	beq.n	8005484 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005466:	4b6f      	ldr	r3, [pc, #444]	; (8005624 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f003 0203 	and.w	r2, r3, #3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d103      	bne.n	800547e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
       ||
 800547a:	2b00      	cmp	r3, #0
 800547c:	d142      	bne.n	8005504 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	73fb      	strb	r3, [r7, #15]
 8005482:	e03f      	b.n	8005504 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b03      	cmp	r3, #3
 800548a:	d018      	beq.n	80054be <RCCEx_PLLSAI2_Config+0x72>
 800548c:	2b03      	cmp	r3, #3
 800548e:	d825      	bhi.n	80054dc <RCCEx_PLLSAI2_Config+0x90>
 8005490:	2b01      	cmp	r3, #1
 8005492:	d002      	beq.n	800549a <RCCEx_PLLSAI2_Config+0x4e>
 8005494:	2b02      	cmp	r3, #2
 8005496:	d009      	beq.n	80054ac <RCCEx_PLLSAI2_Config+0x60>
 8005498:	e020      	b.n	80054dc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800549a:	4b62      	ldr	r3, [pc, #392]	; (8005624 <RCCEx_PLLSAI2_Config+0x1d8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d11d      	bne.n	80054e2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054aa:	e01a      	b.n	80054e2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054ac:	4b5d      	ldr	r3, [pc, #372]	; (8005624 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d116      	bne.n	80054e6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054bc:	e013      	b.n	80054e6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054be:	4b59      	ldr	r3, [pc, #356]	; (8005624 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10f      	bne.n	80054ea <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054ca:	4b56      	ldr	r3, [pc, #344]	; (8005624 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d109      	bne.n	80054ea <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054da:	e006      	b.n	80054ea <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	73fb      	strb	r3, [r7, #15]
      break;
 80054e0:	e004      	b.n	80054ec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80054e2:	bf00      	nop
 80054e4:	e002      	b.n	80054ec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80054e6:	bf00      	nop
 80054e8:	e000      	b.n	80054ec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80054ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d108      	bne.n	8005504 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80054f2:	4b4c      	ldr	r3, [pc, #304]	; (8005624 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f023 0203 	bic.w	r2, r3, #3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4949      	ldr	r1, [pc, #292]	; (8005624 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005500:	4313      	orrs	r3, r2
 8005502:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	2b00      	cmp	r3, #0
 8005508:	f040 8086 	bne.w	8005618 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800550c:	4b45      	ldr	r3, [pc, #276]	; (8005624 <RCCEx_PLLSAI2_Config+0x1d8>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a44      	ldr	r2, [pc, #272]	; (8005624 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005516:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005518:	f7fc fa7e 	bl	8001a18 <HAL_GetTick>
 800551c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800551e:	e009      	b.n	8005534 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005520:	f7fc fa7a 	bl	8001a18 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d902      	bls.n	8005534 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	73fb      	strb	r3, [r7, #15]
        break;
 8005532:	e005      	b.n	8005540 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005534:	4b3b      	ldr	r3, [pc, #236]	; (8005624 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1ef      	bne.n	8005520 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005540:	7bfb      	ldrb	r3, [r7, #15]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d168      	bne.n	8005618 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d113      	bne.n	8005574 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800554c:	4b35      	ldr	r3, [pc, #212]	; (8005624 <RCCEx_PLLSAI2_Config+0x1d8>)
 800554e:	695a      	ldr	r2, [r3, #20]
 8005550:	4b35      	ldr	r3, [pc, #212]	; (8005628 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005552:	4013      	ands	r3, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6892      	ldr	r2, [r2, #8]
 8005558:	0211      	lsls	r1, r2, #8
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	68d2      	ldr	r2, [r2, #12]
 800555e:	06d2      	lsls	r2, r2, #27
 8005560:	4311      	orrs	r1, r2
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6852      	ldr	r2, [r2, #4]
 8005566:	3a01      	subs	r2, #1
 8005568:	0112      	lsls	r2, r2, #4
 800556a:	430a      	orrs	r2, r1
 800556c:	492d      	ldr	r1, [pc, #180]	; (8005624 <RCCEx_PLLSAI2_Config+0x1d8>)
 800556e:	4313      	orrs	r3, r2
 8005570:	614b      	str	r3, [r1, #20]
 8005572:	e02d      	b.n	80055d0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d115      	bne.n	80055a6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800557a:	4b2a      	ldr	r3, [pc, #168]	; (8005624 <RCCEx_PLLSAI2_Config+0x1d8>)
 800557c:	695a      	ldr	r2, [r3, #20]
 800557e:	4b2b      	ldr	r3, [pc, #172]	; (800562c <RCCEx_PLLSAI2_Config+0x1e0>)
 8005580:	4013      	ands	r3, r2
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	6892      	ldr	r2, [r2, #8]
 8005586:	0211      	lsls	r1, r2, #8
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6912      	ldr	r2, [r2, #16]
 800558c:	0852      	lsrs	r2, r2, #1
 800558e:	3a01      	subs	r2, #1
 8005590:	0552      	lsls	r2, r2, #21
 8005592:	4311      	orrs	r1, r2
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6852      	ldr	r2, [r2, #4]
 8005598:	3a01      	subs	r2, #1
 800559a:	0112      	lsls	r2, r2, #4
 800559c:	430a      	orrs	r2, r1
 800559e:	4921      	ldr	r1, [pc, #132]	; (8005624 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	614b      	str	r3, [r1, #20]
 80055a4:	e014      	b.n	80055d0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055a6:	4b1f      	ldr	r3, [pc, #124]	; (8005624 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055a8:	695a      	ldr	r2, [r3, #20]
 80055aa:	4b21      	ldr	r3, [pc, #132]	; (8005630 <RCCEx_PLLSAI2_Config+0x1e4>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6892      	ldr	r2, [r2, #8]
 80055b2:	0211      	lsls	r1, r2, #8
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6952      	ldr	r2, [r2, #20]
 80055b8:	0852      	lsrs	r2, r2, #1
 80055ba:	3a01      	subs	r2, #1
 80055bc:	0652      	lsls	r2, r2, #25
 80055be:	4311      	orrs	r1, r2
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6852      	ldr	r2, [r2, #4]
 80055c4:	3a01      	subs	r2, #1
 80055c6:	0112      	lsls	r2, r2, #4
 80055c8:	430a      	orrs	r2, r1
 80055ca:	4916      	ldr	r1, [pc, #88]	; (8005624 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80055d0:	4b14      	ldr	r3, [pc, #80]	; (8005624 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a13      	ldr	r2, [pc, #76]	; (8005624 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055dc:	f7fc fa1c 	bl	8001a18 <HAL_GetTick>
 80055e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055e2:	e009      	b.n	80055f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055e4:	f7fc fa18 	bl	8001a18 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d902      	bls.n	80055f8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	73fb      	strb	r3, [r7, #15]
          break;
 80055f6:	e005      	b.n	8005604 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055f8:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0ef      	beq.n	80055e4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d106      	bne.n	8005618 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800560a:	4b06      	ldr	r3, [pc, #24]	; (8005624 <RCCEx_PLLSAI2_Config+0x1d8>)
 800560c:	695a      	ldr	r2, [r3, #20]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	4904      	ldr	r1, [pc, #16]	; (8005624 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005614:	4313      	orrs	r3, r2
 8005616:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005618:	7bfb      	ldrb	r3, [r7, #15]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	40021000 	.word	0x40021000
 8005628:	07ff800f 	.word	0x07ff800f
 800562c:	ff9f800f 	.word	0xff9f800f
 8005630:	f9ff800f 	.word	0xf9ff800f

08005634 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e095      	b.n	8005772 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	2b00      	cmp	r3, #0
 800564c:	d108      	bne.n	8005660 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005656:	d009      	beq.n	800566c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	61da      	str	r2, [r3, #28]
 800565e:	e005      	b.n	800566c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7fb feb8 	bl	80013fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056ac:	d902      	bls.n	80056b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80056ae:	2300      	movs	r3, #0
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	e002      	b.n	80056ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80056b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80056c2:	d007      	beq.n	80056d4 <HAL_SPI_Init+0xa0>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056cc:	d002      	beq.n	80056d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056e4:	431a      	orrs	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	431a      	orrs	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	431a      	orrs	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800570c:	431a      	orrs	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005716:	ea42 0103 	orr.w	r1, r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	0c1b      	lsrs	r3, r3, #16
 8005730:	f003 0204 	and.w	r2, r3, #4
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	f003 0310 	and.w	r3, r3, #16
 800573c:	431a      	orrs	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	431a      	orrs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005750:	ea42 0103 	orr.w	r1, r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	4613      	mov	r3, r2
 8005788:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d110      	bne.n	80057b8 <HAL_SPI_Receive_IT+0x3c>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800579e:	d10b      	bne.n	80057b8 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2204      	movs	r2, #4
 80057a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80057a8:	88fb      	ldrh	r3, [r7, #6]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 f894 	bl	80058dc <HAL_SPI_TransmitReceive_IT>
 80057b4:	4603      	mov	r3, r0
 80057b6:	e089      	b.n	80058cc <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d101      	bne.n	80057c6 <HAL_SPI_Receive_IT+0x4a>
 80057c2:	2302      	movs	r3, #2
 80057c4:	e082      	b.n	80058cc <HAL_SPI_Receive_IT+0x150>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d002      	beq.n	80057e0 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80057da:	2302      	movs	r3, #2
 80057dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057de:	e070      	b.n	80058c2 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <HAL_SPI_Receive_IT+0x70>
 80057e6:	88fb      	ldrh	r3, [r7, #6]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d102      	bne.n	80057f2 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057f0:	e067      	b.n	80058c2 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2204      	movs	r2, #4
 80057f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	88fa      	ldrh	r2, [r7, #6]
 800580a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	88fa      	ldrh	r2, [r7, #6]
 8005812:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005836:	d90b      	bls.n	8005850 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005846:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4a22      	ldr	r2, [pc, #136]	; (80058d4 <HAL_SPI_Receive_IT+0x158>)
 800584c:	64da      	str	r2, [r3, #76]	; 0x4c
 800584e:	e00a      	b.n	8005866 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800585e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4a1d      	ldr	r2, [pc, #116]	; (80058d8 <HAL_SPI_Receive_IT+0x15c>)
 8005864:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800586e:	d10f      	bne.n	8005890 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800587e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800588e:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800589e:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058aa:	2b40      	cmp	r3, #64	; 0x40
 80058ac:	d008      	beq.n	80058c0 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	e000      	b.n	80058c2 <HAL_SPI_Receive_IT+0x146>
  }

error :
 80058c0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80058ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3718      	adds	r7, #24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	08005edd 	.word	0x08005edd
 80058d8:	08005e8d 	.word	0x08005e8d

080058dc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_SPI_TransmitReceive_IT+0x20>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e091      	b.n	8005a20 <HAL_SPI_TransmitReceive_IT+0x144>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800590a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005912:	7dbb      	ldrb	r3, [r7, #22]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d00d      	beq.n	8005934 <HAL_SPI_TransmitReceive_IT+0x58>
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800591e:	d106      	bne.n	800592e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d102      	bne.n	800592e <HAL_SPI_TransmitReceive_IT+0x52>
 8005928:	7dbb      	ldrb	r3, [r7, #22]
 800592a:	2b04      	cmp	r3, #4
 800592c:	d002      	beq.n	8005934 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800592e:	2302      	movs	r3, #2
 8005930:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005932:	e070      	b.n	8005a16 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d005      	beq.n	8005946 <HAL_SPI_TransmitReceive_IT+0x6a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <HAL_SPI_TransmitReceive_IT+0x6a>
 8005940:	887b      	ldrh	r3, [r7, #2]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d102      	bne.n	800594c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	75fb      	strb	r3, [r7, #23]
    goto error;
 800594a:	e064      	b.n	8005a16 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b04      	cmp	r3, #4
 8005956:	d003      	beq.n	8005960 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2205      	movs	r2, #5
 800595c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	887a      	ldrh	r2, [r7, #2]
 8005970:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	887a      	ldrh	r2, [r7, #2]
 8005976:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	887a      	ldrh	r2, [r7, #2]
 8005982:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	887a      	ldrh	r2, [r7, #2]
 800598a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005996:	d906      	bls.n	80059a6 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4a24      	ldr	r2, [pc, #144]	; (8005a2c <HAL_SPI_TransmitReceive_IT+0x150>)
 800599c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4a23      	ldr	r2, [pc, #140]	; (8005a30 <HAL_SPI_TransmitReceive_IT+0x154>)
 80059a2:	651a      	str	r2, [r3, #80]	; 0x50
 80059a4:	e005      	b.n	80059b2 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4a22      	ldr	r2, [pc, #136]	; (8005a34 <HAL_SPI_TransmitReceive_IT+0x158>)
 80059aa:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4a22      	ldr	r2, [pc, #136]	; (8005a38 <HAL_SPI_TransmitReceive_IT+0x15c>)
 80059b0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059ba:	d802      	bhi.n	80059c2 <HAL_SPI_TransmitReceive_IT+0xe6>
 80059bc:	887b      	ldrh	r3, [r7, #2]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d908      	bls.n	80059d4 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059d0:	605a      	str	r2, [r3, #4]
 80059d2:	e007      	b.n	80059e4 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059e2:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80059f2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fe:	2b40      	cmp	r3, #64	; 0x40
 8005a00:	d008      	beq.n	8005a14 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	e000      	b.n	8005a16 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8005a14:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	371c      	adds	r7, #28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	08005dc7 	.word	0x08005dc7
 8005a30:	08005e2d 	.word	0x08005e2d
 8005a34:	08005c77 	.word	0x08005c77
 8005a38:	08005d35 	.word	0x08005d35

08005a3c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b088      	sub	sp, #32
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10e      	bne.n	8005a7c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d009      	beq.n	8005a7c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d004      	beq.n	8005a7c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	4798      	blx	r3
    return;
 8005a7a:	e0ce      	b.n	8005c1a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d009      	beq.n	8005a9a <HAL_SPI_IRQHandler+0x5e>
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d004      	beq.n	8005a9a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	4798      	blx	r3
    return;
 8005a98:	e0bf      	b.n	8005c1a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10a      	bne.n	8005aba <HAL_SPI_IRQHandler+0x7e>
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d105      	bne.n	8005aba <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 80b0 	beq.w	8005c1a <HAL_SPI_IRQHandler+0x1de>
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	f003 0320 	and.w	r3, r3, #32
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 80aa 	beq.w	8005c1a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d023      	beq.n	8005b18 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	d011      	beq.n	8005b00 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ae0:	f043 0204 	orr.w	r2, r3, #4
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ae8:	2300      	movs	r3, #0
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	617b      	str	r3, [r7, #20]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	e00b      	b.n	8005b18 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b00:	2300      	movs	r3, #0
 8005b02:	613b      	str	r3, [r7, #16]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	613b      	str	r3, [r7, #16]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	693b      	ldr	r3, [r7, #16]
        return;
 8005b16:	e080      	b.n	8005c1a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	f003 0320 	and.w	r3, r3, #32
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d014      	beq.n	8005b4c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b26:	f043 0201 	orr.w	r2, r3, #1
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00c      	beq.n	8005b70 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b5a:	f043 0208 	orr.w	r2, r3, #8
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005b62:	2300      	movs	r3, #0
 8005b64:	60bb      	str	r3, [r7, #8]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	60bb      	str	r3, [r7, #8]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d04f      	beq.n	8005c18 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b86:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d104      	bne.n	8005ba4 <HAL_SPI_IRQHandler+0x168>
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d034      	beq.n	8005c0e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0203 	bic.w	r2, r2, #3
 8005bb2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d011      	beq.n	8005be0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc0:	4a17      	ldr	r2, [pc, #92]	; (8005c20 <HAL_SPI_IRQHandler+0x1e4>)
 8005bc2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7fd f835 	bl	8002c38 <HAL_DMA_Abort_IT>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d005      	beq.n	8005be0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d016      	beq.n	8005c16 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bec:	4a0c      	ldr	r2, [pc, #48]	; (8005c20 <HAL_SPI_IRQHandler+0x1e4>)
 8005bee:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7fd f81f 	bl	8002c38 <HAL_DMA_Abort_IT>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00a      	beq.n	8005c16 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005c0c:	e003      	b.n	8005c16 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f812 	bl	8005c38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005c14:	e000      	b.n	8005c18 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005c16:	bf00      	nop
    return;
 8005c18:	bf00      	nop
  }
}
 8005c1a:	3720      	adds	r7, #32
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	08005c4d 	.word	0x08005c4d

08005c24 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c58:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f7ff ffe5 	bl	8005c38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c6e:	bf00      	nop
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b082      	sub	sp, #8
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d923      	bls.n	8005cd2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	b292      	uxth	r2, r2
 8005c96:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9c:	1c9a      	adds	r2, r3, #2
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	3b02      	subs	r3, #2
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d11f      	bne.n	8005d00 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cce:	605a      	str	r2, [r3, #4]
 8005cd0:	e016      	b.n	8005d00 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f103 020c 	add.w	r2, r3, #12
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	7812      	ldrb	r2, [r2, #0]
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10f      	bne.n	8005d2c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d1a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d102      	bne.n	8005d2c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 faba 	bl	80062a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005d2c:	bf00      	nop
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d912      	bls.n	8005d6c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	881a      	ldrh	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d56:	1c9a      	adds	r2, r3, #2
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	3b02      	subs	r3, #2
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d6a:	e012      	b.n	8005d92 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	330c      	adds	r3, #12
 8005d76:	7812      	ldrb	r2, [r2, #0]
 8005d78:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d110      	bne.n	8005dbe <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005daa:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d102      	bne.n	8005dbe <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fa71 	bl	80062a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005dbe:	bf00      	nop
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68da      	ldr	r2, [r3, #12]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd8:	b292      	uxth	r2, r2
 8005dda:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de0:	1c9a      	adds	r2, r3, #2
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	3b01      	subs	r3, #1
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10f      	bne.n	8005e24 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e12:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d102      	bne.n	8005e24 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fa3e 	bl	80062a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005e24:	bf00      	nop
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e38:	881a      	ldrh	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e44:	1c9a      	adds	r2, r3, #2
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	3b01      	subs	r3, #1
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d110      	bne.n	8005e84 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e70:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d102      	bne.n	8005e84 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fa0e 	bl	80062a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005e84:	bf00      	nop
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f103 020c 	add.w	r2, r3, #12
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea0:	7812      	ldrb	r2, [r2, #0]
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d102      	bne.n	8005ed4 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fa28 	bl	8006324 <SPI_CloseRx_ISR>
  }
}
 8005ed4:	bf00      	nop
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	b292      	uxth	r2, r2
 8005ef0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	1c9a      	adds	r2, r3, #2
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d102      	bne.n	8005f20 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fa02 	bl	8006324 <SPI_CloseRx_ISR>
  }
}
 8005f20:	bf00      	nop
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b088      	sub	sp, #32
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	603b      	str	r3, [r7, #0]
 8005f34:	4613      	mov	r3, r2
 8005f36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f38:	f7fb fd6e 	bl	8001a18 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f40:	1a9b      	subs	r3, r3, r2
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	4413      	add	r3, r2
 8005f46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f48:	f7fb fd66 	bl	8001a18 <HAL_GetTick>
 8005f4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f4e:	4b39      	ldr	r3, [pc, #228]	; (8006034 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	015b      	lsls	r3, r3, #5
 8005f54:	0d1b      	lsrs	r3, r3, #20
 8005f56:	69fa      	ldr	r2, [r7, #28]
 8005f58:	fb02 f303 	mul.w	r3, r2, r3
 8005f5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f5e:	e054      	b.n	800600a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f66:	d050      	beq.n	800600a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f68:	f7fb fd56 	bl	8001a18 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d902      	bls.n	8005f7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d13d      	bne.n	8005ffa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f96:	d111      	bne.n	8005fbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fa0:	d004      	beq.n	8005fac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005faa:	d107      	bne.n	8005fbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc4:	d10f      	bne.n	8005fe6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fe4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e017      	b.n	800602a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006000:	2300      	movs	r3, #0
 8006002:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	3b01      	subs	r3, #1
 8006008:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689a      	ldr	r2, [r3, #8]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4013      	ands	r3, r2
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	429a      	cmp	r2, r3
 8006018:	bf0c      	ite	eq
 800601a:	2301      	moveq	r3, #1
 800601c:	2300      	movne	r3, #0
 800601e:	b2db      	uxtb	r3, r3
 8006020:	461a      	mov	r2, r3
 8006022:	79fb      	ldrb	r3, [r7, #7]
 8006024:	429a      	cmp	r2, r3
 8006026:	d19b      	bne.n	8005f60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3720      	adds	r7, #32
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	2000000c 	.word	0x2000000c

08006038 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08a      	sub	sp, #40	; 0x28
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006046:	2300      	movs	r3, #0
 8006048:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800604a:	f7fb fce5 	bl	8001a18 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	1a9b      	subs	r3, r3, r2
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	4413      	add	r3, r2
 8006058:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800605a:	f7fb fcdd 	bl	8001a18 <HAL_GetTick>
 800605e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	330c      	adds	r3, #12
 8006066:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006068:	4b3d      	ldr	r3, [pc, #244]	; (8006160 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	4613      	mov	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	00da      	lsls	r2, r3, #3
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	0d1b      	lsrs	r3, r3, #20
 8006078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800607a:	fb02 f303 	mul.w	r3, r2, r3
 800607e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006080:	e060      	b.n	8006144 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006088:	d107      	bne.n	800609a <SPI_WaitFifoStateUntilTimeout+0x62>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d104      	bne.n	800609a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	b2db      	uxtb	r3, r3
 8006096:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006098:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060a0:	d050      	beq.n	8006144 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060a2:	f7fb fcb9 	bl	8001a18 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d902      	bls.n	80060b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d13d      	bne.n	8006134 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060d0:	d111      	bne.n	80060f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060da:	d004      	beq.n	80060e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060e4:	d107      	bne.n	80060f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060fe:	d10f      	bne.n	8006120 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800611e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e010      	b.n	8006156 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	3b01      	subs	r3, #1
 8006142:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689a      	ldr	r2, [r3, #8]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	4013      	ands	r3, r2
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	429a      	cmp	r2, r3
 8006152:	d196      	bne.n	8006082 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3728      	adds	r7, #40	; 0x28
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	2000000c 	.word	0x2000000c

08006164 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af02      	add	r7, sp, #8
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006178:	d111      	bne.n	800619e <SPI_EndRxTransaction+0x3a>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006182:	d004      	beq.n	800618e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800618c:	d107      	bne.n	800619e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800619c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2200      	movs	r2, #0
 80061a6:	2180      	movs	r1, #128	; 0x80
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f7ff febd 	bl	8005f28 <SPI_WaitFlagStateUntilTimeout>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d007      	beq.n	80061c4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061b8:	f043 0220 	orr.w	r2, r3, #32
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e023      	b.n	800620c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061cc:	d11d      	bne.n	800620a <SPI_EndRxTransaction+0xa6>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061d6:	d004      	beq.n	80061e2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e0:	d113      	bne.n	800620a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f7ff ff22 	bl	8006038 <SPI_WaitFifoStateUntilTimeout>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d007      	beq.n	800620a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061fe:	f043 0220 	orr.w	r2, r3, #32
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e000      	b.n	800620c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af02      	add	r7, sp, #8
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2200      	movs	r2, #0
 8006228:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f7ff ff03 	bl	8006038 <SPI_WaitFifoStateUntilTimeout>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d007      	beq.n	8006248 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800623c:	f043 0220 	orr.w	r2, r3, #32
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e027      	b.n	8006298 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2200      	movs	r2, #0
 8006250:	2180      	movs	r1, #128	; 0x80
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f7ff fe68 	bl	8005f28 <SPI_WaitFlagStateUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d007      	beq.n	800626e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006262:	f043 0220 	orr.w	r2, r3, #32
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e014      	b.n	8006298 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2200      	movs	r2, #0
 8006276:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f7ff fedc 	bl	8006038 <SPI_WaitFifoStateUntilTimeout>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d007      	beq.n	8006296 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800628a:	f043 0220 	orr.w	r2, r3, #32
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e000      	b.n	8006298 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062a8:	f7fb fbb6 	bl	8001a18 <HAL_GetTick>
 80062ac:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0220 	bic.w	r2, r2, #32
 80062bc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	2164      	movs	r1, #100	; 0x64
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff ffa6 	bl	8006214 <SPI_EndRxTxTransaction>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062d2:	f043 0220 	orr.w	r2, r3, #32
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d115      	bne.n	800630e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b04      	cmp	r3, #4
 80062ec:	d107      	bne.n	80062fe <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7f9 fff8 	bl	80002ec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80062fc:	e00e      	b.n	800631c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7ff fc8c 	bl	8005c24 <HAL_SPI_TxRxCpltCallback>
}
 800630c:	e006      	b.n	800631c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7ff fc8e 	bl	8005c38 <HAL_SPI_ErrorCallback>
}
 800631c:	bf00      	nop
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800633a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800633c:	f7fb fb6c 	bl	8001a18 <HAL_GetTick>
 8006340:	4603      	mov	r3, r0
 8006342:	461a      	mov	r2, r3
 8006344:	2164      	movs	r1, #100	; 0x64
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7ff ff0c 	bl	8006164 <SPI_EndRxTransaction>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d005      	beq.n	800635e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006356:	f043 0220 	orr.w	r2, r3, #32
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7f9 ffbc 	bl	80002ec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006374:	e002      	b.n	800637c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7ff fc5e 	bl	8005c38 <HAL_SPI_ErrorCallback>
}
 800637c:	bf00      	nop
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e049      	b.n	800642a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d106      	bne.n	80063b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7fb f8a4 	bl	80014f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	3304      	adds	r3, #4
 80063c0:	4619      	mov	r1, r3
 80063c2:	4610      	mov	r0, r2
 80063c4:	f000 fbe4 	bl	8006b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
	...

08006434 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b01      	cmp	r3, #1
 8006446:	d001      	beq.n	800644c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e047      	b.n	80064dc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a23      	ldr	r2, [pc, #140]	; (80064e8 <HAL_TIM_Base_Start+0xb4>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d01d      	beq.n	800649a <HAL_TIM_Base_Start+0x66>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006466:	d018      	beq.n	800649a <HAL_TIM_Base_Start+0x66>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a1f      	ldr	r2, [pc, #124]	; (80064ec <HAL_TIM_Base_Start+0xb8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d013      	beq.n	800649a <HAL_TIM_Base_Start+0x66>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a1e      	ldr	r2, [pc, #120]	; (80064f0 <HAL_TIM_Base_Start+0xbc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d00e      	beq.n	800649a <HAL_TIM_Base_Start+0x66>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a1c      	ldr	r2, [pc, #112]	; (80064f4 <HAL_TIM_Base_Start+0xc0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d009      	beq.n	800649a <HAL_TIM_Base_Start+0x66>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a1b      	ldr	r2, [pc, #108]	; (80064f8 <HAL_TIM_Base_Start+0xc4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d004      	beq.n	800649a <HAL_TIM_Base_Start+0x66>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a19      	ldr	r2, [pc, #100]	; (80064fc <HAL_TIM_Base_Start+0xc8>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d115      	bne.n	80064c6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	4b17      	ldr	r3, [pc, #92]	; (8006500 <HAL_TIM_Base_Start+0xcc>)
 80064a2:	4013      	ands	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2b06      	cmp	r3, #6
 80064aa:	d015      	beq.n	80064d8 <HAL_TIM_Base_Start+0xa4>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b2:	d011      	beq.n	80064d8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0201 	orr.w	r2, r2, #1
 80064c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c4:	e008      	b.n	80064d8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 0201 	orr.w	r2, r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	e000      	b.n	80064da <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	40012c00 	.word	0x40012c00
 80064ec:	40000400 	.word	0x40000400
 80064f0:	40000800 	.word	0x40000800
 80064f4:	40000c00 	.word	0x40000c00
 80064f8:	40013400 	.word	0x40013400
 80064fc:	40014000 	.word	0x40014000
 8006500:	00010007 	.word	0x00010007

08006504 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e049      	b.n	80065aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d106      	bne.n	8006530 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f841 	bl	80065b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3304      	adds	r3, #4
 8006540:	4619      	mov	r1, r3
 8006542:	4610      	mov	r0, r2
 8006544:	f000 fb24 	bl	8006b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b083      	sub	sp, #12
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80065ba:	bf00      	nop
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
	...

080065c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d109      	bne.n	80065ec <HAL_TIM_PWM_Start+0x24>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	bf14      	ite	ne
 80065e4:	2301      	movne	r3, #1
 80065e6:	2300      	moveq	r3, #0
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	e03c      	b.n	8006666 <HAL_TIM_PWM_Start+0x9e>
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d109      	bne.n	8006606 <HAL_TIM_PWM_Start+0x3e>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	bf14      	ite	ne
 80065fe:	2301      	movne	r3, #1
 8006600:	2300      	moveq	r3, #0
 8006602:	b2db      	uxtb	r3, r3
 8006604:	e02f      	b.n	8006666 <HAL_TIM_PWM_Start+0x9e>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2b08      	cmp	r3, #8
 800660a:	d109      	bne.n	8006620 <HAL_TIM_PWM_Start+0x58>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b01      	cmp	r3, #1
 8006616:	bf14      	ite	ne
 8006618:	2301      	movne	r3, #1
 800661a:	2300      	moveq	r3, #0
 800661c:	b2db      	uxtb	r3, r3
 800661e:	e022      	b.n	8006666 <HAL_TIM_PWM_Start+0x9e>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2b0c      	cmp	r3, #12
 8006624:	d109      	bne.n	800663a <HAL_TIM_PWM_Start+0x72>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b01      	cmp	r3, #1
 8006630:	bf14      	ite	ne
 8006632:	2301      	movne	r3, #1
 8006634:	2300      	moveq	r3, #0
 8006636:	b2db      	uxtb	r3, r3
 8006638:	e015      	b.n	8006666 <HAL_TIM_PWM_Start+0x9e>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b10      	cmp	r3, #16
 800663e:	d109      	bne.n	8006654 <HAL_TIM_PWM_Start+0x8c>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b01      	cmp	r3, #1
 800664a:	bf14      	ite	ne
 800664c:	2301      	movne	r3, #1
 800664e:	2300      	moveq	r3, #0
 8006650:	b2db      	uxtb	r3, r3
 8006652:	e008      	b.n	8006666 <HAL_TIM_PWM_Start+0x9e>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b01      	cmp	r3, #1
 800665e:	bf14      	ite	ne
 8006660:	2301      	movne	r3, #1
 8006662:	2300      	moveq	r3, #0
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e09c      	b.n	80067a8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d104      	bne.n	800667e <HAL_TIM_PWM_Start+0xb6>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2202      	movs	r2, #2
 8006678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800667c:	e023      	b.n	80066c6 <HAL_TIM_PWM_Start+0xfe>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b04      	cmp	r3, #4
 8006682:	d104      	bne.n	800668e <HAL_TIM_PWM_Start+0xc6>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800668c:	e01b      	b.n	80066c6 <HAL_TIM_PWM_Start+0xfe>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b08      	cmp	r3, #8
 8006692:	d104      	bne.n	800669e <HAL_TIM_PWM_Start+0xd6>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2202      	movs	r2, #2
 8006698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800669c:	e013      	b.n	80066c6 <HAL_TIM_PWM_Start+0xfe>
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b0c      	cmp	r3, #12
 80066a2:	d104      	bne.n	80066ae <HAL_TIM_PWM_Start+0xe6>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066ac:	e00b      	b.n	80066c6 <HAL_TIM_PWM_Start+0xfe>
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	2b10      	cmp	r3, #16
 80066b2:	d104      	bne.n	80066be <HAL_TIM_PWM_Start+0xf6>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066bc:	e003      	b.n	80066c6 <HAL_TIM_PWM_Start+0xfe>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2202      	movs	r2, #2
 80066c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2201      	movs	r2, #1
 80066cc:	6839      	ldr	r1, [r7, #0]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 fe68 	bl	80073a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a35      	ldr	r2, [pc, #212]	; (80067b0 <HAL_TIM_PWM_Start+0x1e8>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d013      	beq.n	8006706 <HAL_TIM_PWM_Start+0x13e>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a34      	ldr	r2, [pc, #208]	; (80067b4 <HAL_TIM_PWM_Start+0x1ec>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d00e      	beq.n	8006706 <HAL_TIM_PWM_Start+0x13e>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a32      	ldr	r2, [pc, #200]	; (80067b8 <HAL_TIM_PWM_Start+0x1f0>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d009      	beq.n	8006706 <HAL_TIM_PWM_Start+0x13e>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a31      	ldr	r2, [pc, #196]	; (80067bc <HAL_TIM_PWM_Start+0x1f4>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d004      	beq.n	8006706 <HAL_TIM_PWM_Start+0x13e>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a2f      	ldr	r2, [pc, #188]	; (80067c0 <HAL_TIM_PWM_Start+0x1f8>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d101      	bne.n	800670a <HAL_TIM_PWM_Start+0x142>
 8006706:	2301      	movs	r3, #1
 8006708:	e000      	b.n	800670c <HAL_TIM_PWM_Start+0x144>
 800670a:	2300      	movs	r3, #0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d007      	beq.n	8006720 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800671e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a22      	ldr	r2, [pc, #136]	; (80067b0 <HAL_TIM_PWM_Start+0x1e8>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d01d      	beq.n	8006766 <HAL_TIM_PWM_Start+0x19e>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006732:	d018      	beq.n	8006766 <HAL_TIM_PWM_Start+0x19e>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a22      	ldr	r2, [pc, #136]	; (80067c4 <HAL_TIM_PWM_Start+0x1fc>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d013      	beq.n	8006766 <HAL_TIM_PWM_Start+0x19e>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a21      	ldr	r2, [pc, #132]	; (80067c8 <HAL_TIM_PWM_Start+0x200>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d00e      	beq.n	8006766 <HAL_TIM_PWM_Start+0x19e>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a1f      	ldr	r2, [pc, #124]	; (80067cc <HAL_TIM_PWM_Start+0x204>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d009      	beq.n	8006766 <HAL_TIM_PWM_Start+0x19e>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a17      	ldr	r2, [pc, #92]	; (80067b4 <HAL_TIM_PWM_Start+0x1ec>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d004      	beq.n	8006766 <HAL_TIM_PWM_Start+0x19e>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a15      	ldr	r2, [pc, #84]	; (80067b8 <HAL_TIM_PWM_Start+0x1f0>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d115      	bne.n	8006792 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689a      	ldr	r2, [r3, #8]
 800676c:	4b18      	ldr	r3, [pc, #96]	; (80067d0 <HAL_TIM_PWM_Start+0x208>)
 800676e:	4013      	ands	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2b06      	cmp	r3, #6
 8006776:	d015      	beq.n	80067a4 <HAL_TIM_PWM_Start+0x1dc>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800677e:	d011      	beq.n	80067a4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f042 0201 	orr.w	r2, r2, #1
 800678e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006790:	e008      	b.n	80067a4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f042 0201 	orr.w	r2, r2, #1
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	e000      	b.n	80067a6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	40012c00 	.word	0x40012c00
 80067b4:	40013400 	.word	0x40013400
 80067b8:	40014000 	.word	0x40014000
 80067bc:	40014400 	.word	0x40014400
 80067c0:	40014800 	.word	0x40014800
 80067c4:	40000400 	.word	0x40000400
 80067c8:	40000800 	.word	0x40000800
 80067cc:	40000c00 	.word	0x40000c00
 80067d0:	00010007 	.word	0x00010007

080067d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067e0:	2300      	movs	r3, #0
 80067e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d101      	bne.n	80067f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067ee:	2302      	movs	r3, #2
 80067f0:	e0ff      	b.n	80069f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b14      	cmp	r3, #20
 80067fe:	f200 80f0 	bhi.w	80069e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006802:	a201      	add	r2, pc, #4	; (adr r2, 8006808 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006808:	0800685d 	.word	0x0800685d
 800680c:	080069e3 	.word	0x080069e3
 8006810:	080069e3 	.word	0x080069e3
 8006814:	080069e3 	.word	0x080069e3
 8006818:	0800689d 	.word	0x0800689d
 800681c:	080069e3 	.word	0x080069e3
 8006820:	080069e3 	.word	0x080069e3
 8006824:	080069e3 	.word	0x080069e3
 8006828:	080068df 	.word	0x080068df
 800682c:	080069e3 	.word	0x080069e3
 8006830:	080069e3 	.word	0x080069e3
 8006834:	080069e3 	.word	0x080069e3
 8006838:	0800691f 	.word	0x0800691f
 800683c:	080069e3 	.word	0x080069e3
 8006840:	080069e3 	.word	0x080069e3
 8006844:	080069e3 	.word	0x080069e3
 8006848:	08006961 	.word	0x08006961
 800684c:	080069e3 	.word	0x080069e3
 8006850:	080069e3 	.word	0x080069e3
 8006854:	080069e3 	.word	0x080069e3
 8006858:	080069a1 	.word	0x080069a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68b9      	ldr	r1, [r7, #8]
 8006862:	4618      	mov	r0, r3
 8006864:	f000 fa2e 	bl	8006cc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	699a      	ldr	r2, [r3, #24]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f042 0208 	orr.w	r2, r2, #8
 8006876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	699a      	ldr	r2, [r3, #24]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 0204 	bic.w	r2, r2, #4
 8006886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6999      	ldr	r1, [r3, #24]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	691a      	ldr	r2, [r3, #16]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	619a      	str	r2, [r3, #24]
      break;
 800689a:	e0a5      	b.n	80069e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68b9      	ldr	r1, [r7, #8]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fa9e 	bl	8006de4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699a      	ldr	r2, [r3, #24]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	699a      	ldr	r2, [r3, #24]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6999      	ldr	r1, [r3, #24]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	021a      	lsls	r2, r3, #8
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	619a      	str	r2, [r3, #24]
      break;
 80068dc:	e084      	b.n	80069e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68b9      	ldr	r1, [r7, #8]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 fb07 	bl	8006ef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69da      	ldr	r2, [r3, #28]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f042 0208 	orr.w	r2, r2, #8
 80068f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	69da      	ldr	r2, [r3, #28]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 0204 	bic.w	r2, r2, #4
 8006908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	69d9      	ldr	r1, [r3, #28]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	691a      	ldr	r2, [r3, #16]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	61da      	str	r2, [r3, #28]
      break;
 800691c:	e064      	b.n	80069e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68b9      	ldr	r1, [r7, #8]
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fb6f 	bl	8007008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	69da      	ldr	r2, [r3, #28]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69da      	ldr	r2, [r3, #28]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	69d9      	ldr	r1, [r3, #28]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	021a      	lsls	r2, r3, #8
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	430a      	orrs	r2, r1
 800695c:	61da      	str	r2, [r3, #28]
      break;
 800695e:	e043      	b.n	80069e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68b9      	ldr	r1, [r7, #8]
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fbb8 	bl	80070dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 0208 	orr.w	r2, r2, #8
 800697a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 0204 	bic.w	r2, r2, #4
 800698a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	691a      	ldr	r2, [r3, #16]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800699e:	e023      	b.n	80069e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68b9      	ldr	r1, [r7, #8]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fbfc 	bl	80071a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	021a      	lsls	r2, r3, #8
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	430a      	orrs	r2, r1
 80069de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069e0:	e002      	b.n	80069e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	75fb      	strb	r3, [r7, #23]
      break;
 80069e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop

080069fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a06:	2300      	movs	r3, #0
 8006a08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d101      	bne.n	8006a18 <HAL_TIM_ConfigClockSource+0x1c>
 8006a14:	2302      	movs	r3, #2
 8006a16:	e0b6      	b.n	8006b86 <HAL_TIM_ConfigClockSource+0x18a>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2202      	movs	r2, #2
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a54:	d03e      	beq.n	8006ad4 <HAL_TIM_ConfigClockSource+0xd8>
 8006a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a5a:	f200 8087 	bhi.w	8006b6c <HAL_TIM_ConfigClockSource+0x170>
 8006a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a62:	f000 8086 	beq.w	8006b72 <HAL_TIM_ConfigClockSource+0x176>
 8006a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6a:	d87f      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x170>
 8006a6c:	2b70      	cmp	r3, #112	; 0x70
 8006a6e:	d01a      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0xaa>
 8006a70:	2b70      	cmp	r3, #112	; 0x70
 8006a72:	d87b      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x170>
 8006a74:	2b60      	cmp	r3, #96	; 0x60
 8006a76:	d050      	beq.n	8006b1a <HAL_TIM_ConfigClockSource+0x11e>
 8006a78:	2b60      	cmp	r3, #96	; 0x60
 8006a7a:	d877      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x170>
 8006a7c:	2b50      	cmp	r3, #80	; 0x50
 8006a7e:	d03c      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0xfe>
 8006a80:	2b50      	cmp	r3, #80	; 0x50
 8006a82:	d873      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x170>
 8006a84:	2b40      	cmp	r3, #64	; 0x40
 8006a86:	d058      	beq.n	8006b3a <HAL_TIM_ConfigClockSource+0x13e>
 8006a88:	2b40      	cmp	r3, #64	; 0x40
 8006a8a:	d86f      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x170>
 8006a8c:	2b30      	cmp	r3, #48	; 0x30
 8006a8e:	d064      	beq.n	8006b5a <HAL_TIM_ConfigClockSource+0x15e>
 8006a90:	2b30      	cmp	r3, #48	; 0x30
 8006a92:	d86b      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x170>
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d060      	beq.n	8006b5a <HAL_TIM_ConfigClockSource+0x15e>
 8006a98:	2b20      	cmp	r3, #32
 8006a9a:	d867      	bhi.n	8006b6c <HAL_TIM_ConfigClockSource+0x170>
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d05c      	beq.n	8006b5a <HAL_TIM_ConfigClockSource+0x15e>
 8006aa0:	2b10      	cmp	r3, #16
 8006aa2:	d05a      	beq.n	8006b5a <HAL_TIM_ConfigClockSource+0x15e>
 8006aa4:	e062      	b.n	8006b6c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ab6:	f000 fc55 	bl	8007364 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ac8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	609a      	str	r2, [r3, #8]
      break;
 8006ad2:	e04f      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ae4:	f000 fc3e 	bl	8007364 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006af6:	609a      	str	r2, [r3, #8]
      break;
 8006af8:	e03c      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b06:	461a      	mov	r2, r3
 8006b08:	f000 fbb2 	bl	8007270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2150      	movs	r1, #80	; 0x50
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 fc0b 	bl	800732e <TIM_ITRx_SetConfig>
      break;
 8006b18:	e02c      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b26:	461a      	mov	r2, r3
 8006b28:	f000 fbd1 	bl	80072ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2160      	movs	r1, #96	; 0x60
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 fbfb 	bl	800732e <TIM_ITRx_SetConfig>
      break;
 8006b38:	e01c      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b46:	461a      	mov	r2, r3
 8006b48:	f000 fb92 	bl	8007270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2140      	movs	r1, #64	; 0x40
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 fbeb 	bl	800732e <TIM_ITRx_SetConfig>
      break;
 8006b58:	e00c      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4619      	mov	r1, r3
 8006b64:	4610      	mov	r0, r2
 8006b66:	f000 fbe2 	bl	800732e <TIM_ITRx_SetConfig>
      break;
 8006b6a:	e003      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b70:	e000      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006b72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
	...

08006b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a40      	ldr	r2, [pc, #256]	; (8006ca4 <TIM_Base_SetConfig+0x114>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d013      	beq.n	8006bd0 <TIM_Base_SetConfig+0x40>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bae:	d00f      	beq.n	8006bd0 <TIM_Base_SetConfig+0x40>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a3d      	ldr	r2, [pc, #244]	; (8006ca8 <TIM_Base_SetConfig+0x118>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d00b      	beq.n	8006bd0 <TIM_Base_SetConfig+0x40>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a3c      	ldr	r2, [pc, #240]	; (8006cac <TIM_Base_SetConfig+0x11c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d007      	beq.n	8006bd0 <TIM_Base_SetConfig+0x40>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a3b      	ldr	r2, [pc, #236]	; (8006cb0 <TIM_Base_SetConfig+0x120>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d003      	beq.n	8006bd0 <TIM_Base_SetConfig+0x40>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a3a      	ldr	r2, [pc, #232]	; (8006cb4 <TIM_Base_SetConfig+0x124>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d108      	bne.n	8006be2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a2f      	ldr	r2, [pc, #188]	; (8006ca4 <TIM_Base_SetConfig+0x114>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d01f      	beq.n	8006c2a <TIM_Base_SetConfig+0x9a>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf0:	d01b      	beq.n	8006c2a <TIM_Base_SetConfig+0x9a>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a2c      	ldr	r2, [pc, #176]	; (8006ca8 <TIM_Base_SetConfig+0x118>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d017      	beq.n	8006c2a <TIM_Base_SetConfig+0x9a>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a2b      	ldr	r2, [pc, #172]	; (8006cac <TIM_Base_SetConfig+0x11c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d013      	beq.n	8006c2a <TIM_Base_SetConfig+0x9a>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a2a      	ldr	r2, [pc, #168]	; (8006cb0 <TIM_Base_SetConfig+0x120>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00f      	beq.n	8006c2a <TIM_Base_SetConfig+0x9a>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a29      	ldr	r2, [pc, #164]	; (8006cb4 <TIM_Base_SetConfig+0x124>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00b      	beq.n	8006c2a <TIM_Base_SetConfig+0x9a>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a28      	ldr	r2, [pc, #160]	; (8006cb8 <TIM_Base_SetConfig+0x128>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d007      	beq.n	8006c2a <TIM_Base_SetConfig+0x9a>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a27      	ldr	r2, [pc, #156]	; (8006cbc <TIM_Base_SetConfig+0x12c>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d003      	beq.n	8006c2a <TIM_Base_SetConfig+0x9a>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a26      	ldr	r2, [pc, #152]	; (8006cc0 <TIM_Base_SetConfig+0x130>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d108      	bne.n	8006c3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a10      	ldr	r2, [pc, #64]	; (8006ca4 <TIM_Base_SetConfig+0x114>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d00f      	beq.n	8006c88 <TIM_Base_SetConfig+0xf8>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a12      	ldr	r2, [pc, #72]	; (8006cb4 <TIM_Base_SetConfig+0x124>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d00b      	beq.n	8006c88 <TIM_Base_SetConfig+0xf8>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a11      	ldr	r2, [pc, #68]	; (8006cb8 <TIM_Base_SetConfig+0x128>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d007      	beq.n	8006c88 <TIM_Base_SetConfig+0xf8>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a10      	ldr	r2, [pc, #64]	; (8006cbc <TIM_Base_SetConfig+0x12c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d003      	beq.n	8006c88 <TIM_Base_SetConfig+0xf8>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a0f      	ldr	r2, [pc, #60]	; (8006cc0 <TIM_Base_SetConfig+0x130>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d103      	bne.n	8006c90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	691a      	ldr	r2, [r3, #16]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	615a      	str	r2, [r3, #20]
}
 8006c96:	bf00      	nop
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	40012c00 	.word	0x40012c00
 8006ca8:	40000400 	.word	0x40000400
 8006cac:	40000800 	.word	0x40000800
 8006cb0:	40000c00 	.word	0x40000c00
 8006cb4:	40013400 	.word	0x40013400
 8006cb8:	40014000 	.word	0x40014000
 8006cbc:	40014400 	.word	0x40014400
 8006cc0:	40014800 	.word	0x40014800

08006cc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	f023 0201 	bic.w	r2, r3, #1
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0303 	bic.w	r3, r3, #3
 8006cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f023 0302 	bic.w	r3, r3, #2
 8006d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a2c      	ldr	r2, [pc, #176]	; (8006dd0 <TIM_OC1_SetConfig+0x10c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d00f      	beq.n	8006d44 <TIM_OC1_SetConfig+0x80>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a2b      	ldr	r2, [pc, #172]	; (8006dd4 <TIM_OC1_SetConfig+0x110>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00b      	beq.n	8006d44 <TIM_OC1_SetConfig+0x80>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a2a      	ldr	r2, [pc, #168]	; (8006dd8 <TIM_OC1_SetConfig+0x114>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d007      	beq.n	8006d44 <TIM_OC1_SetConfig+0x80>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a29      	ldr	r2, [pc, #164]	; (8006ddc <TIM_OC1_SetConfig+0x118>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <TIM_OC1_SetConfig+0x80>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a28      	ldr	r2, [pc, #160]	; (8006de0 <TIM_OC1_SetConfig+0x11c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d10c      	bne.n	8006d5e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f023 0308 	bic.w	r3, r3, #8
 8006d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f023 0304 	bic.w	r3, r3, #4
 8006d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a1b      	ldr	r2, [pc, #108]	; (8006dd0 <TIM_OC1_SetConfig+0x10c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d00f      	beq.n	8006d86 <TIM_OC1_SetConfig+0xc2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a1a      	ldr	r2, [pc, #104]	; (8006dd4 <TIM_OC1_SetConfig+0x110>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d00b      	beq.n	8006d86 <TIM_OC1_SetConfig+0xc2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a19      	ldr	r2, [pc, #100]	; (8006dd8 <TIM_OC1_SetConfig+0x114>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d007      	beq.n	8006d86 <TIM_OC1_SetConfig+0xc2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a18      	ldr	r2, [pc, #96]	; (8006ddc <TIM_OC1_SetConfig+0x118>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d003      	beq.n	8006d86 <TIM_OC1_SetConfig+0xc2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a17      	ldr	r2, [pc, #92]	; (8006de0 <TIM_OC1_SetConfig+0x11c>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d111      	bne.n	8006daa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	621a      	str	r2, [r3, #32]
}
 8006dc4:	bf00      	nop
 8006dc6:	371c      	adds	r7, #28
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	40012c00 	.word	0x40012c00
 8006dd4:	40013400 	.word	0x40013400
 8006dd8:	40014000 	.word	0x40014000
 8006ddc:	40014400 	.word	0x40014400
 8006de0:	40014800 	.word	0x40014800

08006de4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	f023 0210 	bic.w	r2, r3, #16
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	021b      	lsls	r3, r3, #8
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f023 0320 	bic.w	r3, r3, #32
 8006e32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	011b      	lsls	r3, r3, #4
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a28      	ldr	r2, [pc, #160]	; (8006ee4 <TIM_OC2_SetConfig+0x100>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d003      	beq.n	8006e50 <TIM_OC2_SetConfig+0x6c>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a27      	ldr	r2, [pc, #156]	; (8006ee8 <TIM_OC2_SetConfig+0x104>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d10d      	bne.n	8006e6c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	011b      	lsls	r3, r3, #4
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a1d      	ldr	r2, [pc, #116]	; (8006ee4 <TIM_OC2_SetConfig+0x100>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d00f      	beq.n	8006e94 <TIM_OC2_SetConfig+0xb0>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a1c      	ldr	r2, [pc, #112]	; (8006ee8 <TIM_OC2_SetConfig+0x104>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d00b      	beq.n	8006e94 <TIM_OC2_SetConfig+0xb0>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a1b      	ldr	r2, [pc, #108]	; (8006eec <TIM_OC2_SetConfig+0x108>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d007      	beq.n	8006e94 <TIM_OC2_SetConfig+0xb0>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a1a      	ldr	r2, [pc, #104]	; (8006ef0 <TIM_OC2_SetConfig+0x10c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d003      	beq.n	8006e94 <TIM_OC2_SetConfig+0xb0>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a19      	ldr	r2, [pc, #100]	; (8006ef4 <TIM_OC2_SetConfig+0x110>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d113      	bne.n	8006ebc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	621a      	str	r2, [r3, #32]
}
 8006ed6:	bf00      	nop
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	40012c00 	.word	0x40012c00
 8006ee8:	40013400 	.word	0x40013400
 8006eec:	40014000 	.word	0x40014000
 8006ef0:	40014400 	.word	0x40014400
 8006ef4:	40014800 	.word	0x40014800

08006ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f023 0303 	bic.w	r3, r3, #3
 8006f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	021b      	lsls	r3, r3, #8
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a27      	ldr	r2, [pc, #156]	; (8006ff4 <TIM_OC3_SetConfig+0xfc>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d003      	beq.n	8006f62 <TIM_OC3_SetConfig+0x6a>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a26      	ldr	r2, [pc, #152]	; (8006ff8 <TIM_OC3_SetConfig+0x100>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d10d      	bne.n	8006f7e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	021b      	lsls	r3, r3, #8
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a1c      	ldr	r2, [pc, #112]	; (8006ff4 <TIM_OC3_SetConfig+0xfc>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d00f      	beq.n	8006fa6 <TIM_OC3_SetConfig+0xae>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a1b      	ldr	r2, [pc, #108]	; (8006ff8 <TIM_OC3_SetConfig+0x100>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d00b      	beq.n	8006fa6 <TIM_OC3_SetConfig+0xae>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a1a      	ldr	r2, [pc, #104]	; (8006ffc <TIM_OC3_SetConfig+0x104>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d007      	beq.n	8006fa6 <TIM_OC3_SetConfig+0xae>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a19      	ldr	r2, [pc, #100]	; (8007000 <TIM_OC3_SetConfig+0x108>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d003      	beq.n	8006fa6 <TIM_OC3_SetConfig+0xae>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a18      	ldr	r2, [pc, #96]	; (8007004 <TIM_OC3_SetConfig+0x10c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d113      	bne.n	8006fce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	011b      	lsls	r3, r3, #4
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	011b      	lsls	r3, r3, #4
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	621a      	str	r2, [r3, #32]
}
 8006fe8:	bf00      	nop
 8006fea:	371c      	adds	r7, #28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	40012c00 	.word	0x40012c00
 8006ff8:	40013400 	.word	0x40013400
 8006ffc:	40014000 	.word	0x40014000
 8007000:	40014400 	.word	0x40014400
 8007004:	40014800 	.word	0x40014800

08007008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800703a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	021b      	lsls	r3, r3, #8
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	4313      	orrs	r3, r2
 800704e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	031b      	lsls	r3, r3, #12
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	4313      	orrs	r3, r2
 8007062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a18      	ldr	r2, [pc, #96]	; (80070c8 <TIM_OC4_SetConfig+0xc0>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d00f      	beq.n	800708c <TIM_OC4_SetConfig+0x84>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a17      	ldr	r2, [pc, #92]	; (80070cc <TIM_OC4_SetConfig+0xc4>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d00b      	beq.n	800708c <TIM_OC4_SetConfig+0x84>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a16      	ldr	r2, [pc, #88]	; (80070d0 <TIM_OC4_SetConfig+0xc8>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d007      	beq.n	800708c <TIM_OC4_SetConfig+0x84>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a15      	ldr	r2, [pc, #84]	; (80070d4 <TIM_OC4_SetConfig+0xcc>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d003      	beq.n	800708c <TIM_OC4_SetConfig+0x84>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a14      	ldr	r2, [pc, #80]	; (80070d8 <TIM_OC4_SetConfig+0xd0>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d109      	bne.n	80070a0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007092:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	019b      	lsls	r3, r3, #6
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	4313      	orrs	r3, r2
 800709e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	621a      	str	r2, [r3, #32]
}
 80070ba:	bf00      	nop
 80070bc:	371c      	adds	r7, #28
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	40012c00 	.word	0x40012c00
 80070cc:	40013400 	.word	0x40013400
 80070d0:	40014000 	.word	0x40014000
 80070d4:	40014400 	.word	0x40014400
 80070d8:	40014800 	.word	0x40014800

080070dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800710a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800710e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	4313      	orrs	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007120:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	041b      	lsls	r3, r3, #16
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	4313      	orrs	r3, r2
 800712c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a17      	ldr	r2, [pc, #92]	; (8007190 <TIM_OC5_SetConfig+0xb4>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d00f      	beq.n	8007156 <TIM_OC5_SetConfig+0x7a>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a16      	ldr	r2, [pc, #88]	; (8007194 <TIM_OC5_SetConfig+0xb8>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d00b      	beq.n	8007156 <TIM_OC5_SetConfig+0x7a>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a15      	ldr	r2, [pc, #84]	; (8007198 <TIM_OC5_SetConfig+0xbc>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d007      	beq.n	8007156 <TIM_OC5_SetConfig+0x7a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a14      	ldr	r2, [pc, #80]	; (800719c <TIM_OC5_SetConfig+0xc0>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d003      	beq.n	8007156 <TIM_OC5_SetConfig+0x7a>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a13      	ldr	r2, [pc, #76]	; (80071a0 <TIM_OC5_SetConfig+0xc4>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d109      	bne.n	800716a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800715c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	021b      	lsls	r3, r3, #8
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	4313      	orrs	r3, r2
 8007168:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	621a      	str	r2, [r3, #32]
}
 8007184:	bf00      	nop
 8007186:	371c      	adds	r7, #28
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	40012c00 	.word	0x40012c00
 8007194:	40013400 	.word	0x40013400
 8007198:	40014000 	.word	0x40014000
 800719c:	40014400 	.word	0x40014400
 80071a0:	40014800 	.word	0x40014800

080071a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	021b      	lsls	r3, r3, #8
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	051b      	lsls	r3, r3, #20
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a18      	ldr	r2, [pc, #96]	; (800725c <TIM_OC6_SetConfig+0xb8>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d00f      	beq.n	8007220 <TIM_OC6_SetConfig+0x7c>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a17      	ldr	r2, [pc, #92]	; (8007260 <TIM_OC6_SetConfig+0xbc>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d00b      	beq.n	8007220 <TIM_OC6_SetConfig+0x7c>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a16      	ldr	r2, [pc, #88]	; (8007264 <TIM_OC6_SetConfig+0xc0>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d007      	beq.n	8007220 <TIM_OC6_SetConfig+0x7c>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a15      	ldr	r2, [pc, #84]	; (8007268 <TIM_OC6_SetConfig+0xc4>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d003      	beq.n	8007220 <TIM_OC6_SetConfig+0x7c>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a14      	ldr	r2, [pc, #80]	; (800726c <TIM_OC6_SetConfig+0xc8>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d109      	bne.n	8007234 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007226:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	029b      	lsls	r3, r3, #10
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	4313      	orrs	r3, r2
 8007232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	621a      	str	r2, [r3, #32]
}
 800724e:	bf00      	nop
 8007250:	371c      	adds	r7, #28
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	40012c00 	.word	0x40012c00
 8007260:	40013400 	.word	0x40013400
 8007264:	40014000 	.word	0x40014000
 8007268:	40014400 	.word	0x40014400
 800726c:	40014800 	.word	0x40014800

08007270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	f023 0201 	bic.w	r2, r3, #1
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800729a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	011b      	lsls	r3, r3, #4
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f023 030a 	bic.w	r3, r3, #10
 80072ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	621a      	str	r2, [r3, #32]
}
 80072c2:	bf00      	nop
 80072c4:	371c      	adds	r7, #28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b087      	sub	sp, #28
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	60b9      	str	r1, [r7, #8]
 80072d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	f023 0210 	bic.w	r2, r3, #16
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	031b      	lsls	r3, r3, #12
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	4313      	orrs	r3, r2
 8007302:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800730a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	011b      	lsls	r3, r3, #4
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	4313      	orrs	r3, r2
 8007314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	621a      	str	r2, [r3, #32]
}
 8007322:	bf00      	nop
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800732e:	b480      	push	{r7}
 8007330:	b085      	sub	sp, #20
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4313      	orrs	r3, r2
 800734c:	f043 0307 	orr.w	r3, r3, #7
 8007350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	609a      	str	r2, [r3, #8]
}
 8007358:	bf00      	nop
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800737e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	021a      	lsls	r2, r3, #8
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	431a      	orrs	r2, r3
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4313      	orrs	r3, r2
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	4313      	orrs	r3, r2
 8007390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	609a      	str	r2, [r3, #8]
}
 8007398:	bf00      	nop
 800739a:	371c      	adds	r7, #28
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f003 031f 	and.w	r3, r3, #31
 80073b6:	2201      	movs	r2, #1
 80073b8:	fa02 f303 	lsl.w	r3, r2, r3
 80073bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6a1a      	ldr	r2, [r3, #32]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	43db      	mvns	r3, r3
 80073c6:	401a      	ands	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6a1a      	ldr	r2, [r3, #32]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f003 031f 	and.w	r3, r3, #31
 80073d6:	6879      	ldr	r1, [r7, #4]
 80073d8:	fa01 f303 	lsl.w	r3, r1, r3
 80073dc:	431a      	orrs	r2, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	621a      	str	r2, [r3, #32]
}
 80073e2:	bf00      	nop
 80073e4:	371c      	adds	r7, #28
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
	...

080073f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007400:	2b01      	cmp	r3, #1
 8007402:	d101      	bne.n	8007408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007404:	2302      	movs	r3, #2
 8007406:	e068      	b.n	80074da <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2202      	movs	r2, #2
 8007414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a2e      	ldr	r2, [pc, #184]	; (80074e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d004      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a2d      	ldr	r2, [pc, #180]	; (80074ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d108      	bne.n	800744e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007442:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	4313      	orrs	r3, r2
 800744c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007454:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	4313      	orrs	r3, r2
 800745e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a1e      	ldr	r2, [pc, #120]	; (80074e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d01d      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800747a:	d018      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a1b      	ldr	r2, [pc, #108]	; (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d013      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a1a      	ldr	r2, [pc, #104]	; (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d00e      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a18      	ldr	r2, [pc, #96]	; (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d009      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a13      	ldr	r2, [pc, #76]	; (80074ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d004      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a14      	ldr	r2, [pc, #80]	; (80074fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d10c      	bne.n	80074c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	4313      	orrs	r3, r2
 80074be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	40012c00 	.word	0x40012c00
 80074ec:	40013400 	.word	0x40013400
 80074f0:	40000400 	.word	0x40000400
 80074f4:	40000800 	.word	0x40000800
 80074f8:	40000c00 	.word	0x40000c00
 80074fc:	40014000 	.word	0x40014000

08007500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e042      	b.n	8007598 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007518:	2b00      	cmp	r3, #0
 800751a:	d106      	bne.n	800752a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7fa f83f 	bl	80015a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2224      	movs	r2, #36	; 0x24
 800752e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 0201 	bic.w	r2, r2, #1
 8007540:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f82c 	bl	80075a0 <UART_SetConfig>
 8007548:	4603      	mov	r3, r0
 800754a:	2b01      	cmp	r3, #1
 800754c:	d101      	bne.n	8007552 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e022      	b.n	8007598 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007556:	2b00      	cmp	r3, #0
 8007558:	d002      	beq.n	8007560 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fb1c 	bl	8007b98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800756e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	689a      	ldr	r2, [r3, #8]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800757e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f042 0201 	orr.w	r2, r2, #1
 800758e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fba3 	bl	8007cdc <UART_CheckIdleState>
 8007596:	4603      	mov	r3, r0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075a4:	b08c      	sub	sp, #48	; 0x30
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075aa:	2300      	movs	r3, #0
 80075ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	431a      	orrs	r2, r3
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	431a      	orrs	r2, r3
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	69db      	ldr	r3, [r3, #28]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	4baa      	ldr	r3, [pc, #680]	; (8007878 <UART_SetConfig+0x2d8>)
 80075d0:	4013      	ands	r3, r2
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	6812      	ldr	r2, [r2, #0]
 80075d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075d8:	430b      	orrs	r3, r1
 80075da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	68da      	ldr	r2, [r3, #12]
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a9f      	ldr	r2, [pc, #636]	; (800787c <UART_SetConfig+0x2dc>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d004      	beq.n	800760c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007608:	4313      	orrs	r3, r2
 800760a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007616:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	6812      	ldr	r2, [r2, #0]
 800761e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007620:	430b      	orrs	r3, r1
 8007622:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762a:	f023 010f 	bic.w	r1, r3, #15
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a90      	ldr	r2, [pc, #576]	; (8007880 <UART_SetConfig+0x2e0>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d125      	bne.n	8007690 <UART_SetConfig+0xf0>
 8007644:	4b8f      	ldr	r3, [pc, #572]	; (8007884 <UART_SetConfig+0x2e4>)
 8007646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800764a:	f003 0303 	and.w	r3, r3, #3
 800764e:	2b03      	cmp	r3, #3
 8007650:	d81a      	bhi.n	8007688 <UART_SetConfig+0xe8>
 8007652:	a201      	add	r2, pc, #4	; (adr r2, 8007658 <UART_SetConfig+0xb8>)
 8007654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007658:	08007669 	.word	0x08007669
 800765c:	08007679 	.word	0x08007679
 8007660:	08007671 	.word	0x08007671
 8007664:	08007681 	.word	0x08007681
 8007668:	2301      	movs	r3, #1
 800766a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800766e:	e116      	b.n	800789e <UART_SetConfig+0x2fe>
 8007670:	2302      	movs	r3, #2
 8007672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007676:	e112      	b.n	800789e <UART_SetConfig+0x2fe>
 8007678:	2304      	movs	r3, #4
 800767a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800767e:	e10e      	b.n	800789e <UART_SetConfig+0x2fe>
 8007680:	2308      	movs	r3, #8
 8007682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007686:	e10a      	b.n	800789e <UART_SetConfig+0x2fe>
 8007688:	2310      	movs	r3, #16
 800768a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800768e:	e106      	b.n	800789e <UART_SetConfig+0x2fe>
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a7c      	ldr	r2, [pc, #496]	; (8007888 <UART_SetConfig+0x2e8>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d138      	bne.n	800770c <UART_SetConfig+0x16c>
 800769a:	4b7a      	ldr	r3, [pc, #488]	; (8007884 <UART_SetConfig+0x2e4>)
 800769c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076a0:	f003 030c 	and.w	r3, r3, #12
 80076a4:	2b0c      	cmp	r3, #12
 80076a6:	d82d      	bhi.n	8007704 <UART_SetConfig+0x164>
 80076a8:	a201      	add	r2, pc, #4	; (adr r2, 80076b0 <UART_SetConfig+0x110>)
 80076aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ae:	bf00      	nop
 80076b0:	080076e5 	.word	0x080076e5
 80076b4:	08007705 	.word	0x08007705
 80076b8:	08007705 	.word	0x08007705
 80076bc:	08007705 	.word	0x08007705
 80076c0:	080076f5 	.word	0x080076f5
 80076c4:	08007705 	.word	0x08007705
 80076c8:	08007705 	.word	0x08007705
 80076cc:	08007705 	.word	0x08007705
 80076d0:	080076ed 	.word	0x080076ed
 80076d4:	08007705 	.word	0x08007705
 80076d8:	08007705 	.word	0x08007705
 80076dc:	08007705 	.word	0x08007705
 80076e0:	080076fd 	.word	0x080076fd
 80076e4:	2300      	movs	r3, #0
 80076e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076ea:	e0d8      	b.n	800789e <UART_SetConfig+0x2fe>
 80076ec:	2302      	movs	r3, #2
 80076ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076f2:	e0d4      	b.n	800789e <UART_SetConfig+0x2fe>
 80076f4:	2304      	movs	r3, #4
 80076f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076fa:	e0d0      	b.n	800789e <UART_SetConfig+0x2fe>
 80076fc:	2308      	movs	r3, #8
 80076fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007702:	e0cc      	b.n	800789e <UART_SetConfig+0x2fe>
 8007704:	2310      	movs	r3, #16
 8007706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800770a:	e0c8      	b.n	800789e <UART_SetConfig+0x2fe>
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a5e      	ldr	r2, [pc, #376]	; (800788c <UART_SetConfig+0x2ec>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d125      	bne.n	8007762 <UART_SetConfig+0x1c2>
 8007716:	4b5b      	ldr	r3, [pc, #364]	; (8007884 <UART_SetConfig+0x2e4>)
 8007718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007720:	2b30      	cmp	r3, #48	; 0x30
 8007722:	d016      	beq.n	8007752 <UART_SetConfig+0x1b2>
 8007724:	2b30      	cmp	r3, #48	; 0x30
 8007726:	d818      	bhi.n	800775a <UART_SetConfig+0x1ba>
 8007728:	2b20      	cmp	r3, #32
 800772a:	d00a      	beq.n	8007742 <UART_SetConfig+0x1a2>
 800772c:	2b20      	cmp	r3, #32
 800772e:	d814      	bhi.n	800775a <UART_SetConfig+0x1ba>
 8007730:	2b00      	cmp	r3, #0
 8007732:	d002      	beq.n	800773a <UART_SetConfig+0x19a>
 8007734:	2b10      	cmp	r3, #16
 8007736:	d008      	beq.n	800774a <UART_SetConfig+0x1aa>
 8007738:	e00f      	b.n	800775a <UART_SetConfig+0x1ba>
 800773a:	2300      	movs	r3, #0
 800773c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007740:	e0ad      	b.n	800789e <UART_SetConfig+0x2fe>
 8007742:	2302      	movs	r3, #2
 8007744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007748:	e0a9      	b.n	800789e <UART_SetConfig+0x2fe>
 800774a:	2304      	movs	r3, #4
 800774c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007750:	e0a5      	b.n	800789e <UART_SetConfig+0x2fe>
 8007752:	2308      	movs	r3, #8
 8007754:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007758:	e0a1      	b.n	800789e <UART_SetConfig+0x2fe>
 800775a:	2310      	movs	r3, #16
 800775c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007760:	e09d      	b.n	800789e <UART_SetConfig+0x2fe>
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a4a      	ldr	r2, [pc, #296]	; (8007890 <UART_SetConfig+0x2f0>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d125      	bne.n	80077b8 <UART_SetConfig+0x218>
 800776c:	4b45      	ldr	r3, [pc, #276]	; (8007884 <UART_SetConfig+0x2e4>)
 800776e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007772:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007776:	2bc0      	cmp	r3, #192	; 0xc0
 8007778:	d016      	beq.n	80077a8 <UART_SetConfig+0x208>
 800777a:	2bc0      	cmp	r3, #192	; 0xc0
 800777c:	d818      	bhi.n	80077b0 <UART_SetConfig+0x210>
 800777e:	2b80      	cmp	r3, #128	; 0x80
 8007780:	d00a      	beq.n	8007798 <UART_SetConfig+0x1f8>
 8007782:	2b80      	cmp	r3, #128	; 0x80
 8007784:	d814      	bhi.n	80077b0 <UART_SetConfig+0x210>
 8007786:	2b00      	cmp	r3, #0
 8007788:	d002      	beq.n	8007790 <UART_SetConfig+0x1f0>
 800778a:	2b40      	cmp	r3, #64	; 0x40
 800778c:	d008      	beq.n	80077a0 <UART_SetConfig+0x200>
 800778e:	e00f      	b.n	80077b0 <UART_SetConfig+0x210>
 8007790:	2300      	movs	r3, #0
 8007792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007796:	e082      	b.n	800789e <UART_SetConfig+0x2fe>
 8007798:	2302      	movs	r3, #2
 800779a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800779e:	e07e      	b.n	800789e <UART_SetConfig+0x2fe>
 80077a0:	2304      	movs	r3, #4
 80077a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077a6:	e07a      	b.n	800789e <UART_SetConfig+0x2fe>
 80077a8:	2308      	movs	r3, #8
 80077aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077ae:	e076      	b.n	800789e <UART_SetConfig+0x2fe>
 80077b0:	2310      	movs	r3, #16
 80077b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077b6:	e072      	b.n	800789e <UART_SetConfig+0x2fe>
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a35      	ldr	r2, [pc, #212]	; (8007894 <UART_SetConfig+0x2f4>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d12a      	bne.n	8007818 <UART_SetConfig+0x278>
 80077c2:	4b30      	ldr	r3, [pc, #192]	; (8007884 <UART_SetConfig+0x2e4>)
 80077c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077d0:	d01a      	beq.n	8007808 <UART_SetConfig+0x268>
 80077d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077d6:	d81b      	bhi.n	8007810 <UART_SetConfig+0x270>
 80077d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077dc:	d00c      	beq.n	80077f8 <UART_SetConfig+0x258>
 80077de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077e2:	d815      	bhi.n	8007810 <UART_SetConfig+0x270>
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d003      	beq.n	80077f0 <UART_SetConfig+0x250>
 80077e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ec:	d008      	beq.n	8007800 <UART_SetConfig+0x260>
 80077ee:	e00f      	b.n	8007810 <UART_SetConfig+0x270>
 80077f0:	2300      	movs	r3, #0
 80077f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077f6:	e052      	b.n	800789e <UART_SetConfig+0x2fe>
 80077f8:	2302      	movs	r3, #2
 80077fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077fe:	e04e      	b.n	800789e <UART_SetConfig+0x2fe>
 8007800:	2304      	movs	r3, #4
 8007802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007806:	e04a      	b.n	800789e <UART_SetConfig+0x2fe>
 8007808:	2308      	movs	r3, #8
 800780a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800780e:	e046      	b.n	800789e <UART_SetConfig+0x2fe>
 8007810:	2310      	movs	r3, #16
 8007812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007816:	e042      	b.n	800789e <UART_SetConfig+0x2fe>
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a17      	ldr	r2, [pc, #92]	; (800787c <UART_SetConfig+0x2dc>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d13a      	bne.n	8007898 <UART_SetConfig+0x2f8>
 8007822:	4b18      	ldr	r3, [pc, #96]	; (8007884 <UART_SetConfig+0x2e4>)
 8007824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007828:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800782c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007830:	d01a      	beq.n	8007868 <UART_SetConfig+0x2c8>
 8007832:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007836:	d81b      	bhi.n	8007870 <UART_SetConfig+0x2d0>
 8007838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800783c:	d00c      	beq.n	8007858 <UART_SetConfig+0x2b8>
 800783e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007842:	d815      	bhi.n	8007870 <UART_SetConfig+0x2d0>
 8007844:	2b00      	cmp	r3, #0
 8007846:	d003      	beq.n	8007850 <UART_SetConfig+0x2b0>
 8007848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800784c:	d008      	beq.n	8007860 <UART_SetConfig+0x2c0>
 800784e:	e00f      	b.n	8007870 <UART_SetConfig+0x2d0>
 8007850:	2300      	movs	r3, #0
 8007852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007856:	e022      	b.n	800789e <UART_SetConfig+0x2fe>
 8007858:	2302      	movs	r3, #2
 800785a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800785e:	e01e      	b.n	800789e <UART_SetConfig+0x2fe>
 8007860:	2304      	movs	r3, #4
 8007862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007866:	e01a      	b.n	800789e <UART_SetConfig+0x2fe>
 8007868:	2308      	movs	r3, #8
 800786a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800786e:	e016      	b.n	800789e <UART_SetConfig+0x2fe>
 8007870:	2310      	movs	r3, #16
 8007872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007876:	e012      	b.n	800789e <UART_SetConfig+0x2fe>
 8007878:	cfff69f3 	.word	0xcfff69f3
 800787c:	40008000 	.word	0x40008000
 8007880:	40013800 	.word	0x40013800
 8007884:	40021000 	.word	0x40021000
 8007888:	40004400 	.word	0x40004400
 800788c:	40004800 	.word	0x40004800
 8007890:	40004c00 	.word	0x40004c00
 8007894:	40005000 	.word	0x40005000
 8007898:	2310      	movs	r3, #16
 800789a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4aae      	ldr	r2, [pc, #696]	; (8007b5c <UART_SetConfig+0x5bc>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	f040 8097 	bne.w	80079d8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80078ae:	2b08      	cmp	r3, #8
 80078b0:	d823      	bhi.n	80078fa <UART_SetConfig+0x35a>
 80078b2:	a201      	add	r2, pc, #4	; (adr r2, 80078b8 <UART_SetConfig+0x318>)
 80078b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b8:	080078dd 	.word	0x080078dd
 80078bc:	080078fb 	.word	0x080078fb
 80078c0:	080078e5 	.word	0x080078e5
 80078c4:	080078fb 	.word	0x080078fb
 80078c8:	080078eb 	.word	0x080078eb
 80078cc:	080078fb 	.word	0x080078fb
 80078d0:	080078fb 	.word	0x080078fb
 80078d4:	080078fb 	.word	0x080078fb
 80078d8:	080078f3 	.word	0x080078f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078dc:	f7fd f896 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 80078e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078e2:	e010      	b.n	8007906 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078e4:	4b9e      	ldr	r3, [pc, #632]	; (8007b60 <UART_SetConfig+0x5c0>)
 80078e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80078e8:	e00d      	b.n	8007906 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078ea:	f7fc fff7 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 80078ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078f0:	e009      	b.n	8007906 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80078f8:	e005      	b.n	8007906 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80078fa:	2300      	movs	r3, #0
 80078fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007904:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 8130 	beq.w	8007b6e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007912:	4a94      	ldr	r2, [pc, #592]	; (8007b64 <UART_SetConfig+0x5c4>)
 8007914:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007918:	461a      	mov	r2, r3
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007920:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	685a      	ldr	r2, [r3, #4]
 8007926:	4613      	mov	r3, r2
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	4413      	add	r3, r2
 800792c:	69ba      	ldr	r2, [r7, #24]
 800792e:	429a      	cmp	r2, r3
 8007930:	d305      	bcc.n	800793e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007938:	69ba      	ldr	r2, [r7, #24]
 800793a:	429a      	cmp	r2, r3
 800793c:	d903      	bls.n	8007946 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007944:	e113      	b.n	8007b6e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	2200      	movs	r2, #0
 800794a:	60bb      	str	r3, [r7, #8]
 800794c:	60fa      	str	r2, [r7, #12]
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007952:	4a84      	ldr	r2, [pc, #528]	; (8007b64 <UART_SetConfig+0x5c4>)
 8007954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007958:	b29b      	uxth	r3, r3
 800795a:	2200      	movs	r2, #0
 800795c:	603b      	str	r3, [r7, #0]
 800795e:	607a      	str	r2, [r7, #4]
 8007960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007964:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007968:	f7f8 fc28 	bl	80001bc <__aeabi_uldivmod>
 800796c:	4602      	mov	r2, r0
 800796e:	460b      	mov	r3, r1
 8007970:	4610      	mov	r0, r2
 8007972:	4619      	mov	r1, r3
 8007974:	f04f 0200 	mov.w	r2, #0
 8007978:	f04f 0300 	mov.w	r3, #0
 800797c:	020b      	lsls	r3, r1, #8
 800797e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007982:	0202      	lsls	r2, r0, #8
 8007984:	6979      	ldr	r1, [r7, #20]
 8007986:	6849      	ldr	r1, [r1, #4]
 8007988:	0849      	lsrs	r1, r1, #1
 800798a:	2000      	movs	r0, #0
 800798c:	460c      	mov	r4, r1
 800798e:	4605      	mov	r5, r0
 8007990:	eb12 0804 	adds.w	r8, r2, r4
 8007994:	eb43 0905 	adc.w	r9, r3, r5
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	469a      	mov	sl, r3
 80079a0:	4693      	mov	fp, r2
 80079a2:	4652      	mov	r2, sl
 80079a4:	465b      	mov	r3, fp
 80079a6:	4640      	mov	r0, r8
 80079a8:	4649      	mov	r1, r9
 80079aa:	f7f8 fc07 	bl	80001bc <__aeabi_uldivmod>
 80079ae:	4602      	mov	r2, r0
 80079b0:	460b      	mov	r3, r1
 80079b2:	4613      	mov	r3, r2
 80079b4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079bc:	d308      	bcc.n	80079d0 <UART_SetConfig+0x430>
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079c4:	d204      	bcs.n	80079d0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	6a3a      	ldr	r2, [r7, #32]
 80079cc:	60da      	str	r2, [r3, #12]
 80079ce:	e0ce      	b.n	8007b6e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80079d6:	e0ca      	b.n	8007b6e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	69db      	ldr	r3, [r3, #28]
 80079dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079e0:	d166      	bne.n	8007ab0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80079e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80079e6:	2b08      	cmp	r3, #8
 80079e8:	d827      	bhi.n	8007a3a <UART_SetConfig+0x49a>
 80079ea:	a201      	add	r2, pc, #4	; (adr r2, 80079f0 <UART_SetConfig+0x450>)
 80079ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f0:	08007a15 	.word	0x08007a15
 80079f4:	08007a1d 	.word	0x08007a1d
 80079f8:	08007a25 	.word	0x08007a25
 80079fc:	08007a3b 	.word	0x08007a3b
 8007a00:	08007a2b 	.word	0x08007a2b
 8007a04:	08007a3b 	.word	0x08007a3b
 8007a08:	08007a3b 	.word	0x08007a3b
 8007a0c:	08007a3b 	.word	0x08007a3b
 8007a10:	08007a33 	.word	0x08007a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a14:	f7fc fffa 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 8007a18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a1a:	e014      	b.n	8007a46 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a1c:	f7fd f80c 	bl	8004a38 <HAL_RCC_GetPCLK2Freq>
 8007a20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a22:	e010      	b.n	8007a46 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a24:	4b4e      	ldr	r3, [pc, #312]	; (8007b60 <UART_SetConfig+0x5c0>)
 8007a26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a28:	e00d      	b.n	8007a46 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a2a:	f7fc ff57 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8007a2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a30:	e009      	b.n	8007a46 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a38:	e005      	b.n	8007a46 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007a44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 8090 	beq.w	8007b6e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a52:	4a44      	ldr	r2, [pc, #272]	; (8007b64 <UART_SetConfig+0x5c4>)
 8007a54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a60:	005a      	lsls	r2, r3, #1
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	085b      	lsrs	r3, r3, #1
 8007a68:	441a      	add	r2, r3
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a72:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a74:	6a3b      	ldr	r3, [r7, #32]
 8007a76:	2b0f      	cmp	r3, #15
 8007a78:	d916      	bls.n	8007aa8 <UART_SetConfig+0x508>
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a80:	d212      	bcs.n	8007aa8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a82:	6a3b      	ldr	r3, [r7, #32]
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	f023 030f 	bic.w	r3, r3, #15
 8007a8a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a8c:	6a3b      	ldr	r3, [r7, #32]
 8007a8e:	085b      	lsrs	r3, r3, #1
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	f003 0307 	and.w	r3, r3, #7
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	8bfb      	ldrh	r3, [r7, #30]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	8bfa      	ldrh	r2, [r7, #30]
 8007aa4:	60da      	str	r2, [r3, #12]
 8007aa6:	e062      	b.n	8007b6e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007aae:	e05e      	b.n	8007b6e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ab0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ab4:	2b08      	cmp	r3, #8
 8007ab6:	d828      	bhi.n	8007b0a <UART_SetConfig+0x56a>
 8007ab8:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <UART_SetConfig+0x520>)
 8007aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abe:	bf00      	nop
 8007ac0:	08007ae5 	.word	0x08007ae5
 8007ac4:	08007aed 	.word	0x08007aed
 8007ac8:	08007af5 	.word	0x08007af5
 8007acc:	08007b0b 	.word	0x08007b0b
 8007ad0:	08007afb 	.word	0x08007afb
 8007ad4:	08007b0b 	.word	0x08007b0b
 8007ad8:	08007b0b 	.word	0x08007b0b
 8007adc:	08007b0b 	.word	0x08007b0b
 8007ae0:	08007b03 	.word	0x08007b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ae4:	f7fc ff92 	bl	8004a0c <HAL_RCC_GetPCLK1Freq>
 8007ae8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007aea:	e014      	b.n	8007b16 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007aec:	f7fc ffa4 	bl	8004a38 <HAL_RCC_GetPCLK2Freq>
 8007af0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007af2:	e010      	b.n	8007b16 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007af4:	4b1a      	ldr	r3, [pc, #104]	; (8007b60 <UART_SetConfig+0x5c0>)
 8007af6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007af8:	e00d      	b.n	8007b16 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007afa:	f7fc feef 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8007afe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b00:	e009      	b.n	8007b16 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007b08:	e005      	b.n	8007b16 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007b14:	bf00      	nop
    }

    if (pclk != 0U)
 8007b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d028      	beq.n	8007b6e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b20:	4a10      	ldr	r2, [pc, #64]	; (8007b64 <UART_SetConfig+0x5c4>)
 8007b22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b26:	461a      	mov	r2, r3
 8007b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	085b      	lsrs	r3, r3, #1
 8007b34:	441a      	add	r2, r3
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b3e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	2b0f      	cmp	r3, #15
 8007b44:	d910      	bls.n	8007b68 <UART_SetConfig+0x5c8>
 8007b46:	6a3b      	ldr	r3, [r7, #32]
 8007b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b4c:	d20c      	bcs.n	8007b68 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b4e:	6a3b      	ldr	r3, [r7, #32]
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	60da      	str	r2, [r3, #12]
 8007b58:	e009      	b.n	8007b6e <UART_SetConfig+0x5ce>
 8007b5a:	bf00      	nop
 8007b5c:	40008000 	.word	0x40008000
 8007b60:	00f42400 	.word	0x00f42400
 8007b64:	08008488 	.word	0x08008488
      }
      else
      {
        ret = HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	2200      	movs	r2, #0
 8007b82:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	2200      	movs	r2, #0
 8007b88:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007b8a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3730      	adds	r7, #48	; 0x30
 8007b92:	46bd      	mov	sp, r7
 8007b94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007b98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00a      	beq.n	8007bc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc6:	f003 0302 	and.w	r3, r3, #2
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00a      	beq.n	8007be4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	430a      	orrs	r2, r1
 8007be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be8:	f003 0304 	and.w	r3, r3, #4
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00a      	beq.n	8007c06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	430a      	orrs	r2, r1
 8007c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0a:	f003 0308 	and.w	r3, r3, #8
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00a      	beq.n	8007c28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	430a      	orrs	r2, r1
 8007c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2c:	f003 0310 	and.w	r3, r3, #16
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00a      	beq.n	8007c4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	430a      	orrs	r2, r1
 8007c48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4e:	f003 0320 	and.w	r3, r3, #32
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00a      	beq.n	8007c6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	430a      	orrs	r2, r1
 8007c6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d01a      	beq.n	8007cae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	430a      	orrs	r2, r1
 8007c8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c96:	d10a      	bne.n	8007cae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00a      	beq.n	8007cd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	430a      	orrs	r2, r1
 8007cce:	605a      	str	r2, [r3, #4]
  }
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af02      	add	r7, sp, #8
 8007ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cec:	f7f9 fe94 	bl	8001a18 <HAL_GetTick>
 8007cf0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0308 	and.w	r3, r3, #8
 8007cfc:	2b08      	cmp	r3, #8
 8007cfe:	d10e      	bne.n	8007d1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f82f 	bl	8007d72 <UART_WaitOnFlagUntilTimeout>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e025      	b.n	8007d6a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0304 	and.w	r3, r3, #4
 8007d28:	2b04      	cmp	r3, #4
 8007d2a:	d10e      	bne.n	8007d4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f819 	bl	8007d72 <UART_WaitOnFlagUntilTimeout>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d001      	beq.n	8007d4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e00f      	b.n	8007d6a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2220      	movs	r2, #32
 8007d56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b09c      	sub	sp, #112	; 0x70
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	60f8      	str	r0, [r7, #12]
 8007d7a:	60b9      	str	r1, [r7, #8]
 8007d7c:	603b      	str	r3, [r7, #0]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d82:	e0a9      	b.n	8007ed8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d8a:	f000 80a5 	beq.w	8007ed8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d8e:	f7f9 fe43 	bl	8001a18 <HAL_GetTick>
 8007d92:	4602      	mov	r2, r0
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d302      	bcc.n	8007da4 <UART_WaitOnFlagUntilTimeout+0x32>
 8007d9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d140      	bne.n	8007e26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dac:	e853 3f00 	ldrex	r3, [r3]
 8007db0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007db4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007db8:	667b      	str	r3, [r7, #100]	; 0x64
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dc4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007dc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007dca:	e841 2300 	strex	r3, r2, [r1]
 8007dce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1e6      	bne.n	8007da4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3308      	adds	r3, #8
 8007ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007de0:	e853 3f00 	ldrex	r3, [r3]
 8007de4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de8:	f023 0301 	bic.w	r3, r3, #1
 8007dec:	663b      	str	r3, [r7, #96]	; 0x60
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	3308      	adds	r3, #8
 8007df4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007df6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007df8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007dfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dfe:	e841 2300 	strex	r3, r2, [r1]
 8007e02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1e5      	bne.n	8007dd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2220      	movs	r2, #32
 8007e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2220      	movs	r2, #32
 8007e16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e069      	b.n	8007efa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0304 	and.w	r3, r3, #4
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d051      	beq.n	8007ed8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e42:	d149      	bne.n	8007ed8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e4c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e56:	e853 3f00 	ldrex	r3, [r3]
 8007e5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e74:	e841 2300 	strex	r3, r2, [r1]
 8007e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1e6      	bne.n	8007e4e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	3308      	adds	r3, #8
 8007e86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	e853 3f00 	ldrex	r3, [r3]
 8007e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	f023 0301 	bic.w	r3, r3, #1
 8007e96:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3308      	adds	r3, #8
 8007e9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ea0:	623a      	str	r2, [r7, #32]
 8007ea2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea4:	69f9      	ldr	r1, [r7, #28]
 8007ea6:	6a3a      	ldr	r2, [r7, #32]
 8007ea8:	e841 2300 	strex	r3, r2, [r1]
 8007eac:	61bb      	str	r3, [r7, #24]
   return(result);
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1e5      	bne.n	8007e80 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2220      	movs	r2, #32
 8007eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2220      	movs	r2, #32
 8007ec0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	e010      	b.n	8007efa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	69da      	ldr	r2, [r3, #28]
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	bf0c      	ite	eq
 8007ee8:	2301      	moveq	r3, #1
 8007eea:	2300      	movne	r3, #0
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	461a      	mov	r2, r3
 8007ef0:	79fb      	ldrb	r3, [r7, #7]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	f43f af46 	beq.w	8007d84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3770      	adds	r7, #112	; 0x70
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b085      	sub	sp, #20
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d101      	bne.n	8007f18 <HAL_UARTEx_DisableFifoMode+0x16>
 8007f14:	2302      	movs	r3, #2
 8007f16:	e027      	b.n	8007f68 <HAL_UARTEx_DisableFifoMode+0x66>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2224      	movs	r2, #36	; 0x24
 8007f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f022 0201 	bic.w	r2, r2, #1
 8007f3e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007f46:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d101      	bne.n	8007f8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f88:	2302      	movs	r3, #2
 8007f8a:	e02d      	b.n	8007fe8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2224      	movs	r2, #36	; 0x24
 8007f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f022 0201 	bic.w	r2, r2, #1
 8007fb2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f84f 	bl	800806c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2220      	movs	r2, #32
 8007fda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008000:	2b01      	cmp	r3, #1
 8008002:	d101      	bne.n	8008008 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008004:	2302      	movs	r3, #2
 8008006:	e02d      	b.n	8008064 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2224      	movs	r2, #36	; 0x24
 8008014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f022 0201 	bic.w	r2, r2, #1
 800802e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	430a      	orrs	r2, r1
 8008042:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f811 	bl	800806c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2220      	movs	r2, #32
 8008056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008078:	2b00      	cmp	r3, #0
 800807a:	d108      	bne.n	800808e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800808c:	e031      	b.n	80080f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800808e:	2308      	movs	r3, #8
 8008090:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008092:	2308      	movs	r3, #8
 8008094:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	0e5b      	lsrs	r3, r3, #25
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	f003 0307 	and.w	r3, r3, #7
 80080a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	0f5b      	lsrs	r3, r3, #29
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	f003 0307 	and.w	r3, r3, #7
 80080b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080b6:	7bbb      	ldrb	r3, [r7, #14]
 80080b8:	7b3a      	ldrb	r2, [r7, #12]
 80080ba:	4911      	ldr	r1, [pc, #68]	; (8008100 <UARTEx_SetNbDataToProcess+0x94>)
 80080bc:	5c8a      	ldrb	r2, [r1, r2]
 80080be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080c2:	7b3a      	ldrb	r2, [r7, #12]
 80080c4:	490f      	ldr	r1, [pc, #60]	; (8008104 <UARTEx_SetNbDataToProcess+0x98>)
 80080c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
 80080d6:	7b7a      	ldrb	r2, [r7, #13]
 80080d8:	4909      	ldr	r1, [pc, #36]	; (8008100 <UARTEx_SetNbDataToProcess+0x94>)
 80080da:	5c8a      	ldrb	r2, [r1, r2]
 80080dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080e0:	7b7a      	ldrb	r2, [r7, #13]
 80080e2:	4908      	ldr	r1, [pc, #32]	; (8008104 <UARTEx_SetNbDataToProcess+0x98>)
 80080e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80080f2:	bf00      	nop
 80080f4:	3714      	adds	r7, #20
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	080084a0 	.word	0x080084a0
 8008104:	080084a8 	.word	0x080084a8

08008108 <__libc_init_array>:
 8008108:	b570      	push	{r4, r5, r6, lr}
 800810a:	4d0d      	ldr	r5, [pc, #52]	; (8008140 <__libc_init_array+0x38>)
 800810c:	4c0d      	ldr	r4, [pc, #52]	; (8008144 <__libc_init_array+0x3c>)
 800810e:	1b64      	subs	r4, r4, r5
 8008110:	10a4      	asrs	r4, r4, #2
 8008112:	2600      	movs	r6, #0
 8008114:	42a6      	cmp	r6, r4
 8008116:	d109      	bne.n	800812c <__libc_init_array+0x24>
 8008118:	4d0b      	ldr	r5, [pc, #44]	; (8008148 <__libc_init_array+0x40>)
 800811a:	4c0c      	ldr	r4, [pc, #48]	; (800814c <__libc_init_array+0x44>)
 800811c:	f000 f984 	bl	8008428 <_init>
 8008120:	1b64      	subs	r4, r4, r5
 8008122:	10a4      	asrs	r4, r4, #2
 8008124:	2600      	movs	r6, #0
 8008126:	42a6      	cmp	r6, r4
 8008128:	d105      	bne.n	8008136 <__libc_init_array+0x2e>
 800812a:	bd70      	pop	{r4, r5, r6, pc}
 800812c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008130:	4798      	blx	r3
 8008132:	3601      	adds	r6, #1
 8008134:	e7ee      	b.n	8008114 <__libc_init_array+0xc>
 8008136:	f855 3b04 	ldr.w	r3, [r5], #4
 800813a:	4798      	blx	r3
 800813c:	3601      	adds	r6, #1
 800813e:	e7f2      	b.n	8008126 <__libc_init_array+0x1e>
 8008140:	080084b8 	.word	0x080084b8
 8008144:	080084b8 	.word	0x080084b8
 8008148:	080084b8 	.word	0x080084b8
 800814c:	080084bc 	.word	0x080084bc

08008150 <memset>:
 8008150:	4402      	add	r2, r0
 8008152:	4603      	mov	r3, r0
 8008154:	4293      	cmp	r3, r2
 8008156:	d100      	bne.n	800815a <memset+0xa>
 8008158:	4770      	bx	lr
 800815a:	f803 1b01 	strb.w	r1, [r3], #1
 800815e:	e7f9      	b.n	8008154 <memset+0x4>

08008160 <__udivmoddi4>:
 8008160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008164:	9e08      	ldr	r6, [sp, #32]
 8008166:	460d      	mov	r5, r1
 8008168:	4604      	mov	r4, r0
 800816a:	460f      	mov	r7, r1
 800816c:	2b00      	cmp	r3, #0
 800816e:	d14a      	bne.n	8008206 <__udivmoddi4+0xa6>
 8008170:	428a      	cmp	r2, r1
 8008172:	4694      	mov	ip, r2
 8008174:	d965      	bls.n	8008242 <__udivmoddi4+0xe2>
 8008176:	fab2 f382 	clz	r3, r2
 800817a:	b143      	cbz	r3, 800818e <__udivmoddi4+0x2e>
 800817c:	fa02 fc03 	lsl.w	ip, r2, r3
 8008180:	f1c3 0220 	rsb	r2, r3, #32
 8008184:	409f      	lsls	r7, r3
 8008186:	fa20 f202 	lsr.w	r2, r0, r2
 800818a:	4317      	orrs	r7, r2
 800818c:	409c      	lsls	r4, r3
 800818e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8008192:	fa1f f58c 	uxth.w	r5, ip
 8008196:	fbb7 f1fe 	udiv	r1, r7, lr
 800819a:	0c22      	lsrs	r2, r4, #16
 800819c:	fb0e 7711 	mls	r7, lr, r1, r7
 80081a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80081a4:	fb01 f005 	mul.w	r0, r1, r5
 80081a8:	4290      	cmp	r0, r2
 80081aa:	d90a      	bls.n	80081c2 <__udivmoddi4+0x62>
 80081ac:	eb1c 0202 	adds.w	r2, ip, r2
 80081b0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80081b4:	f080 811c 	bcs.w	80083f0 <__udivmoddi4+0x290>
 80081b8:	4290      	cmp	r0, r2
 80081ba:	f240 8119 	bls.w	80083f0 <__udivmoddi4+0x290>
 80081be:	3902      	subs	r1, #2
 80081c0:	4462      	add	r2, ip
 80081c2:	1a12      	subs	r2, r2, r0
 80081c4:	b2a4      	uxth	r4, r4
 80081c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80081ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80081ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80081d2:	fb00 f505 	mul.w	r5, r0, r5
 80081d6:	42a5      	cmp	r5, r4
 80081d8:	d90a      	bls.n	80081f0 <__udivmoddi4+0x90>
 80081da:	eb1c 0404 	adds.w	r4, ip, r4
 80081de:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80081e2:	f080 8107 	bcs.w	80083f4 <__udivmoddi4+0x294>
 80081e6:	42a5      	cmp	r5, r4
 80081e8:	f240 8104 	bls.w	80083f4 <__udivmoddi4+0x294>
 80081ec:	4464      	add	r4, ip
 80081ee:	3802      	subs	r0, #2
 80081f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80081f4:	1b64      	subs	r4, r4, r5
 80081f6:	2100      	movs	r1, #0
 80081f8:	b11e      	cbz	r6, 8008202 <__udivmoddi4+0xa2>
 80081fa:	40dc      	lsrs	r4, r3
 80081fc:	2300      	movs	r3, #0
 80081fe:	e9c6 4300 	strd	r4, r3, [r6]
 8008202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008206:	428b      	cmp	r3, r1
 8008208:	d908      	bls.n	800821c <__udivmoddi4+0xbc>
 800820a:	2e00      	cmp	r6, #0
 800820c:	f000 80ed 	beq.w	80083ea <__udivmoddi4+0x28a>
 8008210:	2100      	movs	r1, #0
 8008212:	e9c6 0500 	strd	r0, r5, [r6]
 8008216:	4608      	mov	r0, r1
 8008218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800821c:	fab3 f183 	clz	r1, r3
 8008220:	2900      	cmp	r1, #0
 8008222:	d149      	bne.n	80082b8 <__udivmoddi4+0x158>
 8008224:	42ab      	cmp	r3, r5
 8008226:	d302      	bcc.n	800822e <__udivmoddi4+0xce>
 8008228:	4282      	cmp	r2, r0
 800822a:	f200 80f8 	bhi.w	800841e <__udivmoddi4+0x2be>
 800822e:	1a84      	subs	r4, r0, r2
 8008230:	eb65 0203 	sbc.w	r2, r5, r3
 8008234:	2001      	movs	r0, #1
 8008236:	4617      	mov	r7, r2
 8008238:	2e00      	cmp	r6, #0
 800823a:	d0e2      	beq.n	8008202 <__udivmoddi4+0xa2>
 800823c:	e9c6 4700 	strd	r4, r7, [r6]
 8008240:	e7df      	b.n	8008202 <__udivmoddi4+0xa2>
 8008242:	b902      	cbnz	r2, 8008246 <__udivmoddi4+0xe6>
 8008244:	deff      	udf	#255	; 0xff
 8008246:	fab2 f382 	clz	r3, r2
 800824a:	2b00      	cmp	r3, #0
 800824c:	f040 8090 	bne.w	8008370 <__udivmoddi4+0x210>
 8008250:	1a8a      	subs	r2, r1, r2
 8008252:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008256:	fa1f fe8c 	uxth.w	lr, ip
 800825a:	2101      	movs	r1, #1
 800825c:	fbb2 f5f7 	udiv	r5, r2, r7
 8008260:	fb07 2015 	mls	r0, r7, r5, r2
 8008264:	0c22      	lsrs	r2, r4, #16
 8008266:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800826a:	fb0e f005 	mul.w	r0, lr, r5
 800826e:	4290      	cmp	r0, r2
 8008270:	d908      	bls.n	8008284 <__udivmoddi4+0x124>
 8008272:	eb1c 0202 	adds.w	r2, ip, r2
 8008276:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800827a:	d202      	bcs.n	8008282 <__udivmoddi4+0x122>
 800827c:	4290      	cmp	r0, r2
 800827e:	f200 80cb 	bhi.w	8008418 <__udivmoddi4+0x2b8>
 8008282:	4645      	mov	r5, r8
 8008284:	1a12      	subs	r2, r2, r0
 8008286:	b2a4      	uxth	r4, r4
 8008288:	fbb2 f0f7 	udiv	r0, r2, r7
 800828c:	fb07 2210 	mls	r2, r7, r0, r2
 8008290:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008294:	fb0e fe00 	mul.w	lr, lr, r0
 8008298:	45a6      	cmp	lr, r4
 800829a:	d908      	bls.n	80082ae <__udivmoddi4+0x14e>
 800829c:	eb1c 0404 	adds.w	r4, ip, r4
 80082a0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80082a4:	d202      	bcs.n	80082ac <__udivmoddi4+0x14c>
 80082a6:	45a6      	cmp	lr, r4
 80082a8:	f200 80bb 	bhi.w	8008422 <__udivmoddi4+0x2c2>
 80082ac:	4610      	mov	r0, r2
 80082ae:	eba4 040e 	sub.w	r4, r4, lr
 80082b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80082b6:	e79f      	b.n	80081f8 <__udivmoddi4+0x98>
 80082b8:	f1c1 0720 	rsb	r7, r1, #32
 80082bc:	408b      	lsls	r3, r1
 80082be:	fa22 fc07 	lsr.w	ip, r2, r7
 80082c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80082c6:	fa05 f401 	lsl.w	r4, r5, r1
 80082ca:	fa20 f307 	lsr.w	r3, r0, r7
 80082ce:	40fd      	lsrs	r5, r7
 80082d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80082d4:	4323      	orrs	r3, r4
 80082d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80082da:	fa1f fe8c 	uxth.w	lr, ip
 80082de:	fb09 5518 	mls	r5, r9, r8, r5
 80082e2:	0c1c      	lsrs	r4, r3, #16
 80082e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80082e8:	fb08 f50e 	mul.w	r5, r8, lr
 80082ec:	42a5      	cmp	r5, r4
 80082ee:	fa02 f201 	lsl.w	r2, r2, r1
 80082f2:	fa00 f001 	lsl.w	r0, r0, r1
 80082f6:	d90b      	bls.n	8008310 <__udivmoddi4+0x1b0>
 80082f8:	eb1c 0404 	adds.w	r4, ip, r4
 80082fc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8008300:	f080 8088 	bcs.w	8008414 <__udivmoddi4+0x2b4>
 8008304:	42a5      	cmp	r5, r4
 8008306:	f240 8085 	bls.w	8008414 <__udivmoddi4+0x2b4>
 800830a:	f1a8 0802 	sub.w	r8, r8, #2
 800830e:	4464      	add	r4, ip
 8008310:	1b64      	subs	r4, r4, r5
 8008312:	b29d      	uxth	r5, r3
 8008314:	fbb4 f3f9 	udiv	r3, r4, r9
 8008318:	fb09 4413 	mls	r4, r9, r3, r4
 800831c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8008320:	fb03 fe0e 	mul.w	lr, r3, lr
 8008324:	45a6      	cmp	lr, r4
 8008326:	d908      	bls.n	800833a <__udivmoddi4+0x1da>
 8008328:	eb1c 0404 	adds.w	r4, ip, r4
 800832c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8008330:	d26c      	bcs.n	800840c <__udivmoddi4+0x2ac>
 8008332:	45a6      	cmp	lr, r4
 8008334:	d96a      	bls.n	800840c <__udivmoddi4+0x2ac>
 8008336:	3b02      	subs	r3, #2
 8008338:	4464      	add	r4, ip
 800833a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800833e:	fba3 9502 	umull	r9, r5, r3, r2
 8008342:	eba4 040e 	sub.w	r4, r4, lr
 8008346:	42ac      	cmp	r4, r5
 8008348:	46c8      	mov	r8, r9
 800834a:	46ae      	mov	lr, r5
 800834c:	d356      	bcc.n	80083fc <__udivmoddi4+0x29c>
 800834e:	d053      	beq.n	80083f8 <__udivmoddi4+0x298>
 8008350:	b156      	cbz	r6, 8008368 <__udivmoddi4+0x208>
 8008352:	ebb0 0208 	subs.w	r2, r0, r8
 8008356:	eb64 040e 	sbc.w	r4, r4, lr
 800835a:	fa04 f707 	lsl.w	r7, r4, r7
 800835e:	40ca      	lsrs	r2, r1
 8008360:	40cc      	lsrs	r4, r1
 8008362:	4317      	orrs	r7, r2
 8008364:	e9c6 7400 	strd	r7, r4, [r6]
 8008368:	4618      	mov	r0, r3
 800836a:	2100      	movs	r1, #0
 800836c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008370:	f1c3 0120 	rsb	r1, r3, #32
 8008374:	fa02 fc03 	lsl.w	ip, r2, r3
 8008378:	fa20 f201 	lsr.w	r2, r0, r1
 800837c:	fa25 f101 	lsr.w	r1, r5, r1
 8008380:	409d      	lsls	r5, r3
 8008382:	432a      	orrs	r2, r5
 8008384:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008388:	fa1f fe8c 	uxth.w	lr, ip
 800838c:	fbb1 f0f7 	udiv	r0, r1, r7
 8008390:	fb07 1510 	mls	r5, r7, r0, r1
 8008394:	0c11      	lsrs	r1, r2, #16
 8008396:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800839a:	fb00 f50e 	mul.w	r5, r0, lr
 800839e:	428d      	cmp	r5, r1
 80083a0:	fa04 f403 	lsl.w	r4, r4, r3
 80083a4:	d908      	bls.n	80083b8 <__udivmoddi4+0x258>
 80083a6:	eb1c 0101 	adds.w	r1, ip, r1
 80083aa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80083ae:	d22f      	bcs.n	8008410 <__udivmoddi4+0x2b0>
 80083b0:	428d      	cmp	r5, r1
 80083b2:	d92d      	bls.n	8008410 <__udivmoddi4+0x2b0>
 80083b4:	3802      	subs	r0, #2
 80083b6:	4461      	add	r1, ip
 80083b8:	1b49      	subs	r1, r1, r5
 80083ba:	b292      	uxth	r2, r2
 80083bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80083c0:	fb07 1115 	mls	r1, r7, r5, r1
 80083c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80083c8:	fb05 f10e 	mul.w	r1, r5, lr
 80083cc:	4291      	cmp	r1, r2
 80083ce:	d908      	bls.n	80083e2 <__udivmoddi4+0x282>
 80083d0:	eb1c 0202 	adds.w	r2, ip, r2
 80083d4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80083d8:	d216      	bcs.n	8008408 <__udivmoddi4+0x2a8>
 80083da:	4291      	cmp	r1, r2
 80083dc:	d914      	bls.n	8008408 <__udivmoddi4+0x2a8>
 80083de:	3d02      	subs	r5, #2
 80083e0:	4462      	add	r2, ip
 80083e2:	1a52      	subs	r2, r2, r1
 80083e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80083e8:	e738      	b.n	800825c <__udivmoddi4+0xfc>
 80083ea:	4631      	mov	r1, r6
 80083ec:	4630      	mov	r0, r6
 80083ee:	e708      	b.n	8008202 <__udivmoddi4+0xa2>
 80083f0:	4639      	mov	r1, r7
 80083f2:	e6e6      	b.n	80081c2 <__udivmoddi4+0x62>
 80083f4:	4610      	mov	r0, r2
 80083f6:	e6fb      	b.n	80081f0 <__udivmoddi4+0x90>
 80083f8:	4548      	cmp	r0, r9
 80083fa:	d2a9      	bcs.n	8008350 <__udivmoddi4+0x1f0>
 80083fc:	ebb9 0802 	subs.w	r8, r9, r2
 8008400:	eb65 0e0c 	sbc.w	lr, r5, ip
 8008404:	3b01      	subs	r3, #1
 8008406:	e7a3      	b.n	8008350 <__udivmoddi4+0x1f0>
 8008408:	4645      	mov	r5, r8
 800840a:	e7ea      	b.n	80083e2 <__udivmoddi4+0x282>
 800840c:	462b      	mov	r3, r5
 800840e:	e794      	b.n	800833a <__udivmoddi4+0x1da>
 8008410:	4640      	mov	r0, r8
 8008412:	e7d1      	b.n	80083b8 <__udivmoddi4+0x258>
 8008414:	46d0      	mov	r8, sl
 8008416:	e77b      	b.n	8008310 <__udivmoddi4+0x1b0>
 8008418:	3d02      	subs	r5, #2
 800841a:	4462      	add	r2, ip
 800841c:	e732      	b.n	8008284 <__udivmoddi4+0x124>
 800841e:	4608      	mov	r0, r1
 8008420:	e70a      	b.n	8008238 <__udivmoddi4+0xd8>
 8008422:	4464      	add	r4, ip
 8008424:	3802      	subs	r0, #2
 8008426:	e742      	b.n	80082ae <__udivmoddi4+0x14e>

08008428 <_init>:
 8008428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800842a:	bf00      	nop
 800842c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800842e:	bc08      	pop	{r3}
 8008430:	469e      	mov	lr, r3
 8008432:	4770      	bx	lr

08008434 <_fini>:
 8008434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008436:	bf00      	nop
 8008438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800843a:	bc08      	pop	{r3}
 800843c:	469e      	mov	lr, r3
 800843e:	4770      	bx	lr
